// routes/Admin.route.js - –ê–î–ú–ò–ù–°–ö–ò–ï –†–û–£–¢–´ –° –ù–û–í–û–ô MIDDLEWARE –°–ò–°–¢–ï–ú–û–ô (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) üéØ
import express from 'express';
import {
  login,
  createAdmin,
  verify,
  getProfile,
  updatePermissions,
  getAdminsList
} from '../controllers/AdminController.js';

// üÜï –ò–ú–ü–û–†–¢ –ù–û–í–û–ì–û –ê–î–ú–ò–ù–°–ö–û–ì–û MIDDLEWARE
import { 
  checkAdminToken,
  checkAdminAccessByGroup,
  requireOwner,
  requireManagerOrOwner,
  requireAnyAdmin
} from '../middleware/adminAuth.middleware.js';

// üÜï –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –†–û–£–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–ê–ú–ò
import adminPartnerRoutes from './AdminPartner.route.js';

const router = express.Router();

// ================ –ü–£–ë–õ–ò–ß–ù–´–ï –†–û–£–¢–´ ================

// POST /api/admin/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.post('/login', login);

// GET /api/admin/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–æ—É—Ç–æ–≤
router.get('/health', (req, res) => {
  res.json({
    result: true,
    message: "üéØ Admin routes - –° –ù–û–í–û–ô MIDDLEWARE –°–ò–°–¢–ï–ú–û–ô",
    service_layer: "enabled",
    meta_model: "enabled",
    admin_permissions: "role_based",
    
    // üìã –î–û–°–¢–£–ü–ù–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –†–û–õ–ò
    admin_roles: {
      owner: {
        description: "–í–ª–∞–¥–µ–ª–µ—Ü —Å–∏—Å—Ç–µ–º—ã - –≤—Å–µ –ø—Ä–∞–≤–∞",
        created: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞",
        permissions: "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"
      },
      manager: {
        description: "–ú–µ–Ω–µ–¥–∂–µ—Ä - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏",
        permissions: "–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"
      },
      admin: {
        description: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞",
        permissions: "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö, –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
      },
      support: {
        description: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        permissions: "–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤"
      },
      moderator: {
        description: "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        permissions: "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      }
    },
    
    // üìã –°–¢–†–£–ö–¢–£–†–ê MIDDLEWARE
    middleware_system: {
      base_auth: "checkAdminToken - –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∞",
      role_based: "checkAdminAccessByGroup(['role1', 'role2']) - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–æ–ª—è–º",
      shortcuts: {
        requireOwner: "–¢–æ–ª—å–∫–æ –¥–ª—è owner",
        requireManagerOrOwner: "–î–ª—è owner –∏ manager",
        requireAnyAdmin: "–î–ª—è –ª—é–±–æ–≥–æ –∞–¥–º–∏–Ω–∞"
      }
    },
    
    // üìã –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
    usage_examples: {
      only_owner: "router.post('/critical', requireOwner, controller)",
      owner_and_manager: "router.post('/manage', requireManagerOrOwner, controller)",
      specific_roles: "router.get('/data', checkAdminAccessByGroup(['admin', 'support']), controller)",
      any_admin: "router.get('/dashboard', requireAnyAdmin, controller)"
    },
    
    // üéØ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë OWNER –ê–ö–ö–ê–£–ù–¢–ï
    owner_account: {
      creation: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞",
      email: "admin@admin.com",
      password: "admin (–∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!)",
      note: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/admin/login –¥–ª—è –≤—Ö–æ–¥–∞"
    },
    
    // üìã –î–û–°–¢–£–ü–ù–´–ï ENDPOINTS
    available_endpoints: {
      auth: {
        login: "POST /api/admin/login",
        verify: "GET /api/admin/verify",
        profile: "GET /api/admin/profile"
      },
      management: {
        create_admin: "POST /api/admin/create",
        list_admins: "GET /api/admin/list",
        update_permissions: "PUT /api/admin/:admin_id/permissions"
      },
      partners: {
        requests: "GET /api/admin/partners/requests",
        approve_request: "POST /api/admin/partners/requests/:id/approve",
        approve_legal: "POST /api/admin/partners/legal/:id/approve",
        approve_content: "POST /api/admin/partners/profiles/:id/approve"
      },
      system: {
        dashboard: "GET /api/admin/dashboard",
        search: "GET /api/admin/search",
        system_info: "GET /api/admin/system"
      }
    },
    
    timestamp: new Date().toISOString()
  });
});

// ================ –ó–ê–©–ò–©–ï–ù–ù–´–ï –†–û–£–¢–´ –ê–î–ú–ò–ù–û–í ================

// GET /api/admin/verify - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.get('/verify', checkAdminToken, verify);

// GET /api/admin/profile - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞  
router.get('/profile', checkAdminToken, getProfile);

// POST /api/admin/create - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ owner –∏–ª–∏ manager)
router.post('/create', requireManagerOrOwner, createAdmin);

// GET /api/admin/list - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (owner/manager)
router.get('/list', requireManagerOrOwner, getAdminsList);

// PUT /api/admin/:admin_id/permissions - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ owner)
router.put('/:admin_id/permissions', requireOwner, updatePermissions);

// ================ üÜï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ú–û–î–£–õ–Ø –ü–ê–†–¢–ù–ï–†–û–í –° –ù–û–í–´–ú–ò MIDDLEWARE ================

/**
 * üè™ –ú–û–î–£–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–ê–ú–ò
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º role-based middleware –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
 */
router.use('/partners', adminPartnerRoutes);

// ================ –î–ê–®–ë–û–†–î –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ================

/**
 * üìä –ì–õ–ê–í–ù–´–ô –î–ê–®–ë–û–†–î –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
 * GET /api/admin/dashboard - –î–æ—Å—Ç—É–ø–µ–Ω –ª—é–±–æ–º—É –∞–¥–º–∏–Ω—É
 */
router.get('/dashboard', requireAnyAdmin, async (req, res) => {
  try {
    // üéØ –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–ê–®–ë–û–†–î–ê
    const dashboardData = {
      admin_info: {
        id: req.admin._id,
        full_name: req.admin.full_name,
        role: req.admin_role,
        department: req.admin.contact_info?.department,
        last_login: req.admin.last_login_at
      },
      
      server_status: {
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        environment: process.env.NODE_ENV,
        version: "2.0.0"
      },
      
      quick_stats: {
        pending_requests: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...",
        active_partners: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...",
        total_orders: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
      },
      
      // üéØ –î–ï–ô–°–¢–í–ò–Ø –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –†–û–õ–ò
      available_actions: getActionsForRole(req.admin_role),
      
      notifications: [
        {
          type: "success",
          message: "Owner –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ",
          timestamp: new Date()
        },
        {
          type: "info", 
          message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${req.admin.full_name}! –í–∞—à–∞ —Ä–æ–ª—å: ${req.admin_role}`,
          timestamp: new Date()
        }
      ]
    };

    res.status(200).json({
      result: true,
      message: "–î–∞—à–±–æ—Ä–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
      dashboard: dashboardData
    });

  } catch (error) {
    console.error('Admin dashboard error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞"
    });
  }
});

/**
 * üîç –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö –ü–û –°–ò–°–¢–ï–ú–ï
 * GET /api/admin/search?q=query - –î–æ—Å—Ç—É–ø–µ–Ω –ª—é–±–æ–º—É –∞–¥–º–∏–Ω—É
 */
router.get('/search', requireAnyAdmin, async (req, res) => {
  try {
    const { q } = req.query;
    
    if (!q || q.length < 3) {
      return res.status(400).json({
        result: false,
        message: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
      });
    }

    // üéØ –ü–û–ò–°–ö –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –†–û–õ–ò –ê–î–ú–ò–ù–ê
    const searchResults = await performSearchByRole(q, req.admin_role);

    res.status(200).json({
      result: true,
      message: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: "${q}"`,
      query: q,
      admin_role: req.admin_role,
      results: searchResults,
      total_found: Object.values(searchResults).flat().length
    });

  } catch (error) {
    console.error('Admin search error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞"
    });
  }
});

// ================ –°–ò–°–¢–ï–ú–ù–´–ï –†–û–£–¢–´ (–¢–û–õ–¨–ö–û OWNER) ================

/**
 * üîß –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
 * GET /api/admin/system - –¢–æ–ª—å–∫–æ –¥–ª—è owner
 */
router.get('/system', requireOwner, async (req, res) => {
  try {
    const systemInfo = {
      database: {
        status: "connected",
        collections: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
      },
      server: {
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        cpu_usage: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
      },
      security: {
        active_sessions: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...",
        failed_logins: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
      }
    };

    res.status(200).json({
      result: true,
      message: "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
      system: systemInfo
    });

  } catch (error) {
    console.error('System info error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    });
  }
});

// ================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –î–ï–ô–°–¢–í–ò–ô –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –†–û–õ–ò
 */
function getActionsForRole(adminRole) {
  const baseActions = [
    {
      title: "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—à–±–æ—Ä–¥–∞",
      description: "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã",
      link: "/api/admin/dashboard"
    }
  ];

  switch (adminRole) {
    case 'owner':
      return [
        ...baseActions,
        {
          title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏",
          description: "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏",
          link: "/api/admin/list"
        },
        {
          title: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
          description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
          link: "/api/admin/system"
        },
        {
          title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
          description: "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
          link: "/api/admin/partners/requests"
        }
      ];
      
    case 'manager':
      return [
        ...baseActions,
        {
          title: "–ó–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
          description: "–û–¥–æ–±—Ä–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
          link: "/api/admin/partners/requests"
        },
        {
          title: "–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤",
          description: "–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
          link: "/api/admin/create"
        }
      ];
      
    case 'support':
      return [
        ...baseActions,
        {
          title: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
          description: "–†–∞–±–æ—Ç–∞ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏",
          link: "/api/admin/support"
        }
      ];
      
    default:
      return baseActions;
  }
}

/**
 * üîç –ü–û–ò–°–ö –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –†–û–õ–ò
 */
async function performSearchByRole(query, adminRole) {
  const results = {
    partners: [],
    customers: [],
    orders: [],
    admins: []
  };

  // Owner –∏ Manager –º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å –≤–µ–∑–¥–µ
  if (['owner', 'manager'].includes(adminRole)) {
    // –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ (–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞)
    return results;
  }
  
  // Support –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–∫–∞–∑—ã
  if (adminRole === 'support') {
    return {
      customers: [],
      orders: []
    };
  }
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  return {
    basic_info: []
  };
}

// ================ MIDDLEWARE –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ================
router.use((error, req, res, next) => {
  console.error('Admin Route Error:', error);
  
  res.status(error.statusCode || 500).json({
    result: false,
    message: error.message || '–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–æ—É—Ç–∞—Ö',
    error_code: error.code || 'ADMIN_ROUTE_ERROR',
    timestamp: new Date().toISOString()
  });
});

// ================ –ó–ê–ú–ï–¢–ö–ò –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í ================
/*
üéØ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ê–î–ú–ò–ù–°–ö–ò–• –†–û–£–¢–û–í –° ROLE-BASED MIDDLEWARE:

BASE: /api/admin/
‚îú‚îÄ‚îÄ üë§ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò
‚îÇ   ‚îú‚îÄ‚îÄ POST /login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ø—É–±–ª–∏—á–Ω—ã–π)
‚îÇ   ‚îú‚îÄ‚îÄ GET /verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (checkAdminToken)
‚îÇ   ‚îú‚îÄ‚îÄ GET /profile - –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞ (checkAdminToken)
‚îÇ   ‚îú‚îÄ‚îÄ POST /create - –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (requireManagerOrOwner)
‚îÇ   ‚îú‚îÄ‚îÄ GET /list - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (requireManagerOrOwner)
‚îÇ   ‚îî‚îÄ‚îÄ PUT /:admin_id/permissions - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ (requireOwner)
‚îÇ
‚îú‚îÄ‚îÄ üè™ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–†–¢–ù–ï–†–ê–ú–ò (/partners/*)
‚îÇ   ‚îú‚îÄ‚îÄ –†–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º
‚îÇ   ‚îú‚îÄ‚îÄ Owner: –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
‚îÇ   ‚îú‚îÄ‚îÄ Manager: –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚îÇ   ‚îî‚îÄ‚îÄ Admin/Support: –ø—Ä–æ—Å–º–æ—Ç—Ä
‚îÇ
‚îú‚îÄ‚îÄ üìä –î–ê–®–ë–û–†–î –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
‚îÇ   ‚îú‚îÄ‚îÄ GET /dashboard - –ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ (requireAnyAdmin)
‚îÇ   ‚îú‚îÄ‚îÄ GET /search - –ü–æ–∏—Å–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ (requireAnyAdmin)
‚îÇ   ‚îî‚îÄ‚îÄ GET /system - –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (requireOwner)
‚îÇ
‚îî‚îÄ‚îÄ üéØ –†–û–õ–ò –ò –ü–†–ê–í–ê:
    ‚îú‚îÄ‚îÄ owner: –í—Å–µ –ø—Ä–∞–≤–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    ‚îú‚îÄ‚îÄ manager: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ + —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    ‚îú‚îÄ‚îÄ admin: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞
    ‚îú‚îÄ‚îÄ support: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    ‚îî‚îÄ‚îÄ moderator: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üÜï MIDDLEWARE –°–ò–°–¢–ï–ú–ê:
- checkAdminToken: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
- checkAdminAccessByGroup(['role1', 'role2']): –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–æ–ª—è–º
- requireOwner: –¢–æ–ª—å–∫–æ owner
- requireManagerOrOwner: Owner –∏–ª–∏ manager
- requireAnyAdmin: –õ—é–±–æ–π –∞–¥–º–∏–Ω

üîë –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
router.post('/critical', requireOwner, controller)
router.post('/manage', requireManagerOrOwner, controller)  
router.get('/data', checkAdminAccessByGroup(['admin', 'support']), controller)
router.get('/dashboard', requireAnyAdmin, controller)

üìß OWNER –ê–ö–ö–ê–£–ù–¢:
Email: admin@admin.com
Password: admin
–°–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
*/

export default router;