import express from 'express';
import {
 approveInitialPartnerRequest,
 rejectInitialPartnerRequest,
 approveLegalInfoAndCreatePartner,
 rejectLegalInfo,
 getAllPartnerRequests,
 approvePartnerContentAndPublish  
} from '../services/admin.partner.service.js';
import { 
 InitialPartnerRequest, 
 PartnerLegalInfo,
 PartnerProfile 
} from '../models/index.js';
import { 
 authenticateUser, 
 requireRole,
 requireAdminPermission
} from '../middleware/auth.middleware.js';

const router = express.Router();

router.get('/health', (req, res) => {
 res.json({
   result: true,
   message: "üè™ Admin Partner routes working",
   service_layer: "enabled",
   meta_model: "enabled",
   admin_permissions: "enabled",
   partner_admin_workflow: {
     description: "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
     steps: {
       "–≠–¢–ê–ü 0": "–ü–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ POST /api/partners/register",
       "–≠–¢–ê–ü 1‚Üí2": "POST /requests/:id/approve - –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –∑–∞—è–≤–∫—É",
       "–≠–¢–ê–ü 2": "–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–¥–∞–µ—Ç —é—Ä.–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ POST /api/partners/legal-info/:request_id",
       "–≠–¢–ê–ü 3‚Üí4": "POST /legal/:id/approve - –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç —é—Ä.–¥–∞–Ω–Ω—ã–µ ‚Üí —Å–æ–∑–¥–∞–µ—Ç PartnerProfile",
       "–≠–¢–ê–ü 4": "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ",
       "–≠–¢–ê–ü 5‚Üí6": "POST /profiles/:id/approve - –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç ‚Üí –ø—É–±–ª–∏–∫—É–µ—Ç"
     }
   },
   available_endpoints: {
     get_all_requests: "GET /api/admin/partners/requests",
     get_request_details: "GET /api/admin/partners/requests/:request_id",
     get_legal_info: "GET /api/admin/partners/legal/:legal_info_id",
     approve_initial_request: "POST /api/admin/partners/requests/:request_id/approve",
     reject_initial_request: "POST /api/admin/partners/requests/:request_id/reject",
     approve_legal_info: "POST /api/admin/partners/legal/:legal_info_id/approve",
     reject_legal_info: "POST /api/admin/partners/legal/:legal_info_id/reject",
     approve_content: "POST /api/admin/partners/profiles/:profile_id/approve",
     reject_content: "POST /api/admin/partners/profiles/:profile_id/reject"
   },
   timestamp: new Date().toISOString()
 });
});

router.get('/requests',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const filters = {
       status: req.query.status,
       category: req.query.category,
       page: parseInt(req.query.page) || 1,
       limit: parseInt(req.query.limit) || 10,
       sort_by: req.query.sort_by || 'submitted_at',
       sort_order: req.query.sort_order || 'desc'
     };

     const result = await getAllPartnerRequests(filters);

     res.status(200).json({
       result: true,
       message: "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω",
       pagination: {
         current_page: filters.page,
         per_page: filters.limit,
         total_pages: result.totalPages,
         total_items: result.totalCount
       },
       filters_applied: filters,
       requests: result.requests
     });

   } catch (error) {
     console.error('Get all partner requests error:', error);
     res.status(500).json({
       result: false,
       message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
     });
   }
 }
);

router.get('/requests/:request_id',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const { request_id } = req.params;

     const request = await InitialPartnerRequest.findById(request_id);
     
     if (!request) {
       return res.status(404).json({
         result: false,
         message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
       });
     }

     const legalInfo = await PartnerLegalInfo.findOne({
       partner_request_id: request_id
     });

     const partnerProfile = await PartnerProfile.findOne({
       user_id: request.user_id
     });

     res.status(200).json({
       result: true,
       message: "–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã",
       request: request,
       legal_info: legalInfo,
       partner_profile: partnerProfile,
       workflow_status: {
         current_step: request.status,
         can_approve_initial: request.status === 'pending',
         can_approve_legal: legalInfo && legalInfo.verification_status === 'pending',
         can_approve_content: partnerProfile && !partnerProfile.is_public
       }
     });

   } catch (error) {
     console.error('Get request details error:', error);
     res.status(500).json({
       result: false,
       message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"
     });
   }
 }
);

router.post('/requests/:request_id/approve',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const { request_id } = req.params;
     const { admin_notes } = req.body;
     const { user } = req;

     const result = await approveInitialPartnerRequest(
       request_id, 
       user._id, 
       admin_notes || '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞'
     );

     res.status(200).json({
       result: true,
       message: "üéØ –≠–¢–ê–ü 1‚Üí2 –ó–ê–í–ï–†–®–ï–ù: –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
       admin_action: "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
       next_step: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
       request: result.request,
       workflow: {
         previous_step: 1,
         current_step: 2,
         step_name: "–ü–∞—Ä—Ç–Ω–µ—Ä –∑–∞–ø–æ–ª–Ω—è–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
       }
     });

   } catch (error) {
     console.error('Approve initial request error:', error);
     res.status(400).json({
       result: false,
       message: error.message || "–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"
     });
   }
 }
);

router.post('/requests/:request_id/reject',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const { request_id } = req.params;
     const { rejection_reason } = req.body;
     const { user } = req;

     if (!rejection_reason) {
       return res.status(400).json({
         result: false,
         message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
       });
     }

     const result = await rejectInitialPartnerRequest(
       request_id, 
       user._id, 
       rejection_reason
     );

     res.status(200).json({
       result: true,
       message: "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
       admin_action: "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
       rejection_reason: rejection_reason,
       request: result.request
     });

   } catch (error) {
     console.error('Reject initial request error:', error);
     res.status(400).json({
       result: false,
       message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"
     });
   }
 }
);

router.get('/legal/:legal_info_id',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const { legal_info_id } = req.params;

     const legalInfo = await PartnerLegalInfo.findById(legal_info_id);
     
     if (!legalInfo) {
       return res.status(404).json({
         result: false,
         message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
       });
     }

     res.status(200).json({
       result: true,
       message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",
       legal_info: legalInfo,
       can_approve: legalInfo.verification_status === 'pending',
       workflow_note: "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω PartnerProfile"
     });

   } catch (error) {
     console.error('Get legal info error:', error);
     res.status(500).json({
       result: false,
       message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
     });
   }
 }
);

router.post('/legal/:legal_info_id/approve',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const { legal_info_id } = req.params;
     const { admin_notes } = req.body;
     const { user } = req;

     const result = await approveLegalInfoAndCreatePartner(
       legal_info_id, 
       user._id, 
       admin_notes || '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã'
     );

     res.status(200).json({
       result: true,
       message: "üéØ –≠–¢–ê–ü 3‚Üí4 –ó–ê–í–ï–†–®–ï–ù: –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω! –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã.",
       admin_action: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã",
       partner_created: true,
       next_step: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –Ω–∞–ø–æ–ª–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ",
       partner: result.partner,
       legal_info: result.legalInfo,
       workflow: {
         previous_step: 3,
         current_step: 4,
         step_name: "–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
         milestone: "PartnerProfile —Å–æ–∑–¥–∞–Ω!"
       }
     });

   } catch (error) {
     console.error('Approve legal info error:', error);
     res.status(400).json({
       result: false,
       message: error.message || "–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
     });
   }
 }
);

router.post('/legal/:legal_info_id/reject',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const { legal_info_id } = req.params;
     const { rejection_reason, correction_notes } = req.body;
     const { user } = req;

     if (!rejection_reason) {
       return res.status(400).json({
         result: false,
         message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
       });
     }

     const result = await rejectLegalInfo(
       legal_info_id, 
       user._id, 
       rejection_reason,
       correction_notes || ''
     );

     res.status(200).json({
       result: true,
       message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
       admin_action: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
       rejection_reason: rejection_reason,
       correction_notes: correction_notes,
       legal_info: result.legalInfo
     });

   } catch (error) {
     console.error('Reject legal info error:', error);
     res.status(400).json({
       result: false,
       message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
     });
   }
 }
);

router.post('/profiles/:profile_id/approve',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const { profile_id } = req.params;
     const { admin_notes } = req.body;
     const { user } = req;

     const result = await approvePartnerContentAndPublish(
       profile_id,
       user._id,
       admin_notes
     );

     res.status(200).json(result);

   } catch (error) {
     console.error('Approve content error:', error);
     res.status(400).json({
       result: false,
       message: error.message || "–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
     });
   }
 }
);

router.post('/profiles/:profile_id/reject',
 authenticateUser,
 requireRole('admin'),
 async (req, res) => {
   try {
     const { profile_id } = req.params;
     const { rejection_reason } = req.body;

     res.status(200).json({
       result: true,
       message: "‚ùå –≠–¢–ê–ü 5: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–í –†–ê–ó–†–ê–ë–û–¢–ö–ï)",
       note: "–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
       profile_id: profile_id,
       rejection_reason: rejection_reason
     });

   } catch (error) {
     console.error('Reject content error:', error);
     res.status(500).json({
       result: false,
       message: "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
     });
   }
 }
);

router.use((error, req, res, next) => {
 console.error('Admin Partner Route Error:', error);
 
 res.status(error.statusCode || 500).json({
   result: false,
   message: error.message || '–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Ä–æ—É—Ç–∞—Ö',
   error_code: error.code || 'ADMIN_PARTNER_ROUTE_ERROR',
   timestamp: new Date().toISOString()
 });
});

export default router;