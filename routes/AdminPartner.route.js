// routes/AdminPartner.route.js - –ê–î–ú–ò–ù–°–ö–ò–ï –†–û–£–¢–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–ê–ú–ò üè™
import express from 'express';
import {
  approveInitialPartnerRequest,
  rejectInitialPartnerRequest,
  approveLegalInfoAndCreatePartner,
  rejectLegalInfo,
  getAllPartnerRequests
} from '../services/admin.partner.service.js';
import { 
  InitialPartnerRequest, 
  PartnerLegalInfo,
  PartnerProfile 
} from '../models/index.js';
import { 
  authenticateUser, 
  requireRole,
  requireAdminPermission
} from '../middleware/auth.middleware.js';

const router = express.Router();

// ================ HEALTH CHECK ================

/**
 * üè• HEALTH CHECK –ê–î–ú–ò–ù–°–ö–ò–• –ü–ê–†–¢–ù–ï–†–°–ö–ò–• –†–û–£–¢–û–í
 * GET /api/admin/partners/health
 */
router.get('/health', (req, res) => {
  res.json({
    result: true,
    message: "üè™ Admin Partner routes working",
    service_layer: "enabled",
    meta_model: "enabled",
    admin_permissions: "enabled",
    
    // üéØ WORKFLOW –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–ê–ú–ò
    partner_admin_workflow: {
      description: "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
      steps: {
        "–≠–¢–ê–ü 0": "–ü–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ POST /api/partners/register",
        "–≠–¢–ê–ü 1‚Üí2": "POST /requests/:id/approve - –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –∑–∞—è–≤–∫—É",
        "–≠–¢–ê–ü 2": "–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–¥–∞–µ—Ç —é—Ä.–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ POST /api/partners/legal-info/:request_id",
        "–≠–¢–ê–ü 3‚Üí4": "POST /legal/:id/approve - –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç —é—Ä.–¥–∞–Ω–Ω—ã–µ ‚Üí —Å–æ–∑–¥–∞–µ—Ç PartnerProfile",
        "–≠–¢–ê–ü 4": "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ",
        "–≠–¢–ê–ü 5‚Üí6": "POST /profiles/:id/approve - –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç ‚Üí –ø—É–±–ª–∏–∫—É–µ—Ç"
      }
    },
    
    // üõ† –î–û–°–¢–£–ü–ù–´–ï ENDPOINTS
    available_endpoints: {
      // –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
      get_all_requests: "GET /api/admin/partners/requests",
      get_request_details: "GET /api/admin/partners/requests/:request_id",
      get_legal_info: "GET /api/admin/partners/legal/:legal_info_id",
      
      // –ü–µ—Ä–≤–∏—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–≠–¢–ê–ü 1)
      approve_initial_request: "POST /api/admin/partners/requests/:request_id/approve",
      reject_initial_request: "POST /api/admin/partners/requests/:request_id/reject",
      
      // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–≠–¢–ê–ü 3)
      approve_legal_info: "POST /api/admin/partners/legal/:legal_info_id/approve",
      reject_legal_info: "POST /api/admin/partners/legal/:legal_info_id/reject",
      
      // –ö–æ–Ω—Ç–µ–Ω—Ç –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–≠–¢–ê–ü 5) - –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è
      approve_content: "POST /api/admin/partners/profiles/:profile_id/approve",
      reject_content: "POST /api/admin/partners/profiles/:profile_id/reject"
    },
    
    timestamp: new Date().toISOString()
  });
});

// ================ –ü–†–û–°–ú–û–¢–† –ó–ê–Ø–í–û–ö ================

/**
 * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ó–ê–Ø–í–û–ö –ü–ê–†–¢–ù–ï–†–û–í
 * GET /api/admin/partners/requests
 * Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ?status=pending&category=restaurant&page=1&limit=10
 */
router.get('/requests',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const filters = {
        status: req.query.status,
        category: req.query.category,
        page: parseInt(req.query.page) || 1,
        limit: parseInt(req.query.limit) || 10,
        sort_by: req.query.sort_by || 'submitted_at',
        sort_order: req.query.sort_order || 'desc'
      };

      const result = await getAllPartnerRequests(filters);

      res.status(200).json({
        result: true,
        message: "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω",
        pagination: {
          current_page: filters.page,
          per_page: filters.limit,
          total_pages: result.totalPages,
          total_items: result.totalCount
        },
        filters_applied: filters,
        requests: result.requests
      });

    } catch (error) {
      console.error('Get all partner requests error:', error);
      res.status(500).json({
        result: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }
  }
);

/**
 * üîç –î–ï–¢–ê–õ–ò –ö–û–ù–ö–†–ï–¢–ù–û–ô –ó–ê–Ø–í–ö–ò
 * GET /api/admin/partners/requests/:request_id
 */
router.get('/requests/:request_id',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const { request_id } = req.params;

      const request = await InitialPartnerRequest.findById(request_id);
      
      if (!request) {
        return res.status(404).json({
          result: false,
          message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        });
      }

      // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      const legalInfo = await PartnerLegalInfo.findOne({
        partner_request_id: request_id
      });

      // –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω)
      const partnerProfile = await PartnerProfile.findOne({
        user_id: request.user_id
      });

      res.status(200).json({
        result: true,
        message: "–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã",
        request: request,
        legal_info: legalInfo,
        partner_profile: partnerProfile,
        workflow_status: {
          current_step: request.status,
          can_approve_initial: request.status === 'pending',
          can_approve_legal: legalInfo && legalInfo.verification_status === 'pending',
          can_approve_content: partnerProfile && !partnerProfile.is_public
        }
      });

    } catch (error) {
      console.error('Get request details error:', error);
      res.status(500).json({
        result: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"
      });
    }
  }
);

// ================ –≠–¢–ê–ü 1‚Üí2: –ü–ï–†–í–ò–ß–ù–´–ï –ó–ê–Ø–í–ö–ò ================

/**
 * ‚úÖ –û–î–û–ë–†–ï–ù–ò–ï –ü–ï–†–í–ò–ß–ù–û–ô –ó–ê–Ø–í–ö–ò
 * POST /api/admin/partners/requests/:request_id/approve
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –∏–∑ 'pending' –≤ 'approved'
 */
router.post('/requests/:request_id/approve',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const { request_id } = req.params;
      const { admin_notes } = req.body;
      const { user } = req;

      const result = await approveInitialPartnerRequest(
        request_id, 
        user._id, 
        admin_notes || '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞'
      );

      res.status(200).json({
        result: true,
        message: "üéØ –≠–¢–ê–ü 1‚Üí2 –ó–ê–í–ï–†–®–ï–ù: –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
        admin_action: "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
        next_step: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        request: result.request,
        workflow: {
          previous_step: 1,
          current_step: 2,
          step_name: "–ü–∞—Ä—Ç–Ω–µ—Ä –∑–∞–ø–æ–ª–Ω—è–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
        }
      });

    } catch (error) {
      console.error('Approve initial request error:', error);
      res.status(400).json({
        result: false,
        message: error.message || "–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"
      });
    }
  }
);

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ü–ï–†–í–ò–ß–ù–û–ô –ó–ê–Ø–í–ö–ò
 * POST /api/admin/partners/requests/:request_id/reject
 */
router.post('/requests/:request_id/reject',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const { request_id } = req.params;
      const { rejection_reason } = req.body;
      const { user } = req;

      if (!rejection_reason) {
        return res.status(400).json({
          result: false,
          message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
        });
      }

      const result = await rejectInitialPartnerRequest(
        request_id, 
        user._id, 
        rejection_reason
      );

      res.status(200).json({
        result: true,
        message: "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        admin_action: "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        rejection_reason: rejection_reason,
        request: result.request
      });

    } catch (error) {
      console.error('Reject initial request error:', error);
      res.status(400).json({
        result: false,
        message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"
      });
    }
  }
);

// ================ –≠–¢–ê–ü 3‚Üí4: –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï ================

/**
 * üîç –ü–û–õ–£–ß–ï–ù–ò–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•
 * GET /api/admin/partners/legal/:legal_info_id
 */
router.get('/legal/:legal_info_id',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const { legal_info_id } = req.params;

      const legalInfo = await PartnerLegalInfo.findById(legal_info_id);
      
      if (!legalInfo) {
        return res.status(404).json({
          result: false,
          message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        });
      }

      res.status(200).json({
        result: true,
        message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",
        legal_info: legalInfo,
        can_approve: legalInfo.verification_status === 'pending',
        workflow_note: "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω PartnerProfile"
      });

    } catch (error) {
      console.error('Get legal info error:', error);
      res.status(500).json({
        result: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
      });
    }
  }
);

/**
 * ‚úÖ –û–î–û–ë–†–ï–ù–ò–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• (–°–û–ó–î–ê–ù–ò–ï –ü–ê–†–¢–ù–ï–†–ê)
 * POST /api/admin/partners/legal/:legal_info_id/approve
 * –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –°–æ–∑–¥–∞–µ—Ç PartnerProfile!
 */
router.post('/legal/:legal_info_id/approve',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const { legal_info_id } = req.params;
      const { admin_notes } = req.body;
      const { user } = req;

      const result = await approveLegalInfoAndCreatePartner(
        legal_info_id, 
        user._id, 
        admin_notes || '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã'
      );

      res.status(200).json({
        result: true,
        message: "üéØ –≠–¢–ê–ü 3‚Üí4 –ó–ê–í–ï–†–®–ï–ù: –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω! –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã.",
        admin_action: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã",
        partner_created: true,
        next_step: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –Ω–∞–ø–æ–ª–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ",
        partner: result.partner,
        legal_info: result.legalInfo,
        workflow: {
          previous_step: 3,
          current_step: 4,
          step_name: "–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
          milestone: "PartnerProfile —Å–æ–∑–¥–∞–Ω!"
        }
      });

    } catch (error) {
      console.error('Approve legal info error:', error);
      res.status(400).json({
        result: false,
        message: error.message || "–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
      });
    }
  }
);

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ï–ù–ò–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•
 * POST /api/admin/partners/legal/:legal_info_id/reject
 */
router.post('/legal/:legal_info_id/reject',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const { legal_info_id } = req.params;
      const { rejection_reason, correction_notes } = req.body;
      const { user } = req;

      if (!rejection_reason) {
        return res.status(400).json({
          result: false,
          message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
        });
      }

      const result = await rejectLegalInfo(
        legal_info_id, 
        user._id, 
        rejection_reason,
        correction_notes || ''
      );

      res.status(200).json({
        result: true,
        message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
        admin_action: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
        rejection_reason: rejection_reason,
        correction_notes: correction_notes,
        legal_info: result.legalInfo
      });

    } catch (error) {
      console.error('Reject legal info error:', error);
      res.status(400).json({
        result: false,
        message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
      });
    }
  }
);

// ================ –≠–¢–ê–ü 5‚Üí6: –ö–û–ù–¢–ï–ù–¢ –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ================

/**
 * ‚úÖ –û–î–û–ë–†–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø
 * POST /api/admin/partners/profiles/:profile_id/approve
 * –ü–õ–ê–ù–ò–†–£–ï–¢–°–Ø: –ü–æ—Å–ª–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
 */
router.post('/profiles/:profile_id/approve',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const { profile_id } = req.params;
      const { admin_notes } = req.body;
      const { user } = req;

      // –ü–æ–∫–∞ –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
      res.status(200).json({
        result: true,
        message: "üéØ –≠–¢–ê–ü 5‚Üí6: –û–¥–æ–±—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–í –†–ê–ó–†–ê–ë–û–¢–ö–ï)",
        note: "–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ workflow",
        profile_id: profile_id,
        admin_notes: admin_notes,
        next_features: [
          "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è",
          "–û–¥–æ–±—Ä–µ–Ω–∏–µ –º–µ–Ω—é/–∫–∞—Ç–∞–ª–æ–≥–∞",
          "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ø—É–±–ª–∏—á–Ω–æ–º –ø–æ–∏—Å–∫–µ",
          "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        ]
      });

    } catch (error) {
      console.error('Approve content error:', error);
      res.status(500).json({
        result: false,
        message: "–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
      });
    }
  }
);

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê
 * POST /api/admin/partners/profiles/:profile_id/reject  
 * –ü–õ–ê–ù–ò–†–£–ï–¢–°–Ø
 */
router.post('/profiles/:profile_id/reject',
  authenticateUser,
  requireRole('admin'),
  async (req, res) => {
    try {
      const { profile_id } = req.params;
      const { rejection_reason } = req.body;

      // –ü–æ–∫–∞ –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
      res.status(200).json({
        result: true,
        message: "‚ùå –≠–¢–ê–ü 5: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–í –†–ê–ó–†–ê–ë–û–¢–ö–ï)",
        note: "–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
        profile_id: profile_id,
        rejection_reason: rejection_reason
      });

    } catch (error) {
      console.error('Reject content error:', error);
      res.status(500).json({
        result: false,
        message: "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
      });
    }
  }
);

// ================ MIDDLEWARE –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ================
router.use((error, req, res, next) => {
  console.error('Admin Partner Route Error:', error);
  
  res.status(error.statusCode || 500).json({
    result: false,
    message: error.message || '–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Ä–æ—É—Ç–∞—Ö',
    error_code: error.code || 'ADMIN_PARTNER_ROUTE_ERROR',
    timestamp: new Date().toISOString()
  });
});

// ================ –≠–ö–°–ü–û–†–¢ ================
export default router;