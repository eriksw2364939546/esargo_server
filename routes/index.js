// routes/index.js (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
import express from 'express';
const router = express.Router();

// Import —Ä–æ—É—Ç–æ–≤
import partnerRoutes from './Partner.route.js';
import customerRoutes from './Customer.route.js';
import adminRoutes from './Admin.route.js'; // üÜï –ù–û–í–´–ô

// Health check endpoint
router.get('/health', (req, res) => {
	res.json({
		success: true,
		message: 'ESARGO API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
		service_layer: 'enabled',
		meta_model: 'enabled',
		timestamp: new Date().toISOString()
	});
});

// Customer routes (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤)
router.use('/customers', customerRoutes);

// Partner routes (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤/–º–∞–≥–∞–∑–∏–Ω–æ–≤)
router.use('/partners', partnerRoutes);

// üÜï Admin routes (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.use('/admin', adminRoutes);

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
router.get('/', (req, res) => {
	res.json({
		success: true,
		message: 'ESARGO API Server',
		version: '2.0.0',
		architecture: 'Service Layer + Meta Security Model',
		available_endpoints: {
			customers: {
				register: 'POST /api/customers/register',
				login: 'POST /api/customers/login',
				verify: 'GET /api/customers/verify',
				profile: 'GET /api/customers/profile',
				update_profile: 'PUT /api/customers/profile/:id',
				delete_profile: 'DELETE /api/customers/profile/:id',
				addresses: {
					add: 'POST /api/customers/addresses',
					update: 'PUT /api/customers/addresses/:addressId',
					remove: 'DELETE /api/customers/addresses/:addressId'
				}
			},
			partners: {
				login: 'POST /api/partners/login',
				initial_request: 'POST /api/partners/initial-request',
				legal_info: 'POST /api/partners/:id/legal-info',
				profile: 'GET /api/partners/profile',
				status: 'GET /api/partners/status',
				admin: {
					list_requests: 'GET /api/partners/requests',
					request_details: 'GET /api/partners/requests/:request_id',
					update_status: 'PATCH /api/partners/:id/status',
					approve_legal: 'POST /api/partners/legal-info/:legal_info_id/approve',
					reject_legal: 'POST /api/partners/legal-info/:legal_info_id/reject'
				}
			},
			admin: { // üÜï –ù–û–í–´–ô –†–ê–ó–î–ï–õ
				login: 'POST /api/admin/login',
				verify: 'GET /api/admin/verify',
				profile: 'GET /api/admin/profile',
				create_admin: 'POST /api/admin/create',
				list_admins: 'GET /api/admin/list',
				update_permissions: 'PUT /api/admin/:admin_id/permissions'
			}
		},
		security_features: {
			meta_model: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É email',
			encryption: '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
			role_based_access: '–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π',
			admin_permissions: '–ì—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
			account_lockout: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞'
		},
		timestamp: new Date().toISOString()
	});
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
router.use('*', (req, res) => {
	res.status(404).json({
		success: false,
		message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
		requested_url: req.originalUrl,
		available_routes: ['/api/customers', '/api/partners', '/api/admin']
	});
});

export default router;