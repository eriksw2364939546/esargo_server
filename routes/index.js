// ================ routes/index.js (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –° –ö–£–†–¨–ï–†–°–ö–ò–ú–ò –†–û–£–¢–ê–ú–ò) ================
import express from 'express';
const router = express.Router();

// Import —Ä–æ—É—Ç–æ–≤
import partnerRoutes from './Partner.route.js';
import partnerMenuRoutes from './Partner.menu.routes.js'; 
import customerRoutes from './Customer.route.js';
import courierRoutes from './Courier.route.js';           // üÜï –î–û–ë–ê–í–õ–ï–ù–û
import adminRoutes from './Admin.route.js';
import adminPartnerRoutes from './AdminPartner.route.js';
import adminCourierRoutes from './AdminCourier.route.js';  // üÜï –î–û–ë–ê–í–õ–ï–ù–û

// Health check endpoint
router.get('/health', (req, res) => {
    res.json({
        success: true,
        message: 'ESARGO API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        service_layer: 'enabled',
        meta_model: 'enabled',
        partner_system: 'fully_implemented',
        menu_system: 'enabled',
        courier_system: 'enabled', // üÜï –î–û–ë–ê–í–õ–ï–ù–û
        timestamp: new Date().toISOString()
    });
});

// ================ –û–°–ù–û–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –†–û–£–¢–´ ================
// –í–ê–ñ–ù–û: –ü–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–æ–≤ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã middleware

// Customer routes (–ø–µ—Ä–≤—ã–µ - –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
router.use('/customers', customerRoutes);

// Partner routes (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞)
router.use('/partners', partnerRoutes);

// Partner menu routes (–ø–æ–¥—Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
router.use('/partners/menu', partnerMenuRoutes);

// Courier routes (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞) üÜï –î–û–ë–ê–í–õ–ï–ù–û
router.use('/couriers', courierRoutes);

// ================ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –†–û–£–¢–´ ================
// –ü–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω —Ä–æ—É—Ç—ã, –∑–∞—Ç–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ

// Admin routes (–æ—Å–Ω–æ–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞)
router.use('/admin', adminRoutes);

// Admin partner management routes (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏)
router.use('/admin/partners', adminPartnerRoutes);

// Admin courier management routes (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏) üÜï –î–û–ë–ê–í–õ–ï–ù–û  
router.use('/admin/couriers', adminCourierRoutes);

// ================ –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ================

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
router.get('/', (req, res) => {
    res.json({
        success: true,
        message: 'ESARGO API Server',
        version: '2.1.0', // –í–µ—Ä—Å–∏—è –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Å–∏–ª
        architecture: 'Service Layer + Meta Security Model + Menu Management + Courier System', // üÜï –û–ë–ù–û–í–õ–ï–ù–û
        available_endpoints: {
            customers: {
                register: 'POST /api/customers/register',
                login: 'POST /api/customers/login',
                verify: 'GET /api/customers/verify',
                profile: 'GET /api/customers/profile',
                update_profile: 'PUT /api/customers/profile/:id',
                delete_profile: 'DELETE /api/customers/profile/:id'
            },
            partners: {
                // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                register: 'POST /api/partners/register',
                login: 'POST /api/partners/login',
                verify: 'GET /api/partners/verify',
                dashboard: 'GET /api/partners/dashboard',
                legal_info: 'POST /api/partners/legal-info/:request_id',
                profile: 'GET /api/partners/profile',
                update_profile: 'PUT /api/partners/profile/:id',
                delete_partner: 'DELETE /api/partners/profile/:id',
                
                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
                menu_categories: {
                    list: 'GET /api/partners/menu/categories',
                    create: 'POST /api/partners/menu/categories',
                    update: 'PUT /api/partners/menu/categories/:category_id',
                    delete: 'DELETE /api/partners/menu/categories/:category_id'
                },
                menu_products: {
                    list: 'GET /api/partners/menu/products',
                    create: 'POST /api/partners/menu/products',
                    update: 'PUT /api/partners/menu/products/:product_id',
                    delete: 'DELETE /api/partners/menu/products/:product_id'
                },
                menu_stats: 'GET /api/partners/menu/stats'
            },
            admin: {
                login: 'POST /api/admin/login',
                verify: 'GET /api/admin/verify',
                profile: 'GET /api/admin/profile',
                create_admin: 'POST /api/admin/create',
                list_admins: 'GET /api/admin/list',
                edit_admin: 'PUT /api/admin/edit/:id',
                delete_admin: 'DELETE /api/admin/delete/:id'
            },
            admin_partners: {
                view_requests: 'GET /api/admin/partners/requests',
                view_request: 'GET /api/admin/partners/requests/:id',
                approve_request: 'POST /api/admin/partners/requests/:id/approve',
                reject_request: 'POST /api/admin/partners/requests/:id/reject',
                approve_legal: 'POST /api/admin/partners/legal/:id/approve',
                reject_legal: 'POST /api/admin/partners/legal/:id/reject',
                publish_partner: 'POST /api/admin/partners/profiles/:id/publish'
            }
            // üÜï –ö–£–†–¨–ï–†–°–ö–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´ –ù–ï –î–û–ë–ê–í–õ–ï–ù–´ –í –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Æ (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª)
        },
        security_features: {
            meta_model: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É email',
            encryption: '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
            role_based_access: '–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π',
            admin_permissions: '–ì—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
            partner_workflow: '–ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤',
            courier_workflow: '–°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤', // üÜï –î–û–ë–ê–í–õ–ï–ù–û
            french_validation: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (SIRET, IBAN, TVA)',
            menu_permissions: '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é'
        },
        workflow_stages: {
            stage_1: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ (—Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏)',
            stage_2: '–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º',
            stage_3: '–ü–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)',
            stage_4: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            stage_5: '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º (—á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã)',
            stage_6: '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–æ–º'
        },
        business_rules: {
            restaurants: {
                supports_options: true,
                supports_preparation_time: true,
                default_preparation_time: '15 minutes'
            },
            stores: {
                supports_options: false,
                supports_preparation_time: false,
                preparation_time: '0 minutes (ready)'
            }
        },
        data_compatibility: {
            old_new_models: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
            normalization: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π',
            fallback_values: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ fallback –∑–Ω–∞—á–µ–Ω–∏—è'
        },
        timestamp: new Date().toISOString()
    });
});

export default router;