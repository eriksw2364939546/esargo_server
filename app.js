// app.js (–ü–û–õ–ù–´–ô —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Å—Å–∏–π –∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π)
import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import mongoSanitize from 'express-mongo-sanitize';

// üÜï –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–π
import session from 'express-session';
import MongoStore from 'connect-mongo';

// üÜï –ò–ú–ü–û–†–¢ –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–û–ß–ò–°–¢–ö–ò
import cleanupService from './services/System/cleanup.service.js';

import config from './config/app.js';
import connectDB from './config/database.js';
import { requestLogger, startupLogger } from './middleware/logger.js';
import { errorHandler, notFound } from './middleware/errorHandler.js';
import routes from './routes/index.js';
import initOwnerAccount from './services/initOwner.service.js';

const app = express();

// üßπ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–í–¢–û–û–ß–ò–°–¢–ö–ò
connectDB().then(async () => {
  initOwnerAccount();
  
  // ‚úÖ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–û–ß–ò–°–¢–ö–ò
  try {
    console.log('üöÄ Initializing cleanup system...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    const healthCheck = await cleanupService.getSystemHealthCheck();
    console.log('üìä System health:', {
      expired_carts: healthCheck.expired_carts,
      expired_pending_orders: healthCheck.expired_pending_orders,
      needs_cleanup: healthCheck.needs_cleanup
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (healthCheck.needs_cleanup) {
      console.log('üßπ Running initial cleanup...');
      await cleanupService.cleanupExpiredData();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
    cleanupService.setupCleanupScheduler();
    
    console.log('‚úÖ Cleanup system active - running every 30 minutes');
    
  } catch (error) {
    console.error('üö® Cleanup system initialization failed:', error);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å
  }
});

// üÜï –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–°–°–ò–ô –î–õ–Ø –ö–û–†–ó–ò–ù–´
app.use(session({
  secret: process.env.SESSION_SECRET || 'esargo-session-secret-key-2024',
  name: 'esargo.session', // –ò–º—è cookie
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({
    mongoUrl: config.MONGODB_URI,
    collectionName: 'sessions',
    ttl: 24 * 60 * 60, // 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    touchAfter: 24 * 3600, // –û–±–Ω–æ–≤–ª—è—Ç—å —Å–µ—Å—Å–∏—é —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∞—Å—å
  }),
  cookie: {
    secure: config.isProduction(), // HTTPS —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    httpOnly: true, // –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
    maxAge: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    sameSite: 'lax' // CSRF –∑–∞—â–∏—Ç–∞
  },
  rolling: true // –û–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
}));

startupLogger('‚úÖ Express sessions configured with MongoStore for shopping cart');

// Trust proxy –¥–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞ load balancer
app.set('trust proxy', 1);

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - Helmet
if (config.HELMET_ENABLED) {
  app.use(
    helmet({
      crossOriginResourcePolicy: { policy: 'cross-origin' },
    })
  );
}

// Rate limiting
const limiter = rateLimit({
  windowMs: config.RATE_LIMIT_WINDOW,
  max: config.RATE_LIMIT_MAX,
  message: {
    success: false,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
    retry_after: Math.ceil(config.RATE_LIMIT_WINDOW / 1000 / 60) + ' –º–∏–Ω—É—Ç',
  },
  standardHeaders: true,
  legacyHeaders: false,
});
app.use('/api', limiter);

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(
  cors({
    origin: function (origin, callback) {
      if (!origin) return callback(null, true);

      if (config.CORS_ORIGIN.includes(origin)) {
        return callback(null, true);
      } else {
        return callback(
          new Error(`CORS policy: Origin ${origin} not allowed`)
        );
      }
    },
    credentials: true, // üÜï –í–ê–ñ–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º cookies –¥–ª—è —Å–µ—Å—Å–∏–π
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  })
);

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(compression());

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(
  express.json({
    limit: config.REQUEST_LIMIT,
    verify: (req, res, buf, encoding) => {
      req.rawBody = buf;
    },
  })
);

app.use(
  express.urlencoded({
    extended: true,
    limit: config.REQUEST_LIMIT,
  })
);

// –ó–∞—â–∏—Ç–∞ –æ—Ç NoSQL –∏–Ω—ä–µ–∫—Ü–∏–π
app.use(mongoSanitize());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(requestLogger);

// Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'ESARGO API Server —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    version: '2.1.0',
    environment: config.NODE_ENV,
    features: {
      // üÜï –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò
      order_system: 'enabled',
      shopping_cart: 'enabled', 
      public_catalog: 'enabled',
      payment_stub: 'enabled',
      sessions: 'enabled',
      auto_cleanup: 'enabled' // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
    },
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
  });
});

// üÜï MIDDLEWARE –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è session ID –≤ –ª–æ–≥–∏
app.use((req, res, next) => {
  if (req.sessionID) {
    req.sessionID = req.sessionID;
  }
  next();
});

// –û—Å–Ω–æ–≤–Ω—ã–µ API —Ä–æ—É—Ç—ã
app.use(config.API_PREFIX, routes);

// üîß –†–û–£–¢–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–í–¢–û–û–ß–ò–°–¢–ö–û–ô
app.get('/api/admin/system/health', async (req, res) => {
  try {
    const healthCheck = await cleanupService.getSystemHealthCheck();
    res.json({
      result: true,
      health: healthCheck,
      message: '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      result: false,
      message: error.message
    });
  }
});

app.post('/api/admin/system/cleanup/:type?', async (req, res) => {
  try {
    const { type = 'all' } = req.params;
    
    console.log(`üîß Manual cleanup requested: ${type}`);
    const result = await cleanupService.forceCleanupByType(type);
    
    res.json({
      result: true,
      message: `–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ '${type}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`,
      cleanup_result: result
    });
  } catch (error) {
    res.status(500).json({
      result: false,
      message: error.message
    });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ –∑–∞–∫–∞–∑–æ–≤
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'ESARGO API Server - UberEats Style Food Delivery Platform',
    version: '2.1.0',
    environment: config.NODE_ENV,
    architecture: 'Service Layer + Meta Security Model + Full Order Management System + Auto Cleanup',
    
    // üÜï –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï –ó–ê–ö–ê–ó–û–í
    order_system: {
      status: 'fully_operational',
      features: [
        'Public restaurant catalog browsing',
        'Shopping cart with server-side sessions',
        'Multi-role order management',
        'Real-time order tracking',
        'Payment processing (stub)',
        'Rating and review system',
        'Delivery tracking',
        'Automatic cleanup of expired data' // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
      ]
    },
    
    // üßπ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–í–¢–û–û–ß–ò–°–¢–ö–ï
    cleanup_system: {
      status: 'active',
      schedule: 'every 30 minutes',
      deep_cleanup: 'daily at 3:00 AM',
      targets: [
        'Expired shopping carts (>24h)',
        'Pending orders (>30min)',
        'Old reservation history (>30 days)'
      ]
    },
    
    endpoints: {
      health: '/health',
      api_base: config.API_PREFIX,
      
      // –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
      public_catalog: config.API_PREFIX + '/public/catalog',
      restaurant_menu: config.API_PREFIX + '/public/restaurants/:id/menu',
      
      // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
      customers: config.API_PREFIX + '/customers',
      shopping_cart: config.API_PREFIX + '/cart',
      orders: config.API_PREFIX + '/orders',
      
      // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
      partners: config.API_PREFIX + '/partners',
      partner_orders: config.API_PREFIX + '/orders/partner',
      
      // –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã  
      couriers: config.API_PREFIX + '/couriers',
      courier_orders: config.API_PREFIX + '/orders/courier',
      
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
      admin: config.API_PREFIX + '/admin',
      
      // üßπ –≠–ù–î–ü–û–ò–ù–¢–´ –ê–í–¢–û–û–ß–ò–°–¢–ö–ò
      system_health: '/api/admin/system/health',
      manual_cleanup: '/api/admin/system/cleanup/:type'
    },
    
    // üÜï WORKFLOW –ó–ê–ö–ê–ó–ê
    order_workflow: {
      step_1: 'Browse restaurants (/public/catalog)',
      step_2: 'Register/login (/customers/register)',
      step_3: 'Add items to cart (/cart/items)',
      step_4: 'Calculate delivery (/cart/calculate-delivery)',
      step_5: 'Create order (/orders)',
      step_6: 'Restaurant accepts (/orders/:id/accept)',
      step_7: 'Restaurant marks ready (/orders/:id/ready)',
      step_8: 'Courier takes order (/orders/:id/take)',
      step_9: 'Courier picks up (/orders/:id/pickup)',
      step_10: 'Courier delivers (/orders/:id/deliver)',
      step_11: 'Customer rates (/orders/:id/rate)'
    },
    
    session_info: {
      store: 'MongoStore',
      ttl: '24 hours',
      secure: config.isProduction(),
      purpose: 'Shopping cart persistence'
    },
    
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
app.use(notFound);
app.use(errorHandler);

// üõë GRACEFUL SHUTDOWN - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGTERM', async () => {
  console.log('üõë SIGTERM received, shutting down gracefully...');
  cleanupService.stopCleanupScheduler();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë SIGINT received, shutting down gracefully...');
  cleanupService.stopCleanupScheduler();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = config.PORT || 3000;

app.listen(PORT, () => {
  startupLogger(`üöÄ ESARGO API Server running on port ${PORT}`);
  startupLogger(`üì± Environment: ${config.NODE_ENV}`);
  startupLogger(`üîó API Base: ${config.API_PREFIX}`);
  startupLogger(`üõí Shopping cart sessions: enabled`);
  startupLogger(`üì¶ Order management system: fully operational`);
  startupLogger(`üßπ Auto-cleanup system: active (every 30 min)`);
  
  if (config.NODE_ENV === 'development') {
    startupLogger(`üìñ API Documentation: http://localhost:${PORT}`);
    startupLogger(`üè™ Public catalog: http://localhost:${PORT}${config.API_PREFIX}/public/catalog`);
    startupLogger(`üõí Cart API: http://localhost:${PORT}${config.API_PREFIX}/cart`);
    startupLogger(`üì¶ Orders API: http://localhost:${PORT}${config.API_PREFIX}/orders`);
    startupLogger(`üßπ System health: http://localhost:${PORT}/api/admin/system/health`);
    startupLogger(`üîß Manual cleanup: POST http://localhost:${PORT}/api/admin/system/cleanup/all`);
  }
});

export default app;