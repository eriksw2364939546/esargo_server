// models/Category.model.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ (–¢–û–õ–¨–ö–û –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò) üè™
import mongoose from 'mongoose';

const categorySchema = new mongoose.Schema({
  // ‚úÖ –¢–û–õ–¨–ö–û 2 –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò
  name: {
    type: String,
    required: true,
    trim: true,
    unique: true,
    enum: ['–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–ú–∞–≥–∞–∑–∏–Ω—ã'] // –¢–û–õ–¨–ö–û 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!
  },
  slug: {
    type: String,
    required: true,
    unique: true,
    enum: ['restaurant', 'store'], // URL-friendly –≤–µ—Ä—Å–∏–∏
    index: true
  },
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å)
  display_info: {
    title_ru: {
      type: String,
      required: true,
      trim: true
    },
    title_fr: {
      type: String,
      required: true,
      trim: true
    },
    title_en: {
      type: String,
      trim: true
    },
    description_ru: {
      type: String,
      trim: true,
      maxlength: 200
    },
    description_fr: {
      type: String,
      trim: true,
      maxlength: 200
    },
    description_en: {
      type: String,
      trim: true,
      maxlength: 200
    }
  },
  
  // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  visual_assets: {
    icon_url: {
      type: String // URL –∏–∫–æ–Ω–∫–∏ –¥–ª—è –º–µ–Ω—é
    },
    icon_svg: {
      type: String // SVG –∫–æ–¥ –∏–∫–æ–Ω–∫–∏
    },
    banner_image_url: {
      type: String // –ë–∞–Ω–Ω–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    },
    thumbnail_url: {
      type: String // –ü—Ä–µ–≤—å—é –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    },
    color_scheme: {
      primary_color: {
        type: String,
        default: '#FF6B6B' // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      },
      secondary_color: {
        type: String,
        default: '#4ECDC4' // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç
      },
      background_color: {
        type: String,
        default: '#F8F9FA' // –¶–≤–µ—Ç —Ñ–æ–Ω–∞
      }
    }
  },
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  is_active: {
    type: Boolean,
    default: true,
    index: true
  },
  
  // –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é
  sort_order: {
    type: Number,
    required: true,
    default: 0,
    index: true
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SEO
  seo_settings: {
    meta_title: {
      type: String,
      trim: true,
      maxlength: 60
    },
    meta_description: {
      type: String,
      trim: true,
      maxlength: 160
    },
    meta_keywords: [{
      type: String,
      trim: true
    }],
    canonical_url: {
      type: String,
      trim: true
    }
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  stats: {
    total_partners: {
      type: Number,
      default: 0
    },
    active_partners: {
      type: Number,
      default: 0
    },
    total_products: {
      type: Number,
      default: 0
    },
    total_orders: {
      type: Number,
      default: 0
    },
    total_revenue: {
      type: Number,
      default: 0
    },
    avg_rating: {
      type: Number,
      default: 0,
      min: 0,
      max: 5
    },
    last_stats_update: {
      type: Date
    }
  },
  
  // –ë–∏–∑–Ω–µ—Å-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  business_settings: {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_settings: {
      default_preparation_time: {
        type: Number,
        default: function() {
          return this.slug === 'restaurant' ? 30 : 15; // –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –¥–æ–ª—å—à–µ –≥–æ—Ç–æ–≤—è—Ç
        }
      },
      max_delivery_distance: {
        type: Number,
        default: 10 // –∫–º
      },
      delivery_fee_base: {
        type: Number,
        default: 2.99 // –µ–≤—Ä–æ
      }
    },
    
    // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_working_hours: {
      monday: { 
        open: { type: String, default: '09:00' }, 
        close: { type: String, default: '22:00' }, 
        is_open: { type: Boolean, default: true } 
      },
      tuesday: { 
        open: { type: String, default: '09:00' }, 
        close: { type: String, default: '22:00' }, 
        is_open: { type: Boolean, default: true } 
      },
      wednesday: { 
        open: { type: String, default: '09:00' }, 
        close: { type: String, default: '22:00' }, 
        is_open: { type: Boolean, default: true } 
      },
      thursday: { 
        open: { type: String, default: '09:00' }, 
        close: { type: String, default: '22:00' }, 
        is_open: { type: Boolean, default: true } 
      },
      friday: { 
        open: { type: String, default: '09:00' }, 
        close: { type: String, default: '23:00' }, 
        is_open: { type: Boolean, default: true } 
      },
      saturday: { 
        open: { type: String, default: '09:00' }, 
        close: { type: String, default: '23:00' }, 
        is_open: { type: Boolean, default: true } 
      },
      sunday: { 
        open: { type: String, default: '10:00' }, 
        close: { type: String, default: '22:00' }, 
        is_open: { type: Boolean, default: true } 
      }
    }
  },
  
  // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  category_features: {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–∫–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º
    supports_options: {
      type: Boolean,
      default: function() {
        return this.slug === 'restaurant'; // –¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
      }
    },
    
    // –¢—Ä–µ–±—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
    requires_pre_order: {
      type: Boolean,
      default: false
    },
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    supports_age_restriction: {
      type: Boolean,
      default: function() {
        return this.slug === 'store'; // –î–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–∞–ª–∫–æ–≥–æ–ª—å)
      }
    },
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Å–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    supports_loyalty: {
      type: Boolean,
      default: true
    },
    
    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    show_preparation_time: {
      type: Boolean,
      default: function() {
        return this.slug === 'restaurant';
      }
    }
  },
  
  // ‚ùå –£–î–ê–õ–ï–ù–û: popular_subcategories 
  // –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞–∂–¥—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ —Å–≤–æ–µ–º menu_categories!
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  last_updated_by: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'AdminUser'
  },
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  metadata: {
    created_by: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'AdminUser'
    },
    version: {
      type: Number,
      default: 1
    },
    notes: {
      type: String,
      trim: true,
      maxlength: 500
    }
  }
}, {
  timestamps: true
});

// ================ –ò–ù–î–ï–ö–°–´ ================
categorySchema.index({ slug: 1 });
categorySchema.index({ is_active: 1, sort_order: 1 });
categorySchema.index({ name: 1 });
categorySchema.index({ 'stats.total_partners': -1 });
categorySchema.index({ 'stats.total_orders': -1 });

// ================ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø ================

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
categorySchema.virtual('partners', {
  ref: 'PartnerProfile',
  localField: 'slug',
  foreignField: 'category',
  options: { sort: { 'ratings.avg_rating': -1 } }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
categorySchema.virtual('products', {
  ref: 'Product',
  localField: 'slug',
  foreignField: 'category'
});

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================

/**
 * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
categorySchema.methods.updateStats = async function() {
  const PartnerProfile = mongoose.model('PartnerProfile');
  const Product = mongoose.model('Product');
  const Order = mongoose.model('Order');
  
  try {
    // –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    const totalPartners = await PartnerProfile.countDocuments({ category: this.slug });
    const activePartners = await PartnerProfile.countDocuments({ 
      category: this.slug, 
      is_active: true,
      is_approved: true 
    });
    
    // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const totalProducts = await Product.countDocuments({ category: this.slug });
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
    const partnerIds = await PartnerProfile.find({ category: this.slug }).distinct('_id');
    
    // –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã—Ä—É—á–∫–∏
    const orderStats = await Order.aggregate([
      {
        $match: {
          partner_id: { $in: partnerIds },
          status: 'delivered'
        }
      },
      {
        $group: {
          _id: null,
          total_orders: { $sum: 1 },
          total_revenue: { $sum: '$total_price' }
        }
      }
    ]);
    
    // –ü–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    const ratingStats = await PartnerProfile.aggregate([
      {
        $match: {
          category: this.slug,
          is_active: true,
          'ratings.total_ratings': { $gt: 0 }
        }
      },
      {
        $group: {
          _id: null,
          avg_rating: { $avg: '$ratings.avg_rating' }
        }
      }
    ]);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.total_partners = totalPartners;
    this.stats.active_partners = activePartners;
    this.stats.total_products = totalProducts;
    this.stats.total_orders = orderStats[0]?.total_orders || 0;
    this.stats.total_revenue = orderStats[0]?.total_revenue || 0;
    this.stats.avg_rating = ratingStats[0]?.avg_rating || 0;
    this.stats.last_stats_update = new Date();
    
    return this.save();
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${this.slug}:`, error);
    throw error;
  }
};

/**
 * üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
categorySchema.methods.updateBusinessSettings = function(newSettings) {
  Object.assign(this.business_settings, newSettings);
  this.markModified('business_settings');
  return this.save();
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================

/**
 * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
categorySchema.statics.findActive = function() {
  return this.find({ is_active: true }).sort({ sort_order: 1 });
};

/**
 * üîç –ü–æ–∏—Å–∫ –ø–æ slug
 */
categorySchema.statics.findBySlug = function(slug) {
  return this.findOne({ slug, is_active: true });
};

/**
 * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
categorySchema.statics.getAllStats = function() {
  return this.find({ is_active: true }, {
    name: 1,
    slug: 1,
    stats: 1,
    'visual_assets.color_scheme': 1
  }).sort({ sort_order: 1 });
};

/**
 * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
categorySchema.statics.initializeDefaults = async function() {
  const existingCategories = await this.countDocuments();
  if (existingCategories > 0) {
    return; // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã
  }
  
  const defaultCategories = [
    {
      name: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
      slug: 'restaurant',
      display_info: {
        title_ru: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
        title_fr: 'Restaurants',
        title_en: 'Restaurants',
        description_ru: '–ó–∞–∫–∞–∂–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –µ–¥—É –∏–∑ –ª—É—á—à–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤',
        description_fr: 'Commandez des plats pr√©par√©s dans les meilleurs restaurants',
        description_en: 'Order prepared food from the best restaurants'
      },
      sort_order: 1,
      visual_assets: {
        color_scheme: {
          primary_color: '#FF6B6B',
          secondary_color: '#4ECDC4',
          background_color: '#FFF5F5'
        }
      },
      business_settings: {
        delivery_settings: {
          default_preparation_time: 30 // –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≥–æ—Ç–æ–≤—è—Ç –¥–æ–ª—å—à–µ
        }
      },
      category_features: {
        supports_options: true, // –î–æ–±–∞–≤–∫–∏ –∫ –±–ª—é–¥–∞–º
        show_preparation_time: true
      }
    },
    {
      name: '–ú–∞–≥–∞–∑–∏–Ω—ã',
      slug: 'store',
      display_info: {
        title_ru: '–ú–∞–≥–∞–∑–∏–Ω—ã',
        title_fr: 'Magasins',
        title_en: 'Stores',
        description_ru: '–ü—Ä–æ–¥—É–∫—Ç—ã –∏ —Ç–æ–≤–∞—Ä—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–∞ –¥–æ–º',
        description_fr: 'Produits et marchandises avec livraison √† domicile',
        description_en: 'Products and goods with home delivery'
      },
      sort_order: 2,
      visual_assets: {
        color_scheme: {
          primary_color: '#4ECDC4',
          secondary_color: '#45B7B8',
          background_color: '#F0FFFF'
        }
      },
      business_settings: {
        delivery_settings: {
          default_preparation_time: 15 // –ú–∞–≥–∞–∑–∏–Ω—ã –±—ã—Å—Ç—Ä–µ–µ
        }
      },
      category_features: {
        supports_options: false, // –¢–æ–≤–∞—Ä—ã –±–µ–∑ –¥–æ–±–∞–≤–æ–∫
        supports_age_restriction: true, // –î–ª—è –∞–ª–∫–æ–≥–æ–ª—è
        show_preparation_time: false
      }
    }
  ];
  
  return this.insertMany(defaultCategories);
};

/**
 * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ (–¥–ª—è cron –∑–∞–¥–∞—á)
 */
categorySchema.statics.updateAllStats = async function() {
  const categories = await this.find({ is_active: true });
  const results = [];
  
  for (const category of categories) {
    try {
      await category.updateStats();
      results.push({ 
        success: true, 
        categoryId: category._id, 
        slug: category.slug 
      });
    } catch (error) {
      results.push({ 
        success: false, 
        categoryId: category._id, 
        slug: category.slug, 
        error: error.message 
      });
    }
  }
  
  return results;
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ JSON
categorySchema.set('toJSON', { virtuals: true });
categorySchema.set('toObject', { virtuals: true });

const Category = mongoose.model('Category', categorySchema);
export default Category;