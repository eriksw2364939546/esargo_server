// models/Order.model.js - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–æ–¥–µ–ª—å –∑–∞–∫–∞–∑–æ–≤
import mongoose from 'mongoose';

const orderSchema = new mongoose.Schema({
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
  order_number: {
    type: String,
    required: true,
    unique: true,
    index: true
  },
  
  // –°—Å—ã–ª–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–∫–∞–∑–∞
  customer_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  partner_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'PartnerProfile',
    required: true,
    index: true
  },
  courier_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'CourierProfile',
    index: true
  },
  
  // –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
  items: [{
    product_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Product',
      required: true
    },
    title: {
      type: String,
      required: true,
      trim: true
    },
    price: {
      type: Number,
      required: true,
      min: 0
    },
    quantity: {
      type: Number,
      required: true,
      min: 1
    },
    // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ (–¥–æ–±–∞–≤–∫–∏, —Ä–∞–∑–º–µ—Ä –∏ —Ç.–¥.)
    selected_options: [{
      group_name: {
        type: String,
        required: true
      },
      option_name: {
        type: String,
        required: true
      },
      option_price: {
        type: Number,
        required: true,
        min: 0
      }
    }],
    item_total: {
      type: Number,
      required: true,
      min: 0
    },
    special_requests: {
      type: String,
      trim: true,
      maxlength: 200
    }
  }],
  
  // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
  subtotal: {
    type: Number,
    required: true,
    min: 0
  },
  delivery_fee: {
    type: Number,
    required: true,
    min: 0,
    default: 0
  },
  service_fee: {
    type: Number,
    required: true,
    min: 0,
    default: 0
  },
  discount_amount: {
    type: Number,
    min: 0,
    default: 0
  },
  tax_amount: {
    type: Number,
    min: 0,
    default: 0
  },
  total_price: {
    type: Number,
    required: true,
    min: 0
  },
  
  // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
  delivery_address: {
    address: {
      type: String,
      required: true,
      trim: true
    },
    lat: {
      type: Number,
      required: true
    },
    lng: {
      type: Number,
      required: true
    },
    apartment: {
      type: String,
      trim: true
    },
    entrance: {
      type: String,
      trim: true
    },
    intercom: {
      type: String,
      trim: true
    },
    delivery_notes: {
      type: String,
      trim: true,
      maxlength: 300
    }
  },
  
  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  customer_contact: {
    name: {
      type: String,
      required: true,
      trim: true
    },
    phone: {
      type: String,
      required: true,
      trim: true
    },
    email: {
      type: String,
      trim: true
    }
  },
  
  // –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞
  status: {
    type: String,
    required: true,
    enum: [
      'pending',      // –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      'accepted',     // –ü–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑
      'preparing',    // –ü–∞—Ä—Ç–Ω–µ—Ä –≥–æ—Ç–æ–≤–∏—Ç –∑–∞–∫–∞–∑
      'ready',        // –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, –∏—â–µ–º –∫—É—Ä—å–µ—Ä–∞
      'picked_up',    // –ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑
      'on_the_way',   // –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
      'delivered',    // –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      'cancelled'     // –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
    ],
    default: 'pending',
    index: true
  },
  
  // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
  status_history: [{
    status: {
      type: String,
      required: true,
      enum: [
        'pending', 'accepted', 'preparing', 'ready', 
        'picked_up', 'on_the_way', 'delivered', 'cancelled'
      ]
    },
    timestamp: {
      type: Date,
      required: true,
      default: Date.now
    },
    updated_by: {
      type: mongoose.Schema.Types.ObjectId,
      required: true
    },
    user_role: {
      type: String,
      required: true,
      enum: ['customer', 'partner', 'courier', 'admin']
    },
    notes: {
      type: String,
      trim: true,
      maxlength: 500
    }
  }],
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  estimated_delivery_time: {
    type: Date,
    required: true,
    index: true
  },
  actual_delivery_time: {
    type: Number, // –≤ –º–∏–Ω—É—Ç–∞—Ö
    min: 0
  },
  
  // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
  accepted_at: Date,
  ready_at: Date,
  picked_up_at: Date,
  delivered_at: Date,
  cancelled_at: Date,
  
  // –ü–ª–∞—Ç–µ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  payment_method: {
    type: String,
    required: true,
    enum: ['card', 'cash', 'apple_pay', 'google_pay'],
    default: 'card'
  },
  payment_status: {
    type: String,
    required: true,
    enum: ['pending', 'processing', 'completed', 'failed', 'refunded'],
    default: 'pending',
    index: true
  },
  payment_details: {
    transaction_id: String,
    payment_gateway: String,
    gateway_response: String,
    processed_at: Date,
    fee_amount: Number
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤
  refund_info: {
    refunded_at: Date,
    refund_amount: Number,
    refund_transaction_id: String,
    refund_reason: String,
    status: {
      type: String,
      enum: ['pending', 'completed', 'failed']
    }
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ
  cancellation_info: {
    reason: {
      type: String,
      enum: [
        'customer_request',
        'partner_unavailable',
        'courier_unavailable',
        'payment_failed',
        'restaurant_closed',
        'address_unreachable',
        'admin_action',
        'other'
      ]
    },
    cancelled_by: {
      type: mongoose.Schema.Types.ObjectId
    },
    cancelled_by_role: {
      type: String,
      enum: ['customer', 'partner', 'courier', 'admin']
    },
    details: {
      type: String,
      trim: true,
      maxlength: 500
    }
  },
  
  // –û—Å–æ–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  special_requests: {
    type: String,
    trim: true,
    maxlength: 500
  },
  
  // –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
  ratings: {
    partner_rating: {
      type: Number,
      min: 1,
      max: 5
    },
    courier_rating: {
      type: Number,
      min: 1,
      max: 5
    },
    comment: {
      type: String,
      trim: true,
      maxlength: 500
    },
    rated_at: {
      type: Date
    }
  },
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  source: {
    type: String,
    enum: ['web', 'mobile_app'],
    default: 'web'
  },
  user_agent: {
    type: String
  },
  ip_address: {
    type: String
  }
}, {
  timestamps: true
});

// ================ –ò–ù–î–ï–ö–°–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ================
orderSchema.index({ order_number: 1 });
orderSchema.index({ customer_id: 1, createdAt: -1 });
orderSchema.index({ partner_id: 1, status: 1 });
orderSchema.index({ courier_id: 1, status: 1 });
orderSchema.index({ status: 1, createdAt: -1 });
orderSchema.index({ payment_status: 1 });
orderSchema.index({ createdAt: -1 });
orderSchema.index({ estimated_delivery_time: 1 });

// –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤
orderSchema.index({ 
  status: 1, 
  courier_id: 1,
  createdAt: -1 
});

// –ì–µ–æ–∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
orderSchema.index({ 'delivery_address.lat': 1, 'delivery_address.lng': 1 });

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================

/**
 * üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
 */
orderSchema.methods.addStatusHistory = function(newStatus, updatedBy, userRole, notes = '') {
  this.status_history.push({
    status: newStatus,
    timestamp: new Date(),
    updated_by: updatedBy,
    user_role: userRole,
    notes: notes
  });
  
  this.status = newStatus;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  const now = new Date();
  switch(newStatus) {
    case 'accepted':
      this.accepted_at = now;
      break;
    case 'ready':
      this.ready_at = now;
      break;
    case 'picked_up':
      this.picked_up_at = now;
      break;
    case 'delivered':
      this.delivered_at = now;
      this.calculateActualDeliveryTime();
      break;
    case 'cancelled':
      this.cancelled_at = now;
      break;
  }
  
  return this.save();
};

/**
 * ‚è±Ô∏è –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
 */
orderSchema.methods.calculateActualDeliveryTime = function() {
  if (this.delivered_at && this.createdAt) {
    this.actual_delivery_time = Math.round(
      (this.delivered_at - this.createdAt) / (1000 * 60) // –≤ –º–∏–Ω—É—Ç–∞—Ö
    );
  }
};

/**
 * ‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
 */
orderSchema.methods.cancelOrder = function(reason, cancelledBy, cancelledByRole, details = '') {
  this.status = 'cancelled';
  this.cancelled_at = new Date();
  this.cancellation_info = {
    reason,
    cancelled_by: cancelledBy,
    cancelled_by_role: cancelledByRole,
    details
  };
  
  this.addStatusHistory('cancelled', cancelledBy, cancelledByRole, details);
  
  return this.save();
};

/**
 * üö¥ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞
 */
orderSchema.methods.assignCourier = function(courierId) {
  this.courier_id = courierId;
  return this.save();
};

/**
 * ‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
orderSchema.methods.ratePartner = function(rating) {
  if (this.status !== 'delivered') {
    throw new Error('–ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
  }
  
  this.ratings.partner_rating = rating;
  this.ratings.rated_at = new Date();
  
  return this.save();
};

/**
 * ‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫—É—Ä—å–µ—Ä–∞
 */
orderSchema.methods.rateCourier = function(rating) {
  if (this.status !== 'delivered') {
    throw new Error('–ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
  }
  
  this.ratings.courier_rating = rating;
  this.ratings.rated_at = new Date();
  
  return this.save();
};

/**
 * üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
 */
orderSchema.methods.canBeCancelled = function() {
  return ['pending', 'accepted', 'preparing'].includes(this.status);
};

/**
 * ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
 */
orderSchema.methods.isOverdue = function() {
  if (!this.estimated_delivery_time || this.status === 'delivered' || this.status === 'cancelled') {
    return false;
  }
  return new Date() > this.estimated_delivery_time;
};

/**
 * ‚è≥ –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏
 */
orderSchema.methods.getTimeToDelivery = function() {
  if (!this.estimated_delivery_time || this.status === 'delivered' || this.status === 'cancelled') {
    return null;
  }
  
  const timeLeft = this.estimated_delivery_time - new Date();
  return Math.max(0, Math.round(timeLeft / (1000 * 60))); // –≤ –º–∏–Ω—É—Ç–∞—Ö
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================

/**
 * üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û
 */
orderSchema.statics.generateOrderNumber = async function() {
  const today = new Date();
  const year = today.getFullYear().toString().slice(-2);
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const day = String(today.getDate()).padStart(2, '0');
  
  const prefix = `${year}${month}${day}`;
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const lastOrder = await this.findOne({
    order_number: new RegExp(`^${prefix}`)
  }).sort({ order_number: -1 });
  
  let sequence = 1;
  if (lastOrder) {
    const lastSequence = parseInt(lastOrder.order_number.slice(-4));
    sequence = lastSequence + 1;
  }
  
  return `${prefix}${String(sequence).padStart(4, '0')}`;
};

/**
 * üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
 */
orderSchema.statics.findByCustomer = function(customerId, status = null) {
  const filter = { customer_id: customerId };
  if (status) {
    filter.status = status;
  }
  return this.find(filter).sort({ createdAt: -1 });
};

/**
 * üè™ –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
orderSchema.statics.findByPartner = function(partnerId, status = null) {
  const filter = { partner_id: partnerId };
  if (status) {
    filter.status = status;
  }
  return this.find(filter).sort({ createdAt: -1 });
};

/**
 * üö¥ –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞
 */
orderSchema.statics.findByCourier = function(courierId, status = null) {
  const filter = { courier_id: courierId };
  if (status) {
    filter.status = status;
  }
  return this.find(filter).sort({ createdAt: -1 });
};

/**
 * üìç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
 */
orderSchema.statics.findAvailableOrders = function(lat, lng, radiusKm = 10) {
  const radiusInDegrees = radiusKm / 111; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–º –≤ –≥—Ä–∞–¥—É—Å—ã
  
  return this.find({
    status: 'ready',
    courier_id: null,
    'delivery_address.lat': {
      $gte: lat - radiusInDegrees,
      $lte: lat + radiusInDegrees
    },
    'delivery_address.lng': {
      $gte: lng - radiusInDegrees,
      $lte: lng + radiusInDegrees
    }
  }).sort({ createdAt: 1 }); // –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã
};

/**
 * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
orderSchema.statics.getStatsForPeriod = function(startDate, endDate, partnerId = null) {
  const matchFilter = {
    createdAt: { $gte: startDate, $lte: endDate }
  };
  
  if (partnerId) {
    matchFilter.partner_id = partnerId;
  }
  
  return this.aggregate([
    { $match: matchFilter },
    {
      $group: {
        _id: null,
        total_orders: { $sum: 1 },
        total_revenue: { $sum: '$total_price' },
        delivered_orders: {
          $sum: { $cond: [{ $eq: ['$status', 'delivered'] }, 1, 0] }
        },
        cancelled_orders: {
          $sum: { $cond: [{ $eq: ['$status', 'cancelled'] }, 1, 0] }
        },
        avg_order_value: { $avg: '$total_price' },
        avg_delivery_time: { $avg: '$actual_delivery_time' }
      }
    }
  ]);
};

/**
 * üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
 */
orderSchema.statics.findByOrderNumber = function(orderNumber) {
  return this.findOne({ order_number: orderNumber });
};

/**
 * üìà –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
 */
orderSchema.statics.getPopularItems = function(partnerId = null, limit = 10) {
  const matchFilter = { status: 'delivered' };
  if (partnerId) {
    matchFilter.partner_id = partnerId;
  }
  
  return this.aggregate([
    { $match: matchFilter },
    { $unwind: '$items' },
    {
      $group: {
        _id: '$items.product_id',
        title: { $first: '$items.title' },
        total_ordered: { $sum: '$items.quantity' },
        total_revenue: { $sum: '$items.item_total' },
        avg_price: { $avg: '$items.price' }
      }
    },
    { $sort: { total_ordered: -1 } },
    { $limit: limit }
  ]);
};

/**
 * üïê –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
 */
orderSchema.statics.findByTimeRange = function(startTime, endTime, status = null) {
  const filter = {
    createdAt: { $gte: startTime, $lte: endTime }
  };
  
  if (status) {
    filter.status = status;
  }
  
  return this.find(filter).sort({ createdAt: -1 });
};

/**
 * üí∞ –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
orderSchema.statics.calculateRevenue = function(startDate, endDate, partnerId = null) {
  const matchFilter = {
    createdAt: { $gte: startDate, $lte: endDate },
    status: 'delivered'
  };
  
  if (partnerId) {
    matchFilter.partner_id = partnerId;
  }
  
  return this.aggregate([
    { $match: matchFilter },
    {
      $group: {
        _id: null,
        total_revenue: { $sum: '$total_price' },
        total_orders: { $sum: 1 },
        avg_order_value: { $avg: '$total_price' },
        total_delivery_fees: { $sum: '$delivery_fee' },
        total_service_fees: { $sum: '$service_fee' }
      }
    }
  ]);
};

// ================ MIDDLEWARE ================

// Pre-save middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
orderSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ delivered
  if (this.isModified('status') && this.status === 'delivered') {
    this.calculateActualDeliveryTime();
  }
  next();
});

// ================ –ù–ê–°–¢–†–û–ô–ö–ò –í–ò–†–¢–£–ê–õ–¨–ù–´–• –ü–û–õ–ï–ô ================
orderSchema.set('toJSON', { virtuals: true });
orderSchema.set('toObject', { virtuals: true });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
orderSchema.virtual('total_items').get(function() {
  return this.items.reduce((sum, item) => sum + item.quantity, 0);
});

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
orderSchema.virtual('delivery_status').get(function() {
  const statusMap = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    'accepted': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
    'picked_up': '–ó–∞–±—Ä–∞–Ω –∫—É—Ä—å–µ—Ä–æ–º',
    'on_the_way': '–í –ø—É—Ç–∏',
    'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
  };
  
  return statusMap[this.status] || this.status;
});

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
orderSchema.virtual('progress_percentage').get(function() {
  const progressMap = {
    'pending': 10,
    'accepted': 25,
    'preparing': 40,
    'ready': 60,
    'picked_up': 80,
    'on_the_way': 90,
    'delivered': 100,
    'cancelled': 0
  };
  
  return progressMap[this.status] || 0;
});

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
orderSchema.virtual('is_active').get(function() {
  return !['delivered', 'cancelled'].includes(this.status);
});

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
orderSchema.virtual('next_step').get(function() {
  const nextStepMap = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    'accepted': '–†–µ—Å—Ç–æ—Ä–∞–Ω –≥–æ—Ç–æ–≤–∏—Ç –∑–∞–∫–∞–∑',
    'preparing': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞',
    'picked_up': '–ö—É—Ä—å–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º',
    'on_the_way': '–ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏',
    'delivered': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': null
  };
  
  return nextStepMap[this.status];
});

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
export default mongoose.model('Order', orderSchema);