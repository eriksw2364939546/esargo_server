// models/User.model.js (–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ú EMAIL)
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const userSchema = new mongoose.Schema({
  // üîê EMAIL –ó–ê–®–ò–§–†–û–í–ê–ù –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  email: {
    type: String, // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ô EMAIL
    required: true,
    // üîê –£–ë–ò–†–ê–ï–ú unique –∏ index - –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Meta!
    // unique: true,
    // index: true
  },
  
  password_hash: {
    type: String,
    required: true
  },
  
  // –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  role: {
    type: String,
    enum: ['customer', 'partner', 'courier', 'admin', 'manager', 'owner'],
    default: 'customer',
    index: true
  },
  
  // –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
  is_active: {
    type: Boolean,
    default: true,
    index: true
  },
  
  is_email_verified: {
    type: Boolean,
    default: false
  },
  
  // GDPR —Å–æ–≥–ª–∞—Å–∏–µ
  gdpr_consent: {
    data_processing: {
      type: Boolean,
      default: false
    },
    marketing: {
      type: Boolean,
      default: false
    },
    analytics: {
      type: Boolean,
      default: false
    },
    consent_date: {
      type: Date,
      default: Date.now
    }
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  registration_source: {
    type: String,
    enum: ['web', 'mobile', 'admin'],
    default: 'web'
  },
  
  registration_ip: {
    type: String
  },
  
  user_agent: {
    type: String
  },
  
  // –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
  login_attempts: {
    count: {
      type: Number,
      default: 0
    },
    last_attempt: {
      type: Date
    },
    blocked_until: {
      type: Date
    }
  },
  
  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  last_login_at: {
    type: Date
  },
  
  last_activity_at: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// üîê –ò–ù–î–ï–ö–°–´ –ë–ï–ó EMAIL - –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Meta
userSchema.index({ role: 1, is_active: 1 });
userSchema.index({ last_activity_at: -1 });

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================

// –ú–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
userSchema.methods.comparePassword = async function(candidatePassword) {
  try {
    const { comparePassword } = await import('../utils/hash.js');
    return await comparePassword(candidatePassword, this.password_hash);
  } catch (error) {
    console.error('Password comparison error in User model:', error);
    return false;
  }
};

// üîê –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ê–°–®–ò–§–†–û–í–ê–ù–ù–û–ì–û EMAIL
userSchema.methods.getDecryptedEmail = function() {
  try {
    const { decryptString } = require('../utils/crypto.js');
    return decryptString(this.email);
  } catch (error) {
    console.error('Email decryption error:', error);
    return '[EMAIL_DECRYPT_ERROR]';
  }
};

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
userSchema.methods.incrementLoginAttempts = function() {
  this.login_attempts.count += 1;
  this.login_attempts.last_attempt = new Date();
  
  if (this.login_attempts.count >= 5) {
    this.login_attempts.blocked_until = new Date(Date.now() + 15 * 60 * 1000);
  }
  
  return this.save();
};

// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
userSchema.methods.resetLoginAttempts = function() {
  this.login_attempts.count = 0;
  this.login_attempts.last_attempt = undefined;
  this.login_attempts.blocked_until = undefined;
  this.last_login_at = new Date();
  this.last_activity_at = new Date();
  
  return this.save();
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
userSchema.methods.isAccountLocked = function() {
  return this.login_attempts.blocked_until && 
         this.login_attempts.blocked_until > new Date();
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
userSchema.methods.hasRole = function(role) {
  if (Array.isArray(role)) {
    return role.includes(this.role);
  }
  return this.role === role;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–æ–ª–µ–π
userSchema.methods.isAdmin = function() {
  return this.hasRole(['admin', 'manager', 'owner']);
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================

// üîê –£–ë–ò–†–ê–ï–ú –ü–û–ò–°–ö –ü–û EMAIL - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Meta!
// userSchema.statics.findByEmail = function(email) {
//   // –ü–û–ò–°–ö –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó Meta.findByEmailAndRole()
//   throw new Error('Use Meta.findByEmailAndRole() for email search');
// };

// –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
userSchema.statics.findActive = function() {
  return this.find({ is_active: true });
};

// –ü–æ–∏—Å–∫ –ø–æ —Ä–æ–ª–∏
userSchema.statics.findByRole = function(role) {
  return this.find({ role, is_active: true });
};

// ================ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø ================

userSchema.virtual('customerProfile', {
  ref: 'CustomerProfile',
  localField: '_id',
  foreignField: 'user_id',
  justOne: true
});

userSchema.virtual('partnerProfile', {
  ref: 'PartnerProfile',
  localField: '_id',
  foreignField: 'user_id',
  justOne: true
});

userSchema.virtual('courierProfile', {
  ref: 'CourierProfile',
  localField: '_id',
  foreignField: 'user_id',
  justOne: true
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JSON –≤—ã–≤–æ–¥–∞
userSchema.set('toJSON', { 
  virtuals: true,
  transform: function(doc, ret) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
    delete ret.password_hash;
    delete ret.email; // üîê –°–∫—Ä—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π email
    return ret;
  }
});
userSchema.set('toObject', { virtuals: true });

export default mongoose.model('User', userSchema);