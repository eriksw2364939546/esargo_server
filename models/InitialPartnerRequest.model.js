// models/InitialPartnerRequest.model.js - –¢–û–ß–ù–û –ü–û –°–ö–†–ò–ù–£ 1 üéØ
import mongoose from 'mongoose';

const initialPartnerRequestSchema = new mongoose.Schema({
  user_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    unique: true,
    index: true
  },
  
  // üë§ –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ 1)
  personal_data: {
    first_name: {
      type: String, // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û - "–ò–º—è"
      required: true
    },
    last_name: {
      type: String, // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û - "–§–∞–º–∏–ª–∏—è"  
      required: true
    },
    email: {
      type: String, // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û - "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
      required: true
    },
    phone: {
      type: String, // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û - "–ù–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" —Å FR
      required: true
    }
  },
  
  // üè™ –ë–ò–ó–ù–ï–° –î–ê–ù–ù–´–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ 1)
  business_data: {
    // –ê–¥—Ä–µ—Å –∏ —ç—Ç–∞–∂
    address: {
      type: String, // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û - "–ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞"
      required: true
    },
    floor_unit: {
      type: String, // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û - "–≠—Ç–∞–∂/–ª—é–∫—Å (–ø–æ –∂–µ–ª–∞–Ω–∏—é)"
      default: null
    },
    
    // –ù–∞–∑–≤–∞–Ω–∏—è
    business_name: {
      type: String, // ‚úÖ –û–¢–ö–†–´–¢–û - "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞" ("Burger King")
      required: true,
      trim: true,
      maxlength: 100
    },
    brand_name: {
      type: String, // ‚úÖ –û–¢–ö–†–´–¢–û - "–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞" ("Burger King")
      trim: true,
      maxlength: 100
    },
    
    // –¢–∏–ø –±–∏–∑–Ω–µ—Å–∞ (dropdown –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
    category: {
      type: String, // ‚úÖ –û–¢–ö–†–´–¢–û - "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞" (—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã/–º–∞–≥–∞–∑–∏–Ω—ã)
      required: true,
      enum: ['restaurant', 'store'],
      index: true
    },
    
    // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
    location: {
      type: {
        type: String,
        enum: ['Point'],
        required: true
      },
      coordinates: {
        type: [Number], // [longitude, latitude]
        required: true
      }
    },
    
    // –í–ª–∞–¥–µ–ª–µ—Ü (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    owner_name: {
      type: String, // ‚úÖ –û–¢–ö–†–´–¢–û
      required: true
    },
    owner_surname: {
      type: String, // ‚úÖ –û–¢–ö–†–´–¢–û
      required: true
    }
  },
  
  // üì± WHATSAPP –°–û–ì–õ–ê–°–ò–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ 1)
  marketing_consent: {
    whatsapp_consent: {
      type: Boolean, // "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ WhatsApp"
      default: false,
      required: true
    }
  },
  
  // üéØ –°–¢–ê–¢–£–° –ó–ê–Ø–í–ö–ò (workflow –æ—Å—Ç–∞–µ—Ç—Å—è)
  status: {
    type: String,
    enum: [
      'pending',             // –ñ–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
      'approved',            // –û–¥–æ–±—Ä–µ–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å —é—Ä.–¥–∞–Ω–Ω—ã–µ
      'rejected'             // –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
    ],
    default: 'pending',
    index: true
  },
  
  // üîÑ WORKFLOW –≠–¢–ê–ü–´
  workflow_stage: {
    type: Number,
    default: 1,
    min: 1,
    max: 7
  },
  
  // ‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ê–°–°–ú–û–¢–†–ï–ù–ò–ò
  review_info: {
    reviewed_by: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'AdminUser'
    },
    reviewed_at: Date,
    approved_at: Date,
    rejection_reason: {
      type: String,
      trim: true,
      maxlength: 500
    },
    admin_notes: {
      type: String,
      trim: true,
      maxlength: 1000
    }
  },
  
  // üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
  security_info: {
    registration_ip: String,
    user_agent: String,
    country_code: {
      type: String,
      default: 'FR'
    },
    phone_country: {
      type: String,
      default: 'FR' // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–µ–º—É "FR" –Ω–∞ —Å–∫—Ä–∏–Ω–µ
    }
  },
  
  // üìÖ –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–ö–ò
  submitted_at: {
    type: Date,
    required: true,
    default: Date.now,
    index: true
  },
  updated_at: {
    type: Date,
    default: Date.now
  }
}, { 
  timestamps: true,
  collection: 'initialpartnerrequests'
});

// ================ –ò–ù–î–ï–ö–°–´ ================
initialPartnerRequestSchema.index({
  status: 1,
  'business_data.category': 1,
  submitted_at: -1
});

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º workflow_stage
 */
initialPartnerRequestSchema.methods.updateStatus = function(newStatus, adminId = null, notes = '') {
  const statusToStage = {
    'pending': 1,
    'approved': 2,
    'rejected': 1
  };
  
  this.status = newStatus;
  this.workflow_stage = statusToStage[newStatus];
  this.updated_at = new Date();
  
  if (adminId) {
    this.review_info.reviewed_by = adminId;
    this.review_info.reviewed_at = new Date();
    
    if (newStatus === 'approved') {
      this.review_info.approved_at = new Date();
    }
  }
  
  if (notes) {
    this.review_info.admin_notes = notes;
  }
  
  return this.save();
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
initialPartnerRequestSchema.methods.validateFrenchPhone = function() {
  const phone = this.personal_data.phone;
  if (!phone) return false;
  
  const frenchPhoneRegex = /^(\+33|0)[1-9](\d{8})$/;
  const cleanPhone = phone.replace(/\s/g, '');
  return frenchPhoneRegex.test(cleanPhone);
};

// ================ –ù–ê–°–¢–†–û–ô–ö–ò JSON ================
initialPartnerRequestSchema.set('toJSON', { 
  virtuals: true,
  transform: function(doc, ret) {
    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
    if (ret.personal_data) {
      delete ret.personal_data.first_name;
      delete ret.personal_data.last_name;
      delete ret.personal_data.email;
      delete ret.personal_data.phone;
    }
    if (ret.business_data) {
      delete ret.business_data.address;
      delete ret.business_data.floor_unit;
      delete ret.business_data.owner_name;      // ‚úÖ –î–û–ë–ê–í–ò–¢–¨
      delete ret.business_data.owner_surname; 
    }
    return ret;
  }
});

export default mongoose.model('InitialPartnerRequest', initialPartnerRequestSchema);