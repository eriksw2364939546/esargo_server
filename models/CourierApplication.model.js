// models/CourierApplication.model.js - –ü–û–õ–ù–´–ô –§–ê–ô–õ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
import mongoose from 'mongoose';

const courierApplicationSchema = new mongoose.Schema({
  user_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∑–∞—è–≤–∫–∏
  submitted_at: {
    type: Date,
    required: true,
    default: Date.now,
    index: true
  },
  
  // –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
  status: {
    type: String,
    required: true,
    enum: ['pending', 'approved', 'rejected'],
    default: 'pending',
    index: true
  },
  
  // üîê –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï - –ó–ê–®–ò–§–†–û–í–ê–ù–´ (–∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
  personal_data: {
    first_name: {
      type: String,
      required: true
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    last_name: {
      type: String,
      required: true
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    email: {
      type: String,
      required: true
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    phone: {
      type: String,
      required: true
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    date_of_birth: {
      type: Date,
      required: true
    },
    address: {
      street: {
        type: String,
        required: true
        // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
      },
      city: {
        type: String,
        required: true
        // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
      },
      postal_code: {
        type: String,
        required: true
        // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
      },
      country: {
        type: String,
        default: 'France'
      }
    }
  },

  // ‚úÖ –ü–û–ò–°–ö–û–í–´–ï –ü–û–õ–Ø - –û–¢–ö–†–´–¢–û (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–º)
  search_data: {
    first_name: {
      type: String,
      required: true,
      trim: true
      // ‚úÖ –û–¢–ö–†–´–¢–û –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–º
    },
    last_name: {
      type: String,
      required: true,
      trim: true
      // ‚úÖ –û–¢–ö–†–´–¢–û –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–º  
    },
    city: {
      type: String,
      required: true,
      trim: true
      // ‚úÖ –û–¢–ö–†–´–¢–û –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–º
    }
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
  vehicle_info: {
    vehicle_type: {
      type: String,
      required: true,
      enum: ['bike', 'motorbike', 'car'],
      index: true
    },
    vehicle_brand: {
      type: String,
      trim: true
    },
    vehicle_model: {
      type: String,
      trim: true
    },
    license_plate: {
      type: String
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    insurance_company: {
      type: String,
      trim: true
    },
    insurance_policy_number: {
      type: String
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    }
  },
  
  // üîê –î–û–ö–£–ú–ï–ù–¢–´ - –ó–ê–®–ò–§–†–û–í–ê–ù–´ (URLs –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
  documents: {
    id_card_url: {
      type: String,
      required: true
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    driver_license_url: {
      type: String
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    insurance_url: {
      type: String
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    vehicle_registration_url: {
      type: String
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    },
    bank_rib_url: {
      type: String,
      required: true
      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –≤ —Å–µ—Ä–≤–∏—Å–µ —á–µ—Ä–µ–∑ cryptoString()
    }
  },
  
  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  verification: {
    identity_verified: {
      type: Boolean,
      default: false
    },
    license_verified: {
      type: Boolean,
      default: false
    },
    insurance_verified: {
      type: Boolean,
      default: false
    },
    vehicle_verified: {
      type: Boolean,
      default: false
    },
    overall_verification_status: {
      type: String,
      enum: ['not_started', 'in_progress', 'completed', 'failed'],
      default: 'not_started'
    },
    last_verification_update: {
      type: Date,
      default: Date.now
    }
  },
  
  // –°–æ–≥–ª–∞—Å–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã)
  consents: {
    terms_accepted: {
      type: Boolean,
      required: true,
      validate: {
        validator: function(v) {
          return v === true;
        },
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
      }
    },
    privacy_policy_accepted: {
      type: Boolean,
      required: true,
      validate: {
        validator: function(v) {
          return v === true;
        },
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'
      }
    },
    data_processing_accepted: {
      type: Boolean,
      required: true,
      validate: {
        validator: function(v) {
          return v === true;
        },
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö'
      }
    },
    background_check_accepted: {
      type: Boolean,
      required: true,
      validate: {
        validator: function(v) {
          return v === true;
        },
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö'
      }
    }
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
  review_info: {
    review_stage: {
      type: String,
      enum: ['documents', 'verification', 'interview', 'final'],
      default: 'documents'
    },
    priority_level: {
      type: String,
      enum: ['low', 'normal', 'high', 'urgent'],
      default: 'normal'
    },
    reviewed_by: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'AdminUser'
    },
    reviewed_at: {
      type: Date
    },
    approved_at: {
      type: Date
    },
    rejection_reason: {
      type: String,
      trim: true,
      maxlength: 500
    },
    admin_notes: {
      type: String,
      trim: true,
      maxlength: 1000
    }
  },
  
  // –î—É–±–ª–∏–∫–∞—Ç—ã (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞—è–≤–æ–∫)
  duplicate_check: {
    phone_exists: {
      type: Boolean,
      default: false
    },
    email_exists: {
      type: Boolean,
      default: false
    },
    license_exists: {
      type: Boolean,
      default: false
    }
  },
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
  test_results: {
    theory_test_passed: {
      type: Boolean,
      default: false
    },
    practical_test_passed: {
      type: Boolean,
      default: false
    }
  },
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  source: {
    type: String,
    enum: ['web', 'mobile_app', 'referral'],
    default: 'web'
  },
  referral_code: {
    type: String,
    trim: true
  },
  ip_address: {
    type: String
  },
  user_agent: {
    type: String
  }
}, {
  timestamps: true
});

// ================ –ò–ù–î–ï–ö–°–´ ================
courierApplicationSchema.index({ user_id: 1 });
courierApplicationSchema.index({ status: 1, submitted_at: -1 });
courierApplicationSchema.index({ 'search_data.first_name': 1 }); // ‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
courierApplicationSchema.index({ 'search_data.last_name': 1 });  // ‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
courierApplicationSchema.index({ 'search_data.city': 1 });       // ‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
courierApplicationSchema.index({ 'vehicle_info.vehicle_type': 1 });
courierApplicationSchema.index({ 'review_info.reviewed_by': 1 });

// –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
courierApplicationSchema.index({ 
  status: 1, 
  'verification.overall_verification_status': 1,
  submitted_at: -1 
});

// ================ –ù–ê–°–¢–†–û–ô–ö–ò JSON (–∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤) ================
courierApplicationSchema.set('toJSON', { 
  virtuals: true,
  transform: function(doc, ret) {
    // üîê –ù–ï –í–û–ó–í–†–ê–©–ê–ï–ú –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï –í JSON
    if (ret.personal_data) {
      delete ret.personal_data.first_name;    // üîê –°–∫—Ä—ã–≤–∞–µ–º
      delete ret.personal_data.last_name;     // üîê –°–∫—Ä—ã–≤–∞–µ–º
      delete ret.personal_data.email;         // üîê –°–∫—Ä—ã–≤–∞–µ–º
      delete ret.personal_data.phone;         // üîê –°–∫—Ä—ã–≤–∞–µ–º
      if (ret.personal_data.address) {
        delete ret.personal_data.address.street;      // üîê –°–∫—Ä—ã–≤–∞–µ–º
        delete ret.personal_data.address.city;        // üîê –°–∫—Ä—ã–≤–∞–µ–º
        delete ret.personal_data.address.postal_code; // üîê –°–∫—Ä—ã–≤–∞–µ–º
      }
    }
    
    if (ret.documents) {
      delete ret.documents.id_card_url;         // üîê –°–∫—Ä—ã–≤–∞–µ–º
      delete ret.documents.driver_license_url;  // üîê –°–∫—Ä—ã–≤–∞–µ–º
      delete ret.documents.insurance_url;       // üîê –°–∫—Ä—ã–≤–∞–µ–º
      delete ret.documents.vehicle_registration_url; // üîê –°–∫—Ä—ã–≤–∞–µ–º
      delete ret.documents.bank_rib_url;        // üîê –°–∫—Ä—ã–≤–∞–µ–º
    }
    
    if (ret.vehicle_info) {
      delete ret.vehicle_info.license_plate;          // üîê –°–∫—Ä—ã–≤–∞–µ–º
      delete ret.vehicle_info.insurance_policy_number; // üîê –°–∫—Ä—ã–≤–∞–µ–º
    }
    
    return ret;
  }
});

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================


// –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
courierApplicationSchema.methods.approve = function(adminId, adminNotes = '') {
  this.status = 'approved';
  this.review_info.reviewed_by = adminId;
  this.review_info.reviewed_at = new Date();
  this.review_info.approved_at = new Date();
  this.review_info.admin_notes = adminNotes;
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
  this.verification.identity_verified = true;
  this.verification.overall_verification_status = 'completed';
  this.verification.last_verification_update = new Date();
  
  // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  if (this.vehicle_info.vehicle_type === 'motorbike' || this.vehicle_info.vehicle_type === 'car') {
    this.verification.license_verified = true;
    this.verification.insurance_verified = true;
  }
  
  if (this.vehicle_info.vehicle_type === 'car') {
    this.verification.vehicle_verified = true;
  }
  
  // –î–ª—è bike - –ø—Ä–∞–≤–∞ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è
  if (this.vehicle_info.vehicle_type === 'bike') {
    this.verification.license_verified = false;
    this.verification.insurance_verified = false;
    this.verification.vehicle_verified = false;
  }
  
  return this.save();
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
courierApplicationSchema.methods.reject = function(adminId, reason, adminNotes = '') {
  this.status = 'rejected';
  this.review_info.reviewed_by = adminId;
  this.review_info.reviewed_at = new Date();
  this.review_info.rejection_reason = reason;
  this.review_info.admin_notes = adminNotes;
  this.verification.overall_verification_status = 'failed';
  
  return this.save();
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
courierApplicationSchema.methods.checkForDuplicates = async function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ search_data (–æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è) –≤–º–µ—Å—Ç–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö
  const existingApplications = await this.constructor.find({
    _id: { $ne: this._id },
    status: { $in: ['pending', 'approved'] },
    $or: [
      { 
        'search_data.first_name': this.search_data.first_name,
        'search_data.last_name': this.search_data.last_name,
        'search_data.city': this.search_data.city
      }
    ]
  });
  
  this.duplicate_check.email_exists = existingApplications.length > 0;
  
  return this.save();
};

// –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
courierApplicationSchema.methods.getAge = function() {
  if (!this.personal_data.date_of_birth) return null;
  
  const today = new Date();
  const birthDate = new Date(this.personal_data.date_of_birth);
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  
  return age;
};

// –°–æ–∑–¥–∞–Ω–∏–µ CourierProfile –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
courierApplicationSchema.methods.createCourierProfile = async function() {
  if (this.status !== 'approved') {
    throw new Error('–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞');
  }
  
  const CourierProfile = mongoose.model('CourierProfile');
  
  const courierProfile = new CourierProfile({
    user_id: this.user_id,
    first_name: this.search_data.first_name,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    last_name: this.search_data.last_name,    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    phone: this.personal_data.phone,          // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    vehicle_type: this.vehicle_info.vehicle_type,
    documents: this.documents,                // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    is_approved: true,
    application_status: 'approved',
    approved_by: this.review_info.reviewed_by,
    approved_at: this.review_info.reviewed_at
  });
  
  return courierProfile.save();
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================

// –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
courierApplicationSchema.statics.findByStatus = function(status) {
  return this.find({ status }).sort({ submitted_at: -1 });
};

// –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
courierApplicationSchema.statics.findPending = function() {
  return this.find({ status: 'pending' }).sort({ submitted_at: 1 });
};

// –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
courierApplicationSchema.statics.findInProgress = function() {
  return this.find({ 
    status: 'pending',
    'verification.overall_verification_status': 'in_progress'
  }).sort({ submitted_at: 1 });
};

// –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
courierApplicationSchema.statics.findByVehicleType = function(vehicleType) {
  return this.find({ 
    'vehicle_info.vehicle_type': vehicleType 
  }).sort({ submitted_at: -1 });
};

// –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –∞–¥–º–∏–Ω–∞
courierApplicationSchema.statics.findByAdmin = function(adminId) {
  return this.find({ 
    'review_info.reviewed_by': adminId 
  }).sort({ 'review_info.reviewed_at': -1 });
};

// –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è)
courierApplicationSchema.statics.findForAdmin = function(filters = {}) {
  return this.find(filters)
    .select('search_data vehicle_info.vehicle_type status submitted_at review_info verification user_id')
    .sort({ submitted_at: -1 });
};

// –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–ª—è–º
courierApplicationSchema.statics.searchByName = function(firstName, lastName) {
  return this.find({
    'search_data.first_name': firstName,
    'search_data.last_name': lastName
  });
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
courierApplicationSchema.statics.getStats = function(period = 30) {
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - period);
  
  return this.aggregate([
    {
      $match: {
        submitted_at: { $gte: startDate }
      }
    },
    {
      $group: {
        _id: '$status',
        count: { $sum: 1 },
        by_vehicle_type: {
          $push: '$vehicle_info.vehicle_type'
        },
        avg_age: {
          $avg: {
            $divide: [
              { $subtract: [new Date(), '$personal_data.date_of_birth'] },
              365.25 * 24 * 60 * 60 * 1000
            ]
          }
        }
      }
    }
  ]);
};

// –ü–æ–∏—Å–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –±–æ–ª–µ–µ 2 –¥–Ω–µ–π)
courierApplicationSchema.statics.findOverdue = function(daysOld = 2) {
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - daysOld);
  
  return this.find({
    status: 'pending',
    submitted_at: { $lt: cutoffDate }
  }).sort({ submitted_at: 1 });
};

export default mongoose.model('CourierApplication', courierApplicationSchema);