// ================ models/Product.model.js - –ü–û–õ–ù–ê–Ø –ú–û–î–ï–õ–¨ –ü–†–û–î–£–ö–¢–ê ================
import mongoose from 'mongoose';

const productSchema = new mongoose.Schema({
  // ============ –û–°–ù–û–í–ù–´–ï –°–í–Ø–ó–ò ============
  partner_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'PartnerProfile',
    required: true,
    index: true
  },
  
  // ============ –ë–ê–ó–û–í–´–ï –ü–û–õ–Ø –ü–†–û–î–£–ö–¢–ê ============
  title: {
    type: String,
    required: true,
    trim: true,
    maxlength: 150
  },
  description: {
    type: String,
    trim: true,
    maxlength: 800
  },
  price: {
    type: Number,
    required: true,
    min: 0.01 // –ú–∏–Ω–∏–º—É–º 1 —Ü–µ–Ω—Ç
  },
  discount_price: {
    type: Number,
    min: 0,
    validate: {
      validator: function(value) {
        return !value || value < this.price;
      },
      message: '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã'
    }
  },
  image_url: { 
    type: String,
    default: ''
  },
  
  // ============ –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø ============
  category: {
    type: String,
    required: true,
    enum: ['restaurant', 'store'],
    index: true
  },
  subcategory: {
    type: String,
    required: true,
    trim: true,
    maxlength: 50,
    index: true
  },
  menu_category_id: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    index: true
  },
  
  // ============ –û–ü–¶–ò–ò –î–õ–Ø –†–ï–°–¢–û–†–ê–ù–û–í (–¥–æ–±–∞–≤–∫–∏ –∫ –±–ª—é–¥–∞–º) ============
  options_groups: [{
    name: {
      type: String,
      required: true,
      trim: true,
      maxlength: 50
    },
    description: {
      type: String,
      trim: true,
      maxlength: 200,
      default: ''
    },
    required: { 
      type: Boolean, 
      default: false 
    },
    multiple_choice: { 
      type: Boolean, 
      default: false 
    },
    max_selections: { 
      type: Number, 
      default: 1,
      min: 1
    },
    options: [{
      name: {
        type: String,
        required: true,
        trim: true,
        maxlength: 50
      },
      price: {
        type: Number,
        required: true,
        min: 0
      },
      is_available: { 
        type: Boolean, 
        default: true 
      }
    }]
  }],
  
  // ============ –í–†–ï–ú–Ø –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–Ø (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤) ============
  preparation_time: {
    type: Number,
    min: 0,
    default: function() {
      return this.category === 'restaurant' ? 15 : 0;
    }
  },
  
  // ============ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–õ–Æ–î–ï (–¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤) ============
  dish_info: {
    ingredients: [{ 
      type: String, 
      trim: true,
      maxlength: 100 
    }],
    
    // ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã
    allergens: [{
      type: String,
      enum: [
        // –°—Ç–∞—Ä—ã–µ —Ä—É—Å—Å–∫–∏–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        '–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '—è–π—Ü–∞', '–æ—Ä–µ—Ö–∏',
        '–∞—Ä–∞—Ö–∏—Å', '—Å–æ—è', '—Ä—ã–±–∞', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '—Å–µ–ª—å–¥–µ—Ä–µ–π',
        '–≥–æ—Ä—á–∏—Ü–∞', '–∫—É–Ω–∂—É—Ç', '—Å—É–ª—å—Ñ–∏—Ç—ã', '–ª—é–ø–∏–Ω', '–º–æ–ª–ª—é—Å–∫–∏',
        
        // üÜï –ù–æ–≤—ã–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
        'gluten', 'lait', '≈ìufs', 'fruits_√†_coque',
        'arachides', 'soja', 'poissons', 'crustac√©s', 'c√©leri',
        'moutarde', 'graines_de_s√©same', 'anhydride_sulfureux_et_sulfites',
        'lupin', 'mollusques',
        
        // üÜï –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ (–∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è)  
        'eggs', 'fish', 'peanuts', 'soybeans', 'milk', 'tree_nuts',
        'shellfish', 'sesame', 'mustard', 'celery', 'sulfites'
      ]
    }],
    
    // –£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç—Ä–æ—Ç—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–æ–∫ –∏ —á–∏—Å–µ–ª)
    spice_level: {
      type: mongoose.Schema.Types.Mixed, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–æ–∫ –∏ —á–∏—Å–µ–ª
      default: 0,
      validate: {
        validator: function(value) {
          if (typeof value === 'number') {
            return value >= 0 && value <= 5;
          }
          if (typeof value === 'string') {
            const allowedStrings = [
              '–Ω–µ—Ç', '—Å–ª–∞–±–æ', '—Å—Ä–µ–¥–Ω–µ', '–æ—Å—Ç—Ä–æ', '–æ—á–µ–Ω—å –æ—Å—Ç—Ä–æ', '—ç–∫—Å—Ç—Ä–∏–º',
              'none', 'mild', 'medium', 'hot', 'very hot', 'extreme',
              'aucun', 'doux', 'moyen', 'piquant', 'tr√®s piquant', 'extr√™me'
            ];
            return allowedStrings.includes(value.toLowerCase());
          }
          return false;
        },
        message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Å—Ç—Ä–æ—Ç—ã'
      }
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ
    cuisine_type: { 
      type: String, 
      trim: true,
      maxlength: 50 
    },
    cooking_method: {
      type: String,
      enum: ['grilled', 'fried', 'baked', 'steamed', 'raw', 'boiled', 'roasted'],
      trim: true
    },
    portion_size: {
      type: String,
      enum: ['small', 'medium', 'large', 'extra_large'],
      default: 'medium'
    }
  },
  
  // ============ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï (–¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤) ============
  product_info: {
    brand: { 
      type: String, 
      trim: true,
      maxlength: 100 
    },
    weight_grams: { 
      type: Number, 
      min: 0 
    },
    volume_ml: { 
      type: Number, 
      min: 0 
    },
    unit_count: { 
      type: Number, 
      min: 1, 
      default: 1 
    },
    expiry_date: { 
      type: Date 
    },
    storage_conditions: { 
      type: String, 
      trim: true,
      maxlength: 200 
    },
    
    // üÜï –§–†–ê–ù–¶–£–ó–°–ö–ò–ï –°–¢–ê–ù–î–ê–†–¢–´ –î–õ–Ø –ú–ê–ì–ê–ó–ò–ù–û–í
    packaging_type: {
      type: String,
      enum: [
        'vrac',        // —Ä–æ—Å—Å—ã–ø—å—é
        'emball√©',     // —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π
        'sous_vide',   // –≤ –≤–∞–∫—É—É–º–µ
        'conserve',    // –∫–æ–Ω—Å–µ—Ä–≤—ã
        'frais',       // —Å–≤–µ–∂–∏–π
        'surgel√©',     // –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π
        'sec'          // —Å—É—Ö–æ–π
      ]
    },
    origin_country: { 
      type: String, 
      default: 'France',
      trim: true,
      maxlength: 50 
    },
    
    // –®—Ç—Ä–∏—Ö-–∫–æ–¥—ã (—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã)
    barcode_ean13: { 
      type: String, 
      match: /^\d{13}$/,
      validate: {
        validator: function(value) {
          if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
          return /^\d{13}$/.test(value);
        },
        message: '–®—Ç—Ä–∏—Ö-–∫–æ–¥ EAN13 –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 13 —Ü–∏—Ñ—Ä'
      }
    },
    barcode_ean8: { 
      type: String, 
      match: /^\d{8}$/,
      validate: {
        validator: function(value) {
          if (!value) return true; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
          return /^\d{8}$/.test(value);
        },
        message: '–®—Ç—Ä–∏—Ö-–∫–æ–¥ EAN8 –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —Ü–∏—Ñ—Ä'
      }
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ
    packaging_metadata: {
      has_weight: { type: Boolean, default: false },
      has_volume: { type: Boolean, default: false },
      has_barcode: { type: Boolean, default: false },
      unit_type: { 
        type: String, 
        enum: ['weight', 'volume', 'count'],
        default: 'count'
      }
    }
  },
  
  // ============ –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê ============
  multilingual: {
    title_en: { type: String, trim: true },
    title_fr: { type: String, trim: true },
    description_en: { type: String, trim: true },
    description_fr: { type: String, trim: true }
  },
  
  // ============ –§–†–ê–ù–¶–£–ó–°–ö–ê–Ø –ù–ê–õ–û–ì–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ============
  tax_info: {
    tva_rate: {
      type: Number,
      min: 0,
      max: 1,
      default: function() {
        return this.category === 'restaurant' ? 0.10 : 0.20; // 10% –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, 20% –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
      }
    },
    tax_category: {
      type: String,
      enum: ['standard', 'reduced', 'super_reduced', 'zero'],
      default: function() {
        return this.category === 'restaurant' ? 'reduced' : 'standard';
      }
    },
    eco_tax: { type: Number, min: 0, default: 0 }
  },
  
  // ============ –î–ò–ï–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–ö–ò ============
  dietary_labels: [{
    type: String,
    enum: [
      'vegetarian', 'vegan', 'gluten_free', 'lactose_free',
      'organic', 'kosher', 'halal', 'sugar_free', 'low_fat',
      'high_protein', 'keto_friendly', 'raw'
    ]
  }],
  
  // ============ –î–û–°–¢–£–ü–ù–û–°–¢–¨ –ò –†–ê–°–ü–ò–°–ê–ù–ò–ï ============
  availability_schedule: {
    monday: { available: { type: Boolean, default: true }, start_time: String, end_time: String },
    tuesday: { available: { type: Boolean, default: true }, start_time: String, end_time: String },
    wednesday: { available: { type: Boolean, default: true }, start_time: String, end_time: String },
    thursday: { available: { type: Boolean, default: true }, start_time: String, end_time: String },
    friday: { available: { type: Boolean, default: true }, start_time: String, end_time: String },
    saturday: { available: { type: Boolean, default: true }, start_time: String, end_time: String },
    sunday: { available: { type: Boolean, default: true }, start_time: String, end_time: String }
  },
  
  // ============ –°–¢–ê–¢–£–° –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï ============
  is_active: { type: Boolean, default: true },
  is_available: { type: Boolean, default: true },
  stock_quantity: { type: Number, min: 0 },
  low_stock_threshold: { type: Number, min: 0, default: 5 },
  
  // ============ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ ============
  sales_stats: {
    total_sold: { type: Number, default: 0 },
    weekly_sold: { type: Number, default: 0 },
    monthly_sold: { type: Number, default: 0 },
    total_revenue: { type: Number, default: 0 }
  },
  
  // ============ –†–ï–ô–¢–ò–ù–ì–ò ============
  ratings: {
    avg_rating: { type: Number, default: 0, min: 0, max: 5 },
    total_ratings: { type: Number, default: 0 }
  },
  
  // ============ –ú–ï–¢–ê–î–ê–ù–ù–´–ï ============
  sort_order: { type: Number, default: 0 },
  tags: [{ type: String, trim: true, lowercase: true, maxlength: 30 }],
  last_updated_by: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
  
}, { 
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// ============ –ò–ù–î–ï–ö–°–´ –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ============
productSchema.index({ partner_id: 1, is_active: 1, is_available: 1 });
productSchema.index({ category: 1, subcategory: 1 });
productSchema.index({ price: 1 });
productSchema.index({ 'ratings.avg_rating': -1 });
productSchema.index({ 'sales_stats.total_sold': -1 });
productSchema.index({ tags: 1 });
productSchema.index({ dietary_labels: 1 });

// ============ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø ============

/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)
 */
productSchema.virtual('final_price').get(function() {
  return this.discount_price && this.discount_price > 0 ? this.discount_price : this.price;
});

/**
 * –ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞
 */
productSchema.virtual('has_discount').get(function() {
  return !!this.discount_price && this.discount_price < this.price;
});

/**
 * –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
 */
productSchema.virtual('discount_percentage').get(function() {
  if (!this.has_discount) return 0;
  return Math.round(((this.price - this.discount_price) / this.price) * 100);
});

/**
 * –°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ
 */
productSchema.virtual('stock_status').get(function() {
  if (this.stock_quantity === undefined || this.stock_quantity === null) return 'unlimited';
  if (this.stock_quantity === 0) return 'out_of_stock';
  if (this.stock_quantity <= this.low_stock_threshold) return 'low_stock';
  return 'in_stock';
});

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å
 */
productSchema.virtual('current_availability').get(function() {
  if (!this.is_active || !this.is_available) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  if (this.availability_schedule) {
    const now = new Date();
    const currentDay = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'][now.getDay()];
    const daySchedule = this.availability_schedule[currentDay];
    
    if (!daySchedule || !daySchedule.available) return false;
    
    if (daySchedule.start_time && daySchedule.end_time) {
      const currentTime = now.toTimeString().slice(0, 5);
      return currentTime >= daySchedule.start_time && currentTime <= daySchedule.end_time;
    }
  }
  
  return true;
});

// ============ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ============

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É —á–µ—Ä–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
productSchema.methods.validateCategory = async function() {
  const PartnerProfile = mongoose.model('PartnerProfile');
  const partner = await PartnerProfile.findById(this.partner_id);
  
  if (!partner) {
    throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  const category = partner.menu_categories.find(cat => cat.slug === this.subcategory);
  if (!category) {
    throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É —ç—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞');
  }
  
  this.menu_category_id = category._id;
  return true;
};

/**
 * –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –æ–ø—Ü–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 * @param {number} quantity - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
 * @param {Array} selectedOptions - –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ [{ groupName, optionName }]
 * @returns {object} - –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
 */
productSchema.methods.calculateTotalPrice = function(quantity = 1, selectedOptions = []) {
  let basePrice = this.final_price * quantity;
  let optionsPrice = 0;
  const appliedOptions = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  if (this.category === 'restaurant' && this.options_groups.length > 0) {
    selectedOptions.forEach(selection => {
      const group = this.options_groups.find(g => g.name === selection.groupName);
      if (group) {
        const option = group.options.find(o => o.name === selection.optionName);
        if (option && option.is_available) {
          const optionTotal = option.price * quantity;
          optionsPrice += optionTotal;
          appliedOptions.push({
            group: group.name,
            option: option.name,
            unit_price: option.price,
            total_price: optionTotal
          });
        }
      }
    });
  }
  
  const totalPrice = basePrice + optionsPrice;
  
  // –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤
  let taxCalculation = null;
  if (this.tax_info?.tva_rate) {
    const tvaAmount = totalPrice * this.tax_info.tva_rate;
    const ecoTax = this.tax_info.eco_tax || 0;
    
    taxCalculation = {
      price_before_tax: totalPrice,
      tva_rate: this.tax_info.tva_rate,
      tva_amount: Math.round(tvaAmount * 100) / 100,
      eco_tax: ecoTax * quantity,
      total_tax: Math.round((tvaAmount + (ecoTax * quantity)) * 100) / 100,
      price_with_tax: Math.round((totalPrice + tvaAmount + (ecoTax * quantity)) * 100) / 100
    };
  }
  
  return {
    base_price: Math.round(basePrice * 100) / 100,
    options_price: Math.round(optionsPrice * 100) / 100,
    total_price: Math.round(totalPrice * 100) / 100,
    quantity: quantity,
    applied_options: appliedOptions,
    tax_calculation: taxCalculation,
    currency: 'EUR',
    business_type: this.category
  };
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
 * @param {string} language - –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, fr)
 * @returns {string} - –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 */
productSchema.methods.getLocalizedTitle = function(language = 'ru') {
  if (this.multilingual) {
    const field = `title_${language}`;
    return this.multilingual[field] || this.title;
  }
  return this.title;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
 * @param {string} language - –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, fr)
 * @returns {string} - –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
 */
productSchema.methods.getLocalizedDescription = function(language = 'ru') {
  if (this.multilingual) {
    const field = `description_${language}`;
    return this.multilingual[field] || this.description;
  }
  return this.description;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç—Ä–æ—Ç—ã
 * @param {string} language - –ö–æ–¥ —è–∑—ã–∫–∞
 * @returns {string} - –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Å—Ç—Ä–æ—Ç—ã
 */
productSchema.methods.getSpiceLevelDisplay = function(language = 'ru') {
  const value = this.dish_info?.spice_level;
  
  if (typeof value === 'number') {
    const levelMaps = {
      ru: ['–Ω–µ—Ç', '—Å–ª–∞–±–æ', '—Å—Ä–µ–¥–Ω–µ', '–æ—Å—Ç—Ä–æ', '–æ—á–µ–Ω—å –æ—Å—Ç—Ä–æ', '—ç–∫—Å—Ç—Ä–∏–º'],
      fr: ['aucun', 'doux', 'moyen', 'piquant', 'tr√®s piquant', 'extr√™me'],
      en: ['none', 'mild', 'medium', 'hot', 'very hot', 'extreme']
    };
    return levelMaps[language]?.[value] || value.toString();
  }
  
  return value || '–Ω–µ—Ç';
};

/**
 * –†–∞—Å—á–µ—Ç —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –Ω–∞–ª–æ–≥–æ–≤
 * @returns {object} - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–∞—Ö
 */
productSchema.methods.calculateTaxes = function() {
  if (!this.tax_info?.tva_rate) return null;
  
  const basePrice = this.final_price;
  const tvaAmount = basePrice * this.tax_info.tva_rate;
  const ecoTax = this.tax_info.eco_tax || 0;
  
  return {
    base_price: Math.round(basePrice * 100) / 100,
    tva_rate: this.tax_info.tva_rate,
    tva_amount: Math.round(tvaAmount * 100) / 100,
    eco_tax: ecoTax,
    total_tax: Math.round((tvaAmount + ecoTax) * 100) / 100,
    final_price_with_tax: Math.round((basePrice + tvaAmount + ecoTax) * 100) / 100,
    tax_category: this.tax_info.tax_category,
    currency: 'EUR'
  };
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è)
 * @returns {object} - –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
 */
productSchema.methods.getDisplayInfo = function() {
  const base = {
    id: this._id,
    title: this.title,
    description: this.description,
    price: this.price,
    discount_price: this.discount_price,
    final_price: this.final_price,
    has_discount: this.has_discount,
    discount_percentage: this.discount_percentage,
    image_url: this.image_url,
    category: this.category,
    subcategory: this.subcategory,
    is_active: this.is_active,
    is_available: this.is_available,
    current_availability: this.current_availability,
    stock_status: this.stock_status,
    tags: this.tags,
    ratings: this.ratings,
    created_at: this.createdAt,
    updated_at: this.updatedAt
  };
  
  if (this.category === 'restaurant') {
    // üçΩÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –†–ï–°–¢–û–†–ê–ù–ê
    return {
      ...base,
      preparation_time: this.preparation_time,
      options_groups: this.options_groups,
      dish_info: this.dish_info,
      dietary_labels: this.dietary_labels,
      has_options: this.options_groups.length > 0,
      business_features: {
        type: 'restaurant',
        supports_customization: this.options_groups.length > 0,
        estimated_time: this.preparation_time
      }
    };
  } else if (this.category === 'store') {
    // üè™ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ú–ê–ì–ê–ó–ò–ù–ê
    return {
      ...base,
      product_info: this.product_info,
      stock_quantity: this.stock_quantity,
      low_stock_threshold: this.low_stock_threshold,
      has_packaging_info: !!this.product_info,
      business_features: {
        type: 'store',
        has_weight: !!this.product_info?.weight_grams,
        has_volume: !!this.product_info?.volume_ml,
        has_barcode: !!(this.product_info?.barcode_ean13 || this.product_info?.barcode_ean8),
        origin_country: this.product_info?.origin_country
      }
    };
  }
  
  return base;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
 * @returns {boolean} - –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å–µ–π—á–∞—Å
 */
productSchema.methods.isAvailableNow = function() {
  if (!this.is_active || !this.is_available) return false;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
  if (this.category === 'store' && this.stock_quantity !== undefined) {
    if (this.stock_quantity <= 0) return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  if (this.availability_schedule) {
    const now = new Date();
    const currentDay = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'][now.getDay()];
    const daySchedule = this.availability_schedule[currentDay];
    
    if (!daySchedule || !daySchedule.available) return false;
    
    if (daySchedule.start_time && daySchedule.end_time) {
      const currentTime = now.toTimeString().slice(0, 5);
      return currentTime >= daySchedule.start_time && currentTime <= daySchedule.end_time;
    }
  }
  
  return true;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–∫
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–∫
 */
productSchema.methods.getCompatibleDietaryLabels = function() {
  const compatible = [];
  
  if (this.dish_info?.allergens) {
    const allergens = this.dish_info.allergens;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
    if (!allergens.some(a => ['–≥–ª—é—Ç–µ–Ω', 'gluten'].includes(a))) {
      compatible.push('gluten_free');
    }
    if (!allergens.some(a => ['–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', 'lait', 'milk'].includes(a))) {
      compatible.push('lactose_free');
    }
    if (!allergens.some(a => ['—è–π—Ü–∞', '≈ìufs', 'eggs'].includes(a))) {
      compatible.push('vegan_friendly');
    }
  }
  
  return compatible;
};

// ============ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ============

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (PartnerProfile._id)
 * @param {string} categorySlug - Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {boolean} includeInactive - –í–∫–ª—é—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
productSchema.statics.findByPartnerCategory = function(partnerId, categorySlug, includeInactive = false) {
  const query = { 
    partner_id: partnerId, 
    subcategory: categorySlug 
  };
  
  if (!includeInactive) {
    query.is_active = true;
    query.is_available = true;
  }
  
  return this.find(query).sort({ sort_order: 1, createdAt: -1 });
};

/**
 * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (PartnerProfile._id)
 * @param {boolean} includeInactive - –í–∫–ª—é—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
productSchema.statics.findByPartner = function(partnerId, includeInactive = false) {
  const query = { partner_id: partnerId };
  
  if (!includeInactive) {
    query.is_active = true;
    query.is_available = true;
  }
  
  return this.find(query).sort({ subcategory: 1, sort_order: 1, createdAt: -1 });
};

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} filters - –û–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * @returns {Promise<Array>} - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
 */
productSchema.statics.findWithFrenchFilters = function(partnerId, filters = {}) {
  const query = { partner_id: partnerId, is_active: true };
  
  // –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (filters.category_slug) {
    query.subcategory = filters.category_slug;
  }
  
  if (filters.price_min || filters.price_max) {
    query.price = {};
    if (filters.price_min) query.price.$gte = parseFloat(filters.price_min);
    if (filters.price_max) query.price.$lte = parseFloat(filters.price_max);
  }
  
  // –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (filters.dietary_labels && filters.dietary_labels.length > 0) {
    query.dietary_labels = { $in: filters.dietary_labels };
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –∞–ª–ª–µ—Ä–≥–µ–Ω–∞–º (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
  if (filters.allergen_free && filters.allergen_free.length > 0) {
    query['dish_info.allergens'] = { $nin: filters.allergen_free };
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫—É—Ö–Ω–∏
  if (filters.cuisine_type) {
    query['dish_info.cuisine_type'] = filters.cuisine_type;
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é –æ—Å—Ç—Ä–æ—Ç—ã
  if (filters.spice_level_max !== undefined) {
    query['dish_info.spice_level'] = { $lte: parseInt(filters.spice_level_max) };
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  if (filters.availability_time) {
    const [day, time] = filters.availability_time.split('_');
    if (day && time) {
      query[`availability_schedule.${day}.available`] = true;
      if (time !== 'all') {
        query[`availability_schedule.${day}.start_time`] = { $lte: time };
        query[`availability_schedule.${day}.end_time`] = { $gte: time };
      }
    }
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –Ω–∞ —Å–∫–ª–∞–¥–µ (–¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤)
  if (filters.in_stock_only === 'true') {
    query.$or = [
      { stock_quantity: { $exists: false } }, // –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∑–∞–ø–∞—Å
      { stock_quantity: { $gt: 0 } }          // –ï—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ
    ];
  }
  
  return this.find(query).sort({ 
    sort_order: 1, 
    'ratings.avg_rating': -1, 
    createdAt: -1 
  });
};

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {number} limit - –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @returns {Promise<Array>} - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
 */
productSchema.statics.findPopularByPartner = function(partnerId, limit = 10) {
  return this.find({ 
    partner_id: partnerId, 
    is_active: true, 
    is_available: true 
  })
  .sort({ 
    'sales_stats.total_sold': -1, 
    'ratings.avg_rating': -1 
  })
  .limit(limit);
};

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {Array} tags - –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
 * @returns {Promise<Array>} - –ü—Ä–æ–¥—É–∫—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
 */
productSchema.statics.findByTags = function(partnerId, tags) {
  return this.find({
    partner_id: partnerId,
    is_active: true,
    is_available: true,
    tags: { $in: tags }
  }).sort({ 'ratings.avg_rating': -1, createdAt: -1 });
};

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {number} minPrice - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
 * @param {number} maxPrice - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
 * @returns {Promise<Array>} - –ü—Ä–æ–¥—É–∫—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
 */
productSchema.statics.findByPriceRange = function(partnerId, minPrice, maxPrice) {
  return this.find({
    partner_id: partnerId,
    is_active: true,
    is_available: true,
    price: { $gte: minPrice, $lte: maxPrice }
  }).sort({ price: 1 });
};

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @param {Array} productIds - –ú–∞—Å—Å–∏–≤ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @param {object} statusUpdate - –û–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞
 * @returns {Promise<object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
productSchema.statics.bulkUpdateStatus = function(productIds, statusUpdate) {
  const objectIds = productIds.map(id => new mongoose.Types.ObjectId(id));
  
  return this.updateMany(
    { _id: { $in: objectIds } },
    { 
      ...statusUpdate,
      updatedAt: new Date()
    }
  );
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {Promise<object>} - –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */
productSchema.statics.getPartnerStats = function(partnerId) {
  return this.aggregate([
    { $match: { partner_id: partnerId } },
    {
      $group: {
        _id: '$subcategory',
        total_products: { $sum: 1 },
        active_products: {
          $sum: {
            $cond: [
              { $and: ['$is_active', '$is_available'] },
              1,
              0
            ]
          }
        },
        avg_price: { $avg: '$price' },
        min_price: { $min: '$price' },
        max_price: { $max: '$price' },
        total_sales: { $sum: '$sales_stats.total_sold' },
        total_revenue: { $sum: '$sales_stats.total_revenue' },
        avg_rating: { $avg: '$ratings.avg_rating' }
      }
    },
    { $sort: { total_products: -1 } }
  ]);
};

// ============ MIDDLEWARE –°–•–ï–ú–´ ============

/**
 * Pre-save middleware: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
 */
productSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
  if (this.category === 'store' && this.product_info) {
    if (!this.product_info.packaging_metadata) {
      this.product_info.packaging_metadata = {};
    }
    
    this.product_info.packaging_metadata.has_weight = !!this.product_info.weight_grams;
    this.product_info.packaging_metadata.has_volume = !!this.product_info.volume_ml;
    this.product_info.packaging_metadata.has_barcode = !!(this.product_info.barcode_ean13 || this.product_info.barcode_ean8);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if (this.product_info.weight_grams) {
      this.product_info.packaging_metadata.unit_type = 'weight';
    } else if (this.product_info.volume_ml) {
      this.product_info.packaging_metadata.unit_type = 'volume';
    } else {
      this.product_info.packaging_metadata.unit_type = 'count';
    }
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (!this.tax_info?.tva_rate) {
    if (!this.tax_info) this.tax_info = {};
    this.tax_info.tva_rate = this.category === 'restaurant' ? 0.10 : 0.20;
    this.tax_info.tax_category = this.category === 'restaurant' ? 'reduced' : 'standard';
  }
  
  next();
});

/**
 * Pre-save middleware: –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
 */
productSchema.pre('save', function(next) {
  // –†–µ—Å—Ç–æ—Ä–∞–Ω: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
  if (this.category === 'restaurant') {
    if (!this.preparation_time || this.preparation_time === 0) {
      this.preparation_time = 15; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç
    }
  }
  
  // –ú–∞–≥–∞–∑–∏–Ω: –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø—Ü–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
  if (this.category === 'store') {
    if (this.options_groups && this.options_groups.length > 0) {
      return next(new Error('–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –æ–ø—Ü–∏–∏ (–¥–æ–±–∞–≤–∫–∏)'));
    }
    this.preparation_time = 0;
  }
  
  next();
});

/**
 * Post-save middleware: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
productSchema.post('save', async function() {
  try {
    const PartnerProfile = mongoose.model('PartnerProfile');
    const partner = await PartnerProfile.findById(this.partner_id);
    if (partner) {
      await partner.updateProductStats();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
  }
});

/**
 * Post-remove middleware: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
 */
productSchema.post('findOneAndDelete', async function(doc) {
  if (doc) {
    try {
      const PartnerProfile = mongoose.model('PartnerProfile');
      const partner = await PartnerProfile.findById(doc.partner_id);
      if (partner) {
        await partner.updateProductStats();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    }
  }
});

// ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ============

/**
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
 * @param {object} productData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param {string} partnerCategory - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
productSchema.statics.validateProductData = function(productData, partnerCategory) {
  const errors = [];
  const warnings = [];
  
  // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if (!productData.title || productData.title.trim().length === 0) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!productData.price || productData.price <= 0) {
    errors.push('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
  }
  
  if (productData.discount_price && productData.discount_price >= productData.price) {
    errors.push('–°–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã');
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∑–∞–≤–µ–¥–µ–Ω–∏—è
  if (partnerCategory === 'restaurant') {
    if (!productData.preparation_time || productData.preparation_time < 1) {
      warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è');
    }
    
    if (productData.product_info && Object.keys(productData.product_info).length > 0) {
      warnings.push('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥');
    }
  }
  
  if (partnerCategory === 'store') {
    if (productData.options_groups && productData.options_groups.length > 0) {
      errors.push('–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –æ–ø—Ü–∏–∏ (–¥–æ–±–∞–≤–∫–∏)');
    }
    
    if (productData.preparation_time && productData.preparation_time > 0) {
      warnings.push('–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞');
    }
    
    if (!productData.product_info || 
        (!productData.product_info.weight_grams && 
         !productData.product_info.volume_ml && 
         !productData.product_info.unit_count)) {
      warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–∫–æ–≤–∫–µ (–≤–µ—Å, –æ–±—ä—ë–º –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)');
    }
  }
  
  return {
    is_valid: errors.length === 0,
    errors,
    warnings
  };
};

/**
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥: –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} searchQuery - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<Array>} - –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
 */
productSchema.statics.searchByText = function(partnerId, searchQuery) {
  const regex = new RegExp(searchQuery, 'i');
  
  return this.find({
    partner_id: partnerId,
    is_active: true,
    is_available: true,
    $or: [
      { title: regex },
      { description: regex },
      { tags: { $in: [regex] } },
      { 'dish_info.ingredients': { $in: [regex] } }
    ]
  }).sort({ 'ratings.avg_rating': -1, 'sales_stats.total_sold': -1 });
};

/**
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {Promise<Array>} - –ü—Ä–æ–¥—É–∫—Ç—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
 */
productSchema.statics.findDiscountedByPartner = function(partnerId) {
  return this.find({
    partner_id: partnerId,
    is_active: true,
    is_available: true,
    discount_price: { $exists: true, $gt: 0 }
  }).sort({ 
    discount_percentage: -1, 
    'ratings.avg_rating': -1 
  });
};

/**
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º (–¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤)
 * @param {ObjectId} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {Promise<Array>} - –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
 */
productSchema.statics.findLowStockByPartner = function(partnerId) {
  return this.find({
    partner_id: partnerId,
    category: 'store',
    is_active: true,
    stock_quantity: { $exists: true },
    $expr: { $lte: ['$stock_quantity', '$low_stock_threshold'] }
  }).sort({ stock_quantity: 1 });
};

// ============ –≠–ö–°–ü–û–†–¢ –ú–û–î–ï–õ–ò ============

const Product = mongoose.model('Product', productSchema);

export default Product;