// models/Product.model.js - –û–ë–™–ï–î–ò–ù–Å–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –°–í–Ø–ó–Ø–ú–ò –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú–ò –ú–ï–¢–û–î–ê–ú–ò üçΩÔ∏è
import mongoose from 'mongoose';

const productSchema = new mongoose.Schema({
  partner_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'PartnerProfile',
    required: true,
    index: true
  },
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
  title: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  description: {
    type: String,
    trim: true,
    maxlength: 500
  },
  price: {
    type: Number,
    required: true,
    min: 0
  },
  discount_price: {
    type: Number,
    min: 0,
    validate: {
      validator: function(value) {
        return !value || value < this.price;
      },
      message: '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã'
    }
  },
  image_url: {
    type: String
  },
  
  // üéØ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø (restaurant/store)
  category: {
    type: String,
    required: true,
    enum: ['restaurant', 'store']
  },
  
  // üÜï –ö–ê–¢–ï–ì–û–†–ò–Ø –ú–ï–ù–Æ –ü–ê–†–¢–ù–ï–†–ê (slug –∏–∑ menu_categories)
  subcategory: {
    type: String,
    required: true,
    trim: true,
    maxlength: 50,
    index: true
  },
  
  // üÜï ID –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–ù–Æ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤)
  menu_category_id: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    index: true
  },
  
  // –î–æ–±–∞–≤–∫–∏ (–∫–∞–∫ –±—ã–ª–æ - –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–æ)
  options_groups: [{
    name: {
      type: String,
      required: true,
      trim: true,
      maxlength: 50
    },
    description: {
      type: String,
      trim: true,
      maxlength: 200
    },
    required: {
      type: Boolean,
      default: false
    },
    multiple_choice: {
      type: Boolean,
      default: false
    },
    max_selections: {
      type: Number,
      default: 1
    },
    options: [{
      name: {
        type: String,
        required: true,
        trim: true,
        maxlength: 50
      },
      price: {
        type: Number,
        required: true,
        min: 0
      },
      is_available: {
        type: Boolean,
        default: true
      }
    }]
  }],
  
  // –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤)
  preparation_time: {
    type: Number,
    min: 0,
    default: function() {
      return this.category === 'restaurant' ? 15 : 0;
    }
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (–¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤)
  product_info: {
    brand: { type: String, trim: true },
    weight_grams: { type: Number, min: 0 },
    volume_ml: { type: Number, min: 0 },
    unit_count: { type: Number, min: 1, default: 1 },
    expiry_date: { type: Date },
    storage_conditions: { type: String, trim: true }
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ (–¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤)
  dish_info: {
    ingredients: [{ type: String, trim: true }],
    allergens: [{
      type: String,
      enum: [
        '–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '—è–π—Ü–∞', '–æ—Ä–µ—Ö–∏',
        '–∞—Ä–∞—Ö–∏—Å', '—Å–æ—è', '—Ä—ã–±–∞', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '—Å–µ–ª—å–¥–µ—Ä–µ–π',
        '–≥–æ—Ä—á–∏—Ü–∞', '–∫—É–Ω–∂—É—Ç', '—Å—É–ª—å—Ñ–∏—Ç—ã', '–ª—é–ø–∏–Ω', '–º–æ–ª–ª—é—Å–∫–∏'
      ]
    }],
    is_vegetarian: { type: Boolean, default: false },
    is_vegan: { type: Boolean, default: false },
    is_halal: { type: Boolean, default: false },
    is_spicy: { type: Boolean, default: false },
    spice_level: { type: Number, min: 0, max: 5, default: 0 },
    calories: { type: Number, min: 0 },
    portion_size: { type: String, trim: true }
  },
  
  // –ù–∞–ª–∏—á–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  is_active: { type: Boolean, default: true },
  is_available: { type: Boolean, default: true },
  stock_quantity: { type: Number, min: 0 },
  low_stock_threshold: { type: Number, min: 0, default: 5 },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
  sales_stats: {
    total_sold: { type: Number, default: 0 },
    weekly_sold: { type: Number, default: 0 },
    monthly_sold: { type: Number, default: 0 },
    total_revenue: { type: Number, default: 0 }
  },
  
  // –†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞
  ratings: {
    avg_rating: { type: Number, default: 0, min: 0, max: 5 },
    total_ratings: { type: Number, default: 0 }
  },
  
  // –ü–æ–∑–∏—Ü–∏—è –≤ –º–µ–Ω—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  sort_order: { type: Number, default: 0 },
  
  // –¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
  tags: [{ type: String, trim: true, lowercase: true }],
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  last_updated_by: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
}, { timestamps: true });

// ================ –ò–ù–î–ï–ö–°–´ ================
productSchema.index({ partner_id: 1, is_active: 1, is_available: 1 });
productSchema.index({ category: 1, subcategory: 1 });
productSchema.index({ partner_id: 1, menu_category_id: 1 });
productSchema.index({ price: 1 });
productSchema.index({ 'ratings.avg_rating': -1 });
productSchema.index({ 'sales_stats.total_sold': -1 });
productSchema.index({ sort_order: 1 });

// –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
productSchema.index({
  title: 'text',
  description: 'text',
  subcategory: 'text',
  'dish_info.ingredients': 'text',
  tags: 'text'
}, {
  weights: {
    title: 10,
    subcategory: 5,
    description: 3,
    'dish_info.ingredients': 2,
    tags: 1
  }
});

// ================ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø ================
productSchema.virtual('final_price').get(function() {
  return this.discount_price || this.price;
});
productSchema.virtual('has_discount').get(function() {
  return !!(this.discount_price && this.discount_price < this.price);
});
productSchema.virtual('discount_percentage').get(function() {
  if (this.has_discount) {
    return Math.round(((this.price - this.discount_price) / this.price) * 100);
  }
  return 0;
});
productSchema.virtual('is_low_stock').get(function() {
  return this.stock_quantity !== undefined &&
         this.stock_quantity <= this.low_stock_threshold;
});

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================
productSchema.methods.updateSalesStats = function(quantity, orderTotal) {
  this.sales_stats.total_sold += quantity;
  this.sales_stats.weekly_sold += quantity;
  this.sales_stats.monthly_sold += quantity;
  this.sales_stats.total_revenue += orderTotal;
  return this.save();
};
// –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
productSchema.methods.decreaseStock = function(quantity) {
  if (this.stock_quantity !== undefined) {
    this.stock_quantity = Math.max(0, this.stock_quantity - quantity);
    if (this.stock_quantity === 0) {
      this.is_available = false;
    }
  }
  return this.save();
};

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
productSchema.methods.increaseStock = function(quantity) {
  if (this.stock_quantity !== undefined) {
    this.stock_quantity += quantity;
    if (this.stock_quantity > 0 && !this.is_available) {
      this.is_available = true;
    }
  }
  return this.save();
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
productSchema.methods.updateRating = function(newRating) {
  const totalRatings = this.ratings.total_ratings;
  const currentAvg = this.ratings.avg_rating;
  this.ratings.total_ratings = totalRatings + 1;
  this.ratings.avg_rating = ((currentAvg * totalRatings) + newRating) / this.ratings.total_ratings;
  return this.save();
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É
productSchema.methods.addOptionToGroup = function(groupIndex, optionData) {
  if (this.options_groups[groupIndex]) {
    this.options_groups[groupIndex].options.push(optionData);
    return this.save();
  }
  throw new Error('–ì—Ä—É–ø–ø–∞ –æ–ø—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
};

// –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
productSchema.methods.removeOptionFromGroup = function(groupIndex, optionIndex) {
  if (this.options_groups[groupIndex] && this.options_groups[groupIndex].options[optionIndex]) {
    this.options_groups[groupIndex].options.splice(optionIndex, 1);
    return this.save();
  }
  throw new Error('–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
productSchema.methods.validateCategory = async function() {
  const PartnerProfile = mongoose.model('PartnerProfile');
  const partner = await PartnerProfile.findById(this.partner_id);
  if (!partner) throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
  const category = partner.menu_categories.find(cat => cat.slug === this.subcategory);
  if (!category) throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É —ç—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞');
  this.menu_category_id = category._id;
  return true;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
productSchema.methods.validateSelectedOptions = function(selectedOptions) {
  const errors = [];
  selectedOptions.forEach(selection => {
    const group = this.options_groups.find(g => g.name === selection.groupName);
    if (!group) {
      errors.push(`–ì—Ä—É–ø–ø–∞ –æ–ø—Ü–∏–π "${selection.groupName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }
    const option = group.options.find(o => o.name === selection.optionName);
    if (!option) {
      errors.push(`–û–ø—Ü–∏—è "${selection.optionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ "${selection.groupName}"`);
      return;
    }
    if (!option.is_available) {
      errors.push(`–û–ø—Ü–∏—è "${selection.optionName}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
  });
  return errors;
};

// –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –æ–ø—Ü–∏—è–º–∏
productSchema.methods.calculateTotalPrice = function(quantity = 1, selectedOptions = []) {
  let basePrice = this.final_price * quantity;
  let optionsPrice = 0;
  selectedOptions.forEach(selection => {
    const group = this.options_groups.find(g => g.name === selection.groupName);
    if (group) {
      const option = group.options.find(o => o.name === selection.optionName);
      if (option) {
        optionsPrice += option.price * quantity;
      }
    }
  });
  return basePrice + optionsPrice;
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================
productSchema.statics.findByPartnerCategory = function(partnerId, categorySlug, includeInactive = false) {
  const filter = { partner_id: partnerId, subcategory: categorySlug };
  if (!includeInactive) {
    filter.is_active = true;
    filter.is_available = true;
  }
  return this.find(filter).sort({ sort_order: 1, createdAt: -1 });
};

productSchema.statics.findByPartner = function(partnerId, includeInactive = false) {
  const filter = { partner_id: partnerId };
  if (!includeInactive) {
    filter.is_active = true;
    filter.is_available = true;
  }
  return this.find(filter).sort({ sort_order: 1, createdAt: -1 });
};

productSchema.statics.findByCategory = function(category, subcategory = null) {
  const filter = { category, is_active: true, is_available: true };
  if (subcategory) filter.subcategory = subcategory;
  return this.find(filter).sort({ 'ratings.avg_rating': -1 });
};

productSchema.statics.findPopular = function(limit = 10) {
  return this.find({ is_active: true, is_available: true })
    .sort({ 'sales_stats.total_sold': -1 })
    .limit(limit);
};

productSchema.statics.resetWeeklyStats = function() {
  return this.updateMany({}, { $set: { 'sales_stats.weekly_sold': 0 } });
};
productSchema.statics.resetMonthlyStats = function() {
  return this.updateMany({}, { $set: { 'sales_stats.monthly_sold': 0 } });
};

// ================= –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ =================
productSchema.statics.findWithFilters = function(filters = {}) {
  const query = { is_active: true, is_available: true };
  if (filters.partner_id) query.partner_id = filters.partner_id;
  if (filters.category) query.category = filters.category;
  if (filters.subcategory) query.subcategory = filters.subcategory;
  if (filters.min_price || filters.max_price) {
    query.price = {};
    if (filters.min_price) query.price.$gte = parseFloat(filters.min_price);
    if (filters.max_price) query.price.$lte = parseFloat(filters.max_price);
  }
  if (filters.min_rating) query['ratings.avg_rating'] = { $gte: parseFloat(filters.min_rating) };
  if (filters.max_preparation_time) query.preparation_time = { $lte: parseInt(filters.max_preparation_time) };
  if (filters.tags && filters.tags.length > 0) query.tags = { $in: filters.tags };
  if (filters.has_discount) query.discount_price = { $gt: 0 };
  if (filters.search) {
    query.$or = [
      { title: { $regex: filters.search, $options: 'i' } },
      { description: { $regex: filters.search, $options: 'i' } },
      { tags: { $in: [new RegExp(filters.search, 'i')] } }
    ];
  }
  let sort = {};
  switch (filters.sort) {
    case 'price_asc': sort = { price: 1 }; break;
    case 'price_desc': sort = { price: -1 }; break;
    case 'rating': sort = { 'ratings.avg_rating': -1 }; break;
    case 'popular': sort = { 'sales_stats.total_sold': -1 }; break;
    case 'newest': sort = { createdAt: -1 }; break;
    default: sort = { sort_order: 1, createdAt: -1 };
  }
  return this.find(query).sort(sort);
};

productSchema.statics.getPartnerProductStats = async function(partnerId) {
  const stats = await this.aggregate([
    { $match: { partner_id: mongoose.Types.ObjectId(partnerId) } },
    {
      $group: {
        _id: null,
        total_products: { $sum: 1 },
        active_products: { $sum: { $cond: [{ $and: ['$is_active', '$is_available'] }, 1, 0] } },
        avg_price: { $avg: '$price' },
        min_price: { $min: '$price' },
        max_price: { $max: '$price' },
        total_sold: { $sum: '$sales_stats.total_sold' },
        avg_rating: { $avg: '$ratings.avg_rating' },
        products_with_discounts: { $sum: { $cond: [{ $gt: ['$discount_price', 0] }, 1, 0] } }
      }
    }
  ]);
  return stats[0] || {
    total_products: 0,
    active_products: 0,
    avg_price: 0,
    min_price: 0,
    max_price: 0,
    total_sold: 0,
    avg_rating: 0,
    products_with_discounts: 0
  };
};

productSchema.statics.getTopProducts = function(criteria = 'rating', limit = 10, partnerId = null) {
  const match = { is_active: true, is_available: true };
  if (partnerId) match.partner_id = partnerId;
  let sort = {};
  switch (criteria) {
    case 'rating': sort = { 'ratings.avg_rating': -1, 'ratings.total_ratings': -1 }; break;
    case 'sales': sort = { 'sales_stats.total_sold': -1 }; break;
    case 'recent_sales': sort = { 'sales_stats.weekly_sold': -1 }; break;
    case 'newest': sort = { createdAt: -1 }; break;
    case 'price_low': sort = { price: 1 }; break;
    case 'price_high': sort = { price: -1 }; break;
    default: sort = { 'ratings.avg_rating': -1 };
  }
  return this.find(match).sort(sort).limit(limit)
    .populate('partner_id', 'business_name category location.address');
};

productSchema.statics.getPopularTags = async function(partnerId = null, limit = 20) {
  const match = { is_active: true, is_available: true };
  if (partnerId) match.partner_id = partnerId;
  const tags = await this.aggregate([
    { $match: match },
    { $unwind: '$tags' },
    { $group: { _id: '$tags', count: { $sum: 1 }, avg_price: { $avg: '$price' } } },
    { $sort: { count: -1 } },
    { $limit: limit }
  ]);
  return tags.map(tag => ({
    name: tag._id,
    count: tag.count,
    avg_price: Math.round(tag.avg_price * 100) / 100
  }));
};

productSchema.statics.bulkUpdateStatus = function(productIds, updates) {
  const allowedUpdates = {
    is_active: updates.is_active,
    is_available: updates.is_available,
    sort_order: updates.sort_order
  };
  Object.keys(allowedUpdates).forEach(key => {
    if (allowedUpdates[key] === undefined) delete allowedUpdates[key];
  });
  return this.updateMany({ _id: { $in: productIds } }, { $set: allowedUpdates });
};

productSchema.statics.getExpiringDiscounts = function(daysAhead = 7) {
  const futureDate = new Date();
  futureDate.setDate(futureDate.getDate() + daysAhead);
  return this.find({
    is_active: true,
    is_available: true,
    discount_price: { $gt: 0 },
    'discount_info.end_date': { $gte: new Date(), $lte: futureDate }
  }).populate('partner_id', 'business_name contact_phone');
};

productSchema.statics.getMenuRecommendations = async function(partnerId) {
  const products = await this.find({ partner_id: partnerId });
  const activeProducts = products.filter(p => p.is_active && p.is_available);
  const recommendations = [];
  if (activeProducts.length < 5) {
    recommendations.push({ type: 'content', priority: 'high', message: '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –±–ª—é–¥ –≤ –º–µ–Ω—é (–º–∏–Ω–∏–º—É–º 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π)', action: 'add_products' });
  }
  const productsWithoutImages = activeProducts.filter(p => !p.image_url);
  if (productsWithoutImages.length > 0) {
    recommendations.push({ type: 'visual', priority: 'high', message: `${productsWithoutImages.length} –±–ª—é–¥ –±–µ–∑ —Ñ–æ—Ç–æ`, action: 'add_images', affected_products: productsWithoutImages.map(p => p._id) });
  }
  const productsWithShortDescriptions = activeProducts.filter(p => !p.description || p.description.length < 20);
  if (productsWithShortDescriptions.length > 0) {
    recommendations.push({ type: 'content', priority: 'medium', message: `${productsWithShortDescriptions.length} –±–ª—é–¥ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏`, action: 'improve_descriptions', affected_products: productsWithShortDescriptions.map(p => p._id) });
  }
  const productsWithoutTags = activeProducts.filter(p => !p.tags || p.tags.length === 0);
  if (productsWithoutTags.length > 0) {
    recommendations.push({ type: 'seo', priority: 'low', message: `${productsWithoutTags.length} –±–ª—é–¥ –±–µ–∑ —Ç–µ–≥–æ–≤`, action: 'add_tags', affected_products: productsWithoutTags.map(p => p._id) });
  }
  const prices = activeProducts.map(p => p.final_price);
  if (prices.length > 0) {
    const priceRange = Math.max(...prices) - Math.min(...prices);
    if (priceRange < 5) {
      recommendations.push({ type: 'pricing', priority: 'low', message: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞', action: 'review_pricing' });
    }
  }
  return recommendations;
};

productSchema.statics.duplicateProduct = async function(productId, partnerId, newTitle = null) {
  const originalProduct = await this.findById(productId);
  if (!originalProduct) throw new Error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
  const duplicatedProduct = new this({
    ...originalProduct.toObject(),
    _id: undefined,
    partner_id: partnerId,
    title: newTitle || `${originalProduct.title} (–∫–æ–ø–∏—è)`,
    sales_stats: { total_sold: 0, weekly_sold: 0, monthly_sold: 0 },
    ratings: { avg_rating: 0, total_ratings: 0 },
    createdAt: new Date(),
    updatedAt: new Date()
  });
  return duplicatedProduct.save();
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ JSON
productSchema.set('toJSON', { virtuals: true });
productSchema.set('toObject', { virtuals: true });

export default mongoose.model('Product', productSchema);
