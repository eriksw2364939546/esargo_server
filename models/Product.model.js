// models/Product.model.js - –ë–ï–ó–û–ü–ê–°–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –° –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨–Æ

import mongoose from 'mongoose';

const productSchema = new mongoose.Schema({
  partner_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'PartnerProfile',
    required: true,
    index: true
  },
  
  // ============ –ë–ê–ó–û–í–´–ï –ü–û–õ–Ø (–ù–ï –ú–ï–ù–Ø–ï–ú!) ============
  title: {
    type: String,
    required: true,
    trim: true,
    maxlength: 150 // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
  },
  description: {
    type: String,
    trim: true,
    maxlength: 800 // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
  },
  price: {
    type: Number,
    required: true,
    min: 0
  },
  discount_price: {
    type: Number,
    min: 0,
    validate: {
      validator: function(value) {
        return !value || value < this.price;
      },
      message: '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã'
    }
  },
  image_url: { type: String },
  category: {
    type: String,
    required: true,
    enum: ['restaurant', 'store']
  },
  subcategory: {
    type: String,
    required: true,
    trim: true,
    maxlength: 50,
    index: true
  },
  menu_category_id: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    index: true
  },
  
  // ============ –û–ü–¶–ò–ò (–ù–ï –ú–ï–ù–Ø–ï–ú!) ============
  options_groups: [{
    name: {
      type: String,
      required: true,
      trim: true,
      maxlength: 50
    },
    description: {
      type: String,
      trim: true,
      maxlength: 200
    },
    required: { type: Boolean, default: false },
    multiple_choice: { type: Boolean, default: false },
    max_selections: { type: Number, default: 1 },
    options: [{
      name: {
        type: String,
        required: true,
        trim: true,
        maxlength: 50
      },
      price: {
        type: Number,
        required: true,
        min: 0
      },
      is_available: { type: Boolean, default: true }
    }]
  }],
  
  preparation_time: {
    type: Number,
    min: 0,
    default: function() {
      return this.category === 'restaurant' ? 15 : 0;
    }
  },
  
  // ============ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï (–†–ê–°–®–ò–†–Ø–ï–ú –û–°–¢–û–†–û–ñ–ù–û) ============
  product_info: {
    brand: { type: String, trim: true },
    weight_grams: { type: Number, min: 0 },
    volume_ml: { type: Number, min: 0 },
    unit_count: { type: Number, min: 1, default: 1 },
    expiry_date: { type: Date },
    storage_conditions: { type: String, trim: true },
    
    // üÜï –ù–û–í–´–ï –§–†–ê–ù–¶–£–ó–°–ö–ò–ï –ü–û–õ–Ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    packaging_type: {
      type: String,
      enum: ['vrac', 'emball√©', 'sous_vide', 'conserve', 'frais', 'surgel√©', 'sec']
    },
    origin_country: { type: String, default: 'France', maxlength: 50 },
    barcode_ean13: { type: String, match: /^\d{13}$/ },
    barcode_ean8: { type: String, match: /^\d{8}$/ }
  },
  
  // ============ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–õ–Æ–î–ï (–û–°–¢–û–†–û–ñ–ù–û –†–ê–°–®–ò–†–Ø–ï–ú) ============
  dish_info: {
    ingredients: [{ type: String, trim: true }],
    
    // ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä—É—Å—Å–∫–∏–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã
    allergens: [{
      type: String,
      enum: [
        // –°—Ç–∞—Ä—ã–µ —Ä—É—Å—Å–∫–∏–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        '–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '—è–π—Ü–∞', '–æ—Ä–µ—Ö–∏',
        '–∞—Ä–∞—Ö–∏—Å', '—Å–æ—è', '—Ä—ã–±–∞', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '—Å–µ–ª—å–¥–µ—Ä–µ–π',
        '–≥–æ—Ä—á–∏—Ü–∞', '–∫—É–Ω–∂—É—Ç', '—Å—É–ª—å—Ñ–∏—Ç—ã', '–ª—é–ø–∏–Ω', '–º–æ–ª–ª—é—Å–∫–∏',
        
        // üÜï –ù–æ–≤—ã–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ
        'gluten', 'lait', '≈ìufs', 'fruits_√†_coque',
        'arachides', 'soja', 'poissons', 'crustac√©s', 'c√©leri',
        'moutarde', 'graines_de_s√©same', 'anhydride_sulfureux_et_sulfites',
        'lupin', 'mollusques',
        
        // üÜï –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ (–∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è)  
        'eggs', 'fish', 'peanuts', 'soybeans', 'milk', 'tree_nuts',
        'celery', 'mustard', 'sesame_seeds', 'sulfur_dioxide_and_sulfites'
      ]
    }],
    
    // ‚úÖ –°–¢–ê–†–´–ï –ë–£–õ–ï–í–´ –§–õ–ê–ì–ò (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    is_vegetarian: { type: Boolean, default: false },
    is_vegan: { type: Boolean, default: false },
    is_halal: { type: Boolean, default: false },
    is_spicy: { type: Boolean, default: false },
    
    // ‚úÖ –ì–ò–ë–ö–ò–ô spice_level (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —á–∏—Å–ª–æ –ò —Å—Ç—Ä–æ–∫—É)
    spice_level: {
      type: mongoose.Schema.Types.Mixed,
      validate: {
        validator: function(value) {
          // –ß–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç (—Å—Ç–∞—Ä—ã–π)
          if (typeof value === 'number') {
            return Number.isInteger(value) && value >= 0 && value <= 5;
          }
          // –°—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–æ–≤—ã–π)
          if (typeof value === 'string') {
            const validLevels = [
              'aucun', 'doux', 'moyen', 'piquant', 'tr√®s_piquant', 'extr√™me',
              'none', 'mild', 'medium', 'hot', 'very_hot', 'extreme',
              '–Ω–µ—Ç', '—Å–ª–∞–±–æ', '—Å—Ä–µ–¥–Ω–µ', '–æ—Å—Ç—Ä–æ', '–æ—á–µ–Ω—å_–æ—Å—Ç—Ä–æ', '—ç–∫—Å—Ç—Ä–∏–º'
            ];
            return validLevels.includes(value.toLowerCase());
          }
          return value === null || value === undefined;
        },
        message: 'spice_level: —á–∏—Å–ª–æ 0-5 –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ (doux/mild/—Å—Ä–µ–¥–Ω–µ)'
      },
      default: 0
    },
    
    calories: { type: Number, min: 0 },
    portion_size: { type: String, trim: true },
    
    // üÜï –ù–û–í–´–ï –§–†–ê–ù–¶–£–ó–°–ö–ò–ï –ü–û–õ–Ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    cuisine_type: {
      type: String,
      enum: [
        'arm√©nienne', 'fran√ßaise_traditionnelle', 'italienne', 'japonaise',
        'chinoise', 'tha√Ølandaise', 'vietnamienne', 'indienne', 'moyen_orientale',
        'armenian', 'french', 'italian', 'japanese', 'chinese', 'mediterranean'
      ]
    },
    
    cooking_method: {
      type: String,
      enum: [
        'grill√©', 'r√¥ti', 'brais√©', 'saut√©', 'poch√©', 'frit', 'cru',
        'grilled', 'roasted', 'braised', 'saut√©ed', 'fried', 'raw'
      ]
    },
    
    may_contain_traces: [{ 
      type: String,
      enum: [
        '–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '—è–π—Ü–∞', '–æ—Ä–µ—Ö–∏',
        'gluten', 'lait', '≈ìufs', 'fruits_√†_coque'
      ]
    }],
    
    // –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
    nutrition: {
      calories_per_100g: { type: Number, min: 0 },
      protein_g: { type: Number, min: 0 },
      carbs_g: { type: Number, min: 0 },
      fat_g: { type: Number, min: 0 },
      fiber_g: { type: Number, min: 0 },
      sugar_g: { type: Number, min: 0 },
      salt_g: { type: Number, min: 0 }
    }
  },
  
  // ============ –ù–û–í–´–ï –§–†–ê–ù–¶–£–ó–°–ö–ò–ï –†–ê–°–®–ò–†–ï–ù–ò–Ø (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û) ============
  
  // üÜï –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  multilingual: {
    title_fr: { type: String, trim: true, maxlength: 150 },
    title_en: { type: String, trim: true, maxlength: 150 },
    title_ru: { type: String, trim: true, maxlength: 150 },
    description_fr: { type: String, trim: true, maxlength: 800 },
    description_en: { type: String, trim: true, maxlength: 800 },
    description_ru: { type: String, trim: true, maxlength: 800 }
  },
  
  // üÜï –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –Ω–∞–ª–æ–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  tax_info: {
    tva_rate: {
      type: Number,
      enum: [0, 5.5, 10, 20],
      default: function() {
        return this.category === 'restaurant' ? 5.5 : 20;
      }
    },
    price_includes_tva: { type: Boolean, default: true },
    tva_amount: { type: Number, default: 0 }
  },
  
  // üÜï –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  availability_schedule: {
    breakfast: { type: Boolean, default: false },
    lunch: { type: Boolean, default: true },
    dinner: { type: Boolean, default: true },
    late_night: { type: Boolean, default: false }
  },
  
  // üÜï –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏ (—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã)
  dietary_labels: [{
    type: String,
    enum: [
      // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ
      'v√©g√©tarien', 'v√©g√©talien', 'halal', 'casher', 'sans_gluten', 
      'sans_lactose', 'bio', 'aop', 'igp', 'label_rouge',
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
      'vegetarian', 'vegan', 'organic', 'gluten_free', 'lactose_free',
      'keto', 'paleo', 'raw',
      // –†—É—Å—Å–∫–∏–µ
      '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π', '–≤–µ–≥–∞–Ω—Å–∫–∏–π', '—Ö–∞–ª—è–ª—å', '–∫–æ—à–µ—Ä–Ω—ã–π', '–±–µ–∑_–≥–ª—é—Ç–µ–Ω–∞'
    ]
  }],
  
  // ============ –°–¢–ê–†–´–ï –ü–û–õ–Ø (–ù–ï –ú–ï–ù–Ø–ï–ú!) ============
  is_active: { type: Boolean, default: true },
  is_available: { type: Boolean, default: true },
  stock_quantity: { type: Number, min: 0 },
  low_stock_threshold: { type: Number, min: 0, default: 5 },
  
  sales_stats: {
    total_sold: { type: Number, default: 0 },
    weekly_sold: { type: Number, default: 0 },
    monthly_sold: { type: Number, default: 0 },
    total_revenue: { type: Number, default: 0 }
  },
  
  ratings: {
    avg_rating: { type: Number, default: 0, min: 0, max: 5 },
    total_ratings: { type: Number, default: 0 }
  },
  
  sort_order: { type: Number, default: 0 },
  tags: [{ type: String, trim: true, lowercase: true }],
  last_updated_by: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
  
}, { timestamps: true });

// ============ –ò–ù–î–ï–ö–°–´ (–∫–∞–∫ –±—ã–ª–æ) ============
productSchema.index({ partner_id: 1, is_active: 1, is_available: 1 });
productSchema.index({ category: 1, subcategory: 1 });
productSchema.index({ price: 1 });
productSchema.index({ 'ratings.avg_rating': -1 });

// ============ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø (–∫–∞–∫ –±—ã–ª–æ) ============
productSchema.virtual('final_price').get(function() {
  return this.discount_price || this.price;
});

productSchema.virtual('has_discount').get(function() {
  return !!this.discount_price && this.discount_price < this.price;
});

// ============ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ============

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è spice_level –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
productSchema.methods.getSpiceLevelDisplay = function(language = 'ru') {
  const value = this.dish_info?.spice_level;
  
  if (typeof value === 'number') {
    const levelMaps = {
      ru: ['–Ω–µ—Ç', '—Å–ª–∞–±–æ', '—Å—Ä–µ–¥–Ω–µ', '–æ—Å—Ç—Ä–æ', '–æ—á–µ–Ω—å –æ—Å—Ç—Ä–æ', '—ç–∫—Å—Ç—Ä–∏–º'],
      fr: ['aucun', 'doux', 'moyen', 'piquant', 'tr√®s piquant', 'extr√™me'],
      en: ['none', 'mild', 'medium', 'hot', 'very hot', 'extreme']
    };
    return levelMaps[language]?.[value] || value;
  }
  
  return value || '–Ω–µ—Ç';
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
productSchema.methods.getLocalizedTitle = function(language = 'ru') {
  if (this.multilingual) {
    const field = `title_${language}`;
    return this.multilingual[field] || this.title;
  }
  return this.title;
};

/**
 * –†–∞—Å—á–µ—Ç —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –Ω–∞–ª–æ–≥–æ–≤
 */
productSchema.methods.calculateTaxes = function() {
  const tvaRate = this.tax_info?.tva_rate || (this.category === 'restaurant' ? 5.5 : 20);
  const priceIncludesTva = this.tax_info?.price_includes_tva !== false;
  
  if (priceIncludesTva) {
    const priceWithoutTva = this.final_price / (1 + tvaRate / 100);
    const tvaAmount = this.final_price - priceWithoutTva;
    return {
      price_with_tva: this.final_price,
      price_without_tva: Math.round(priceWithoutTva * 100) / 100,
      tva_amount: Math.round(tvaAmount * 100) / 100,
      tva_rate: tvaRate
    };
  } else {
    const tvaAmount = this.final_price * (tvaRate / 100);
    return {
      price_without_tva: this.final_price,
      price_with_tva: Math.round((this.final_price + tvaAmount) * 100) / 100,
      tva_amount: Math.round(tvaAmount * 100) / 100,
      tva_rate: tvaRate
    };
  }
};

// ============ PRE HOOKS (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è) ============
productSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ù–î–° –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω tax_info
  if (this.tax_info && this.tax_info.tva_rate) {
    const taxes = this.calculateTaxes();
    this.tax_info.tva_amount = taxes.tva_amount;
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ title
  if (this.title && !this.multilingual?.title_ru) {
    if (!this.multilingual) this.multilingual = {};
    
    if (/[–∞-—è—ë]/i.test(this.title)) {
      this.multilingual.title_ru = this.title;
    } else if (/[√†√¢√§√ß√©√®√™√´√Ø√Æ√¥√π√ª√º√ø√±√¶≈ì]/i.test(this.title)) {
      this.multilingual.title_fr = this.title;
    } else {
      this.multilingual.title_en = this.title;
    }
  }
  
  next();
});

// ============ –°–¢–ê–†–´–ï –ú–ï–¢–û–î–´ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ============
productSchema.methods.validateCategory = async function() {
  const PartnerProfile = mongoose.model('PartnerProfile');
  const partner = await PartnerProfile.findById(this.partner_id);
  if (!partner) throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
  const category = partner.menu_categories.find(cat => cat.slug === this.subcategory);
  if (!category) throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É —ç—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞');
  this.menu_category_id = category._id;
  return true;
};

productSchema.methods.calculateTotalPrice = function(quantity = 1, selectedOptions = []) {
  let basePrice = this.final_price * quantity;
  let optionsPrice = 0;
  
  selectedOptions.forEach(selection => {
    const group = this.options_groups.find(g => g.name === selection.groupName);
    if (group) {
      const option = group.options.find(o => o.name === selection.optionName);
      if (option && option.is_available) {
        optionsPrice += option.price * quantity;
      }
    }
  });
  
  const totalPrice = basePrice + optionsPrice;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–ª–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
  if (this.tax_info?.tva_rate) {
    const taxes = this.calculateTaxes();
    return {
      base_price: basePrice,
      options_price: optionsPrice,
      total_price: totalPrice,
      tax_info: taxes,
      currency: 'EUR'
    };
  }
  
  return totalPrice;
};

// ============ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ) ============

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
productSchema.statics.findWithFrenchFilters = function(partnerId, filters = {}) {
  const query = { partner_id: partnerId, is_active: true };
  
  // –°—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  if (filters.category_slug) {
    query.subcategory = filters.category_slug;
  }
  
  if (filters.price_min || filters.price_max) {
    query.price = {};
    if (filters.price_min) query.price.$gte = filters.price_min;
    if (filters.price_max) query.price.$lte = filters.price_max;
  }
  
  // üÜï –ù–æ–≤—ã–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (filters.dietary_labels && filters.dietary_labels.length > 0) {
    query.dietary_labels = { $in: filters.dietary_labels };
  }
  
  if (filters.allergen_free && filters.allergen_free.length > 0) {
    query['dish_info.allergens'] = { $nin: filters.allergen_free };
  }
  
  if (filters.cuisine_type) {
    query['dish_info.cuisine_type'] = filters.cuisine_type;
  }
  
  if (filters.spice_level_max !== undefined) {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —á–∏—Å–ª–æ–≤–æ–π –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (typeof filters.spice_level_max === 'number') {
      query['dish_info.spice_level'] = { $lte: filters.spice_level_max };
    } else {
      const spiceLevels = ['aucun', 'doux', 'moyen', 'piquant', 'tr√®s_piquant', 'extr√™me'];
      const maxIndex = spiceLevels.indexOf(filters.spice_level_max);
      if (maxIndex >= 0) {
        query.$or = [
          { 'dish_info.spice_level': { $lte: maxIndex } },
          { 'dish_info.spice_level': { $in: spiceLevels.slice(0, maxIndex + 1) } }
        ];
      }
    }
  }
  
  if (filters.availability_time) {
    query[`availability_schedule.${filters.availability_time}`] = true;
  }
  
  if (!filters.include_unavailable) {
    query.is_available = true;
  }
  
  return this.find(query);
};

/**
 * –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
 */
productSchema.statics.findByPartnerCategory = function(partnerId, categorySlug, includeInactive = false) {
  const filter = { 
    partner_id: partnerId, 
    subcategory: categorySlug 
  };
  
  if (!includeInactive) {
    filter.is_active = true;
    filter.is_available = true;
  }
  
  return this.find(filter);
};

productSchema.statics.findByPartner = function(partnerId, includeInactive = false) {
  const filter = { partner_id: partnerId };
  
  if (!includeInactive) {
    filter.is_active = true;
    filter.is_available = true;
  }
  
  return this.find(filter);
};

export default mongoose.model('Product', productSchema);