// models/CourierProfile.model.js - –ò–°–ü–†–ê–í–õ–ï–ù–ê –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è MongoDB
import mongoose from 'mongoose';

const courierProfileSchema = new mongoose.Schema({
  user_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    unique: true
  },
  
  // –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  first_name: {
    type: String,
    required: true,
    trim: true
  },
  last_name: {
    type: String,
    required: true,
    trim: true
  },
  phone: {
    type: String,
    required: true,
    trim: true
  },
  avatar_url: {
    type: String
  },
  
  // –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–∏–∑ –º–∞–∫–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
  vehicle_type: {
    type: String,
    required: true,
    enum: ['bike', 'motorbike', 'car']
  },
  
  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ GeoJSON –¥–ª—è MongoDB
  location: {
    type: {
      type: String,
      enum: ['Point'],
      default: 'Point'
    },
    coordinates: {
      type: [Number], // [longitude, latitude] - –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!
      default: [0, 0]
    },
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    last_updated: {
      type: Date,
      default: Date.now
    }
  },
  
  // –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  documents: {
    id_card_url: {
      type: String,
      required: true
    },
    driver_license_url: {
      type: String // –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è motorbike –∏ car
    },
    insurance_url: {
      type: String // –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è motorbike –∏ car
    },
    vehicle_registration_url: {
      type: String // –î–ª—è car
    },
    bank_rib_url: {
      type: String,
      required: true
    }
  },
  
  // –°—Ç–∞—Ç—É—Å—ã —Ä–∞–±–æ—Ç—ã
  is_available: {
    type: Boolean,
    default: false // On-e/Off-e –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
  },
  is_online: {
    type: Boolean,
    default: false // –í —Å–µ—Ç–∏ —Å–µ–π—á–∞—Å
  },
  is_approved: {
    type: Boolean,
    default: true // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑ –∑–∞—è–≤–∫–∏
  },
  
  // –†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã –≤ –∫–º
  work_radius: {
    type: Number,
    default: 5,
    min: 1,
    max: 20
  },
  
  // –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
  application_status: {
    type: String,
    enum: ['pending', 'approved', 'rejected', 'blocked'],
    default: 'approved' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–æ–±—Ä–µ–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  },
  rejection_reason: {
    type: String
  },
  approved_by: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'AdminUser'
  },
  approved_at: {
    type: Date,
    default: Date.now
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫
  earnings: {
    total_earned: {
      type: Number,
      default: 0
    },
    weekly_earned: {
      type: Number,
      default: 0
    },
    monthly_earned: {
      type: Number,
      default: 0
    },
    completed_orders: {
      type: Number,
      default: 0
    },
    cancelled_orders: {
      type: Number,
      default: 0
    }
  },
  
  // –†–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞
  ratings: {
    avg_rating: {
      type: Number,
      default: 0,
      min: 0,
      max: 5
    },
    total_ratings: {
      type: Number,
      default: 0
    }
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
  work_stats: {
    total_distance_km: {
      type: Number,
      default: 0
    },
    avg_delivery_time: {
      type: Number,
      default: 0 // –≤ –º–∏–Ω—É—Ç–∞—Ö
    },
    best_delivery_time: {
      type: Number,
      default: 0 // –≤ –º–∏–Ω—É—Ç–∞—Ö
    },
    total_working_hours: {
      type: Number,
      default: 0
    }
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  notifications: {
    new_orders: {
      type: Boolean,
      default: true
    },
    order_updates: {
      type: Boolean,
      default: true
    },
    payment_received: {
      type: Boolean,
      default: true
    }
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  last_activity: {
    type: Date,
    default: Date.now
  },
  last_order_at: {
    type: Date
  },
  
  // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫—É—Ä—å–µ—Ä
  is_blocked: {
    type: Boolean,
    default: false
  },
  blocked_reason: {
    type: String
  },
  blocked_until: {
    type: Date
  }
}, {
  timestamps: true
});

// ================ –ò–ù–î–ï–ö–°–´ ================

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ user_id
courierProfileSchema.index({ user_id: 1 });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
courierProfileSchema.index({ 
  is_available: 1, 
  is_approved: 1, 
  is_online: 1,
  is_blocked: 1 
});

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–µ–æ–∏–Ω–¥–µ–∫—Å –¥–ª—è MongoDB GeoJSON
courierProfileSchema.index({ location: '2dsphere' });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
courierProfileSchema.index({ application_status: 1 });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
courierProfileSchema.index({ 'ratings.avg_rating': -1 });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
courierProfileSchema.index({ last_activity: -1 });

// ================ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø ================

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
courierProfileSchema.virtual('full_name').get(function() {
  return `${this.first_name} ${this.last_name}`;
});

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ GeoJSON
courierProfileSchema.methods.updateLocation = function(lat, lng) {
  this.location = {
    type: 'Point',
    coordinates: [lng, lat], // [longitude, latitude] - –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –¥–ª—è MongoDB!
    last_updated: new Date()
  };
  this.last_activity = new Date();
  
  return this.save();
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (On-e/Off-e)
courierProfileSchema.methods.toggleAvailability = function() {
  this.is_available = !this.is_available;
  this.last_activity = new Date();
  
  // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∏–ª –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Ç–æ –∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å —Ç–æ–∂–µ
  if (!this.is_available) {
    this.is_online = false;
  }
  
  return this.save();
};

// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
courierProfileSchema.methods.setOnlineStatus = function(isOnline) {
  this.is_online = isOnline;
  this.last_activity = new Date();
  
  // –ï—Å–ª–∏ –≤—ã—à–µ–ª –∏–∑ –æ–Ω–ª–∞–π–Ω–∞, —Ç–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è
  if (!isOnline) {
    this.is_available = false;
  }
  
  return this.save();
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
courierProfileSchema.methods.approve = function(adminId) {
  this.is_approved = true;
  this.application_status = 'approved';
  this.approved_by = adminId;
  this.approved_at = new Date();
  this.rejection_reason = undefined;
  
  return this.save();
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
courierProfileSchema.methods.reject = function(reason) {
  this.is_approved = false;
  this.application_status = 'rejected';
  this.rejection_reason = reason;
  this.approved_by = undefined;
  this.approved_at = undefined;
  
  return this.save();
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞
courierProfileSchema.methods.block = function(reason, duration) {
  this.is_blocked = true;
  this.blocked_reason = reason;
  this.is_available = false;
  this.is_online = false;
  
  if (duration) {
    this.blocked_until = new Date(Date.now() + duration);
  }
  
  return this.save();
};

// –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞
courierProfileSchema.methods.unblock = function() {
  this.is_blocked = false;
  this.blocked_reason = undefined;
  this.blocked_until = undefined;
  
  return this.save();
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
courierProfileSchema.methods.updateRating = function(newRating) {
  const totalRatings = this.ratings.total_ratings;
  const currentAvg = this.ratings.avg_rating;
  
  this.ratings.total_ratings = totalRatings + 1;
  this.ratings.avg_rating = ((currentAvg * totalRatings) + newRating) / this.ratings.total_ratings;
  
  return this.save();
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
courierProfileSchema.methods.addEarnings = function(amount) {
  this.earnings.total_earned += amount;
  this.earnings.weekly_earned += amount;
  this.earnings.monthly_earned += amount;
  this.earnings.completed_orders += 1;
  this.last_order_at = new Date();
  
  return this.save();
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
courierProfileSchema.statics.findAvailableNearby = function(lat, lng, radiusKm = 5) {
  return this.find({
    location: {
      $near: {
        $geometry: {
          type: 'Point',
          coordinates: [lng, lat] // [longitude, latitude]
        },
        $maxDistance: radiusKm * 1000 // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–º –≤ –º–µ—Ç—Ä—ã
      }
    },
    is_available: true,
    is_approved: true,
    is_online: true,
    is_blocked: false
  }).sort({ 'ratings.avg_rating': -1 });
};

// ================ –ù–ê–°–¢–†–û–ô–ö–ò JSON ================

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ JSON
courierProfileSchema.set('toJSON', { virtuals: true });
courierProfileSchema.set('toObject', { virtuals: true });

export default mongoose.model('CourierProfile', courierProfileSchema);