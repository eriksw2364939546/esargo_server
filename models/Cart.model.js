// models/Cart.model.js - –ú–æ–¥–µ–ª—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫
import mongoose from 'mongoose';

const cartSchema = new mongoose.Schema({
  // –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  customer_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  
  // ID —Å–µ—Å—Å–∏–∏ (–¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ express-session)
  session_id: {
    type: String,
    required: true,
    index: true
  },
  
  // –†–µ—Å—Ç–æ—Ä–∞–Ω (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞)
  restaurant_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'PartnerProfile',
    required: true,
    index: true
  },
  
  restaurant_info: {
    name: {
      type: String,
      required: true
    },
    category: {
      type: String,
      required: true
    },
    delivery_fee: {
      type: Number,
      default: 0,
      min: 0
    },
    min_order_amount: {
      type: Number,
      default: 0,
      min: 0
    }
  },
  
  // –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
  items: [{
    product_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Product',
      required: true
    },
    
    // –ö–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É)
    product_snapshot: {
      title: {
        type: String,
        required: true
      },
      price: {
        type: Number,
        required: true,
        min: 0
      },
      image_url: String,
      category: String
    },
    
    quantity: {
      type: Number,
      required: true,
      min: 1,
      default: 1
    },
    
    // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ (–¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ - —Ä–∞–∑–º–µ—Ä, –¥–æ–±–∞–≤–∫–∏ –∏ —Ç.–¥.)
    selected_options: [{
      group_name: {
        type: String,
        required: true
      },
      option_name: {
        type: String,
        required: true
      },
      option_price: {
        type: Number,
        required: true,
        min: 0
      }
    }],
    
    // –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É
    special_requests: {
      type: String,
      trim: true,
      maxlength: 200
    },
    
    // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    item_price: {
      type: Number,
      required: true,
      min: 0
    },
    
    options_price: {
      type: Number,
      default: 0,
      min: 0
    },
    
    total_item_price: {
      type: Number,
      required: true,
      min: 0
    },
    
    added_at: {
      type: Date,
      default: Date.now
    }
  }],
  
  // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  pricing: {
    subtotal: {
      type: Number,
      default: 0,
      min: 0
    },
    delivery_fee: {
      type: Number,
      default: 0,
      min: 0
    },
    service_fee: {
      type: Number,
      default: 0,
      min: 0
    },
    discount_amount: {
      type: Number,
      default: 0,
      min: 0
    },
    total_price: {
      type: Number,
      default: 0,
      min: 0
    }
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ (–µ—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª–∞—Å—å)
  delivery_info: {
    address: String,
    lat: Number,
    lng: Number,
    distance_km: Number,
    estimated_delivery_time: Number, // –≤ –º–∏–Ω—É—Ç–∞—Ö
    calculated_at: Date
  },
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  status: {
    type: String,
    enum: ['active', 'abandoned', 'converted_to_order'],
    default: 'active'
  },
  
  last_activity: {
    type: Date,
    default: Date.now,
    index: true
  },
  
  expires_at: {
    type: Date,
    default: () => new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 —á–∞—Å–∞
    index: { expireAfterSeconds: 0 }
  }
}, {
  timestamps: true
});

// ================ –ò–ù–î–ï–ö–°–´ ================
cartSchema.index({ customer_id: 1, status: 1 });
cartSchema.index({ session_id: 1 });
cartSchema.index({ restaurant_id: 1 });
cartSchema.index({ last_activity: -1 });
cartSchema.index({ expires_at: 1 });

// –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cartSchema.index({ customer_id: 1, status: 1, last_activity: -1 });

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================

/**
 * üßÆ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
 */
cartSchema.methods.recalculatePricing = function() {
  // –ü–æ–¥—Å—á–µ—Ç subtotal –∏–∑ –≤—Å–µ—Ö items
  this.pricing.subtotal = this.items.reduce((sum, item) => {
    return sum + item.total_item_price;
  }, 0);
  
  // –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞)
  this.pricing.service_fee = Math.round(this.pricing.subtotal * 0.02 * 100) / 100;
  
  // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
  this.pricing.total_price = 
    this.pricing.subtotal + 
    this.pricing.delivery_fee + 
    this.pricing.service_fee - 
    this.pricing.discount_amount;
  
  return this.pricing;
};

/**
 * ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
 */
cartSchema.methods.addItem = function(itemData) {
  const {
    product_id,
    product_snapshot,
    quantity,
    selected_options = [],
    special_requests = ''
  } = itemData;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ü–∏–π
  const options_price = selected_options.reduce((sum, option) => {
    return sum + option.option_price;
  }, 0);
  
  // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (–ø—Ä–æ–¥—É–∫—Ç + –æ–ø—Ü–∏–∏)
  const item_price = product_snapshot.price;
  const total_item_price = (item_price + options_price) * quantity;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä —Å —Ç–µ–º–∏ –∂–µ –æ–ø—Ü–∏—è–º–∏
  const existingItemIndex = this.items.findIndex(item => {
    if (item.product_id.toString() !== product_id.toString()) return false;
    if (item.special_requests !== special_requests) return false;
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
    if (item.selected_options.length !== selected_options.length) return false;
    
    return item.selected_options.every(existingOption => {
      return selected_options.some(newOption => 
        newOption.group_name === existingOption.group_name &&
        newOption.option_name === existingOption.option_name
      );
    });
  });
  
  if (existingItemIndex !== -1) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
    this.items[existingItemIndex].quantity += quantity;
    this.items[existingItemIndex].total_item_price = 
      (this.items[existingItemIndex].item_price + this.items[existingItemIndex].options_price) * 
      this.items[existingItemIndex].quantity;
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    this.items.push({
      product_id,
      product_snapshot,
      quantity,
      selected_options,
      special_requests,
      item_price,
      options_price,
      total_item_price,
      added_at: new Date()
    });
  }
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  this.recalculatePricing();
  this.last_activity = new Date();
  
  return this.save();
};

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
 */
cartSchema.methods.updateItem = function(itemId, updateData) {
  const item = this.items.id(itemId);
  if (!item) {
    throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
  }
  
  if (updateData.quantity !== undefined) {
    item.quantity = updateData.quantity;
  }
  
  if (updateData.selected_options !== undefined) {
    item.selected_options = updateData.selected_options;
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ü–∏–π
    item.options_price = updateData.selected_options.reduce((sum, option) => {
      return sum + option.option_price;
    }, 0);
  }
  
  if (updateData.special_requests !== undefined) {
    item.special_requests = updateData.special_requests;
  }
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
  item.total_item_price = (item.item_price + item.options_price) * item.quantity;
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
  this.recalculatePricing();
  this.last_activity = new Date();
  
  return this.save();
};

/**
 * ‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
 */
cartSchema.methods.removeItem = function(itemId) {
  this.items.id(itemId).remove();
  
  // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—É—é
  if (this.items.length === 0) {
    this.status = 'abandoned';
  }
  
  this.recalculatePricing();
  this.last_activity = new Date();
  
  return this.save();
};

/**
 * üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
 */
cartSchema.methods.clear = function() {
  this.items = [];
  this.pricing = {
    subtotal: 0,
    delivery_fee: 0,
    service_fee: 0,
    discount_amount: 0,
    total_price: 0
  };
  this.delivery_info = {};
  this.status = 'abandoned';
  this.last_activity = new Date();
  
  return this.save();
};

/**
 * üöö –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
 */
cartSchema.methods.setDeliveryInfo = function(deliveryData) {
  this.delivery_info = {
    ...deliveryData,
    calculated_at: new Date()
  };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
  this.pricing.delivery_fee = deliveryData.delivery_fee || 0;
  this.recalculatePricing();
  this.last_activity = new Date();
  
  return this.save();
};

/**
 * ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ –∑–∞–∫–∞–∑
 */
cartSchema.methods.convertToOrder = function() {
  this.status = 'converted_to_order';
  this.last_activity = new Date();
  return this.save();
};

/**
 * ‚è∞ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
cartSchema.methods.updateActivity = function() {
  this.last_activity = new Date();
  // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ—Ä–∑–∏–Ω—ã –µ—â–µ –Ω–∞ 24 —á–∞—Å–∞
  this.expires_at = new Date(Date.now() + 24 * 60 * 60 * 1000);
  return this.save();
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================

/**
 * üîç –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
cartSchema.statics.findActiveCart = function(customerId, sessionId = null) {
  const query = {
    customer_id: customerId,
    status: 'active'
  };
  
  if (sessionId) {
    query.session_id = sessionId;
  }
  
  return this.findOne(query).sort({ last_activity: -1 });
};

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω
 */
cartSchema.statics.getAbandonedCartsStats = function(days = 7) {
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - days);
  
  return this.aggregate([
    {
      $match: {
        status: 'abandoned',
        last_activity: { $gte: startDate }
      }
    },
    {
      $group: {
        _id: {
          $dateToString: { format: '%Y-%m-%d', date: '$last_activity' }
        },
        total_carts: { $sum: 1 },
        avg_subtotal: { $avg: '$pricing.subtotal' },
        total_lost_revenue: { $sum: '$pricing.total_price' }
      }
    },
    { $sort: { _id: 1 } }
  ]);
};

/**
 * üßπ –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
 */
cartSchema.statics.cleanupExpiredCarts = function() {
  return this.deleteMany({
    expires_at: { $lt: new Date() },
    status: { $ne: 'converted_to_order' }
  });
};

// ================ MIDDLEWARE ================

// Pre-save middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
cartSchema.pre('save', function(next) {
  if (this.isModified('items')) {
    this.recalculatePricing();
  }
  next();
});

// ================ –ù–ê–°–¢–†–û–ô–ö–ò –í–ò–†–¢–£–ê–õ–¨–ù–´–• –ü–û–õ–ï–ô ================
cartSchema.set('toJSON', { virtuals: true });
cartSchema.set('toObject', { virtuals: true });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
cartSchema.virtual('total_items').get(function() {
  return this.items.reduce((sum, item) => sum + item.quantity, 0);
});

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
cartSchema.virtual('meets_minimum_order').get(function() {
  return this.pricing.subtotal >= this.restaurant_info.min_order_amount;
});

// üÜï –≠–ö–°–ü–û–†–¢
export default mongoose.model('Cart', cartSchema);