// models/PartnerProfile.model.js - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ –° EARNINGS –ò DELIVERY ZONES
import mongoose from 'mongoose';

const partnerProfileSchema = new mongoose.Schema({
  user_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    unique: true,
    index: true
  },
  
  // –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ë–ò–ó–ù–ï–°–ê
  business_name: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  
  brand_name: {
    type: String,
    trim: true,
    maxlength: 100
  },
  
  category: {
    type: String,
    required: true,
    enum: ['restaurant', 'store'],
    index: true
  },
  
  description: {
    type: String,
    trim: true,
    maxlength: 500
  },
  
  // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï
  address: {
    type: String,
    required: true
  },
  
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true
    },
    coordinates: {
      type: [Number],
      required: true
    }
  },
  
  phone: {
    type: String,
    required: true
  },
  
  email: {
    type: String,
    required: true
  },
  
  owner_name: {
    type: String,
    required: true,
    trim: true
  },
  
  owner_surname: {
    type: String,
    required: true,
    trim: true
  },
  
  floor_unit: {
    type: String,
    trim: true
  },
  
  // üé® –ú–ï–î–ò–ê
  cover_image_url: {
    type: String
  },
  
  // –ì–ê–õ–ï–†–ï–Ø
  gallery: [{
    url: { type: String, required: true },
    title: { type: String, trim: true, maxlength: 100 },
    description: { type: String, trim: true, maxlength: 200 },
    type: { type: String, enum: ['interior', 'exterior', 'food', 'staff', 'other'], default: 'other' },
    uploaded_at: { type: Date, default: Date.now }
  }],
  
  // –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–ù–Æ
  menu_categories: [{
    name: { type: String, required: true, trim: true, maxlength: 50 },
    slug: { type: String, required: true, trim: true },
    description: { type: String, trim: true, maxlength: 200 },
    display_order: { type: Number, default: 0 },
    is_active: { type: Boolean, default: true },
    created_at: { type: Date, default: Date.now },
    updated_at: { type: Date, default: Date.now }
  }],
  
  // ‚úÖ –°–ò–°–¢–ï–ú–ê –ó–ê–†–ê–ë–û–¢–ö–ê ESARGO
  earnings: {
    total_earned: {
      type: Number,
      default: 0,
      min: 0
    },
    weekly_earned: {
      type: Number,
      default: 0,
      min: 0
    },
    monthly_earned: {
      type: Number,
      default: 0,
      min: 0
    },
    daily_earned: {
      type: Number,
      default: 0,
      min: 0
    },
    
    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    earnings_breakdown: {
      food_sales: {
        type: Number,
        default: 0
      },
      commission_paid: {
        type: Number,
        default: 0
      },
      bonus_payments: {
        type: Number,
        default: 0
      }
    },
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
    last_payout_date: {
      type: Date
    },
    last_earnings_update: {
      type: Date,
      default: Date.now
    }
  },
  
  // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –ó–û–ù–´ –î–û–°–¢–ê–í–ö–ò ESARGO
  available_delivery_zones: [{
    zone_number: {
      type: Number,
      enum: [1, 2], // –ó–æ–Ω–∞ 1: 0-5–∫–º, –ó–æ–Ω–∞ 2: 5-10–∫–º
      required: true
    },
    max_distance_km: {
      type: Number,
      required: true,
      min: 0,
      max: 10
    },
    delivery_fee: {
      type: Number,
      required: true,
      min: 0
    },
    min_order_amount: {
      type: Number,
      default: 30 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
    },
    is_active: {
      type: Boolean,
      default: true
    }
  }],
  
  // –†–ï–ô–¢–ò–ù–ì–ò
  ratings: {
    avg_rating: { type: Number, default: 0, min: 0, max: 5 },
    total_ratings: { type: Number, default: 0 },
    rating_distribution: {
      five_star: { type: Number, default: 0 },
      four_star: { type: Number, default: 0 },
      three_star: { type: Number, default: 0 },
      two_star: { type: Number, default: 0 },
      one_star: { type: Number, default: 0 }
    }
  },
  
  // –ë–ò–ó–ù–ï–° –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  business_stats: {
    total_orders: { type: Number, default: 0 },
    completed_orders: { type: Number, default: 0 },
    cancelled_orders: { type: Number, default: 0 },
    avg_order_value: { type: Number, default: 0 },
    total_products: { type: Number, default: 0 },
    active_products: { type: Number, default: 0 },
    total_categories: { type: Number, default: 0 },
    total_gallery_images: { type: Number, default: 0 },
    last_stats_update: { type: Date }
  },
  
  // –°–¢–ê–¢–£–°–´
  content_status: { type: String, enum: ['awaiting_content', 'content_added', 'pending_review', 'approved', 'rejected'], default: 'awaiting_content', index: true },
  approval_status: { type: String, enum: ['awaiting_approval', 'approved', 'rejected'], default: 'awaiting_approval', index: true },
  is_approved: { type: Boolean, default: false, index: true },
  is_active: { type: Boolean, default: true, index: true },
  is_public: { type: Boolean, default: false, index: true },
  is_currently_open: { type: Boolean, default: false },
  
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û
  notes: { type: String, trim: true },
  last_login: { type: Date }
}, {
  timestamps: true
});

// ================ –ò–ù–î–ï–ö–°–´ ================
partnerProfileSchema.index({ user_id: 1 });
partnerProfileSchema.index({ category: 1, is_public: 1, is_approved: 1 });
partnerProfileSchema.index({ location: '2dsphere' });
partnerProfileSchema.index({ 'ratings.avg_rating': -1 });
partnerProfileSchema.index({ is_approved: 1, is_active: 1, is_public: 1 });
partnerProfileSchema.index({ 'available_delivery_zones.zone_number': 1 }); // ‚úÖ –ù–û–í–´–ô –ò–ù–î–ï–ö–°

// ================ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø ================
partnerProfileSchema.virtual('total_gallery_count').get(function() {
  return this.gallery.length;
});

partnerProfileSchema.virtual('active_zones_count').get(function() {
  return this.available_delivery_zones.filter(zone => zone.is_active);
});

// ================ –ú–ï–¢–û–î–´ –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ================

// ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø EARNINGS
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
partnerProfileSchema.methods.updateEarnings = function(orderData) {
  const orderTotal = orderData.subtotal || 0;
  const commissionRate = 0.10; // 10% –∫–æ–º–∏—Å—Å–∏—è ESARGO
  const commission = orderTotal * commissionRate;
  const partnerEarning = orderTotal - commission;
  
  this.earnings.total_earned += partnerEarning;
  this.earnings.weekly_earned += partnerEarning;
  this.earnings.monthly_earned += partnerEarning;
  this.earnings.daily_earned += partnerEarning;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
  this.earnings.earnings_breakdown.food_sales += orderTotal;
  this.earnings.earnings_breakdown.commission_paid += commission;
  
  this.earnings.last_earnings_update = new Date();
  
  return this.save();
};

/**
 * –°–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é)
 */
partnerProfileSchema.methods.resetWeeklyEarnings = function() {
  this.earnings.weekly_earned = 0;
  return this.save();
};

/**
 * –°–±—Ä–æ—Å –º–µ—Å—è—á–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü)
 */
partnerProfileSchema.methods.resetMonthlyEarnings = function() {
  this.earnings.monthly_earned = 0;
  return this.save();
};

/**
 * –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
 */
partnerProfileSchema.methods.resetDailyEarnings = function() {
  this.earnings.daily_earned = 0;
  return this.save();
};

// ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø DELIVERY ZONES
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
partnerProfileSchema.methods.getActiveDeliveryZones = function() {
  return this.available_delivery_zones.filter(zone => zone.is_active);
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤ –∑–æ–Ω—É
 */
partnerProfileSchema.methods.canDeliverToZone = function(zoneNumber) {
  const zone = this.available_delivery_zones.find(z => 
    z.zone_number === zoneNumber && z.is_active
  );
  return !!zone;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–æ–Ω—ã
 */
partnerProfileSchema.methods.getDeliveryFeeForZone = function(zoneNumber, orderTotal = 0) {
  const zone = this.available_delivery_zones.find(z => 
    z.zone_number === zoneNumber && z.is_active
  );
  
  if (!zone) return null;
  
  // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
  return orderTotal >= zone.min_order_amount ? 
    zone.delivery_fee : zone.delivery_fee + 2; // –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –º–∞–ª—ã–π –∑–∞–∫–∞–∑
};

// –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º)

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
partnerProfileSchema.methods.updateRating = function(newRating) {
  const currentTotal = this.ratings.total_ratings;
  const currentAvg = this.ratings.avg_rating;
  
  this.ratings.total_ratings += 1;
  this.ratings.avg_rating = ((currentAvg * currentTotal) + newRating) / this.ratings.total_ratings;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
  switch (newRating) {
    case 5: this.ratings.rating_distribution.five_star += 1; break;
    case 4: this.ratings.rating_distribution.four_star += 1; break;
    case 3: this.ratings.rating_distribution.three_star += 1; break;
    case 2: this.ratings.rating_distribution.two_star += 1; break;
    case 1: this.ratings.rating_distribution.one_star += 1; break;
  }
  
  return this.save();
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
partnerProfileSchema.methods.updateProductStats = async function() {
  const Product = mongoose.model('Product');
  
  const stats = await Product.aggregate([
    { $match: { partner_id: this._id } },
    {
      $group: {
        _id: null,
        total_products: { $sum: 1 },
        active_products: { $sum: { $cond: [{ $and: ['$is_active', '$is_available'] }, 1, 0] } }
      }
    }
  ]);
  
  if (stats.length > 0) {
    this.business_stats.total_products = stats[0].total_products;
    this.business_stats.active_products = stats[0].active_products;
  } else {
    this.business_stats.total_products = 0;
    this.business_stats.active_products = 0;
  }
  
  this.business_stats.total_categories = this.menu_categories.length;
  this.business_stats.total_gallery_images = this.gallery.length;
  this.business_stats.last_stats_update = new Date();
  
  return this.save();
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã
 */
partnerProfileSchema.methods.canAcceptOrders = function() {
  return this.is_approved && this.is_active && this.is_public && this.is_currently_open;
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================

/**
 * ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏
 */
partnerProfileSchema.statics.findByDeliveryZone = function(zoneNumber) {
  return this.find({
    'available_delivery_zones.zone_number': zoneNumber,
    'available_delivery_zones.is_active': true,
    is_approved: true,
    is_active: true,
    is_public: true
  });
};

/**
 * ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ earnings –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º
 */
partnerProfileSchema.statics.getEarningsStats = function(dateFrom, dateTo) {
  return this.aggregate([
    {
      $match: {
        is_approved: true,
        'earnings.last_earnings_update': { 
          $gte: new Date(dateFrom), 
          $lte: new Date(dateTo) 
        }
      }
    },
    {
      $group: {
        _id: '$category',
        total_partners: { $sum: 1 },
        total_earnings: { $sum: '$earnings.total_earned' },
        total_commission: { $sum: '$earnings.earnings_breakdown.commission_paid' },
        avg_earnings_per_partner: { $avg: '$earnings.total_earned' },
        total_food_sales: { $sum: '$earnings.earnings_breakdown.food_sales' }
      }
    },
    { $sort: { total_earnings: -1 } }
  ]);
};

/**
 * –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
 */
partnerProfileSchema.statics.findNearby = function(lat, lng, radiusKm = 10, category = null) {
  const matchConditions = {
    location: {
      $near: {
        $geometry: { type: 'Point', coordinates: [lng, lat] },
        $maxDistance: radiusKm * 1000
      }
    },
    is_approved: true,
    is_active: true,
    is_public: true
  };
  
  if (category) {
    matchConditions.category = category;
  }
  
  return this.find(matchConditions).sort({ 'ratings.avg_rating': -1 });
};

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 */
partnerProfileSchema.statics.findPopular = function(limit = 10, category = null) {
  const matchConditions = {
    is_approved: true,
    is_active: true,
    is_public: true,
    'ratings.total_ratings': { $gte: 5 }
  };
  
  if (category) {
    matchConditions.category = category;
  }
  
  return this.find(matchConditions)
    .sort({ 'ratings.avg_rating': -1, 'ratings.total_ratings': -1 })
    .limit(limit);
};

// ================ –ù–ê–°–¢–†–û–ô–ö–ò JSON ================
partnerProfileSchema.set('toJSON', { 
  virtuals: true,
  transform: function(doc, ret) {
    // –£–±–∏—Ä–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞
    delete ret.address;
    delete ret.phone;
    delete ret.email;
    delete ret.owner_name;
    delete ret.owner_surname;
    return ret;
  }
});

partnerProfileSchema.set('toObject', { virtuals: true });

export default mongoose.model('PartnerProfile', partnerProfileSchema);