// models/Meta.model.js (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π - –¥–æ–±–∞–≤–ª–µ–Ω findByEmailHash)
import mongoose from 'mongoose';

const metaSchema = new mongoose.Schema({
  // –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  role: {
    type: String,
    enum: ['customer', 'partner', 'courier', 'admin'],
    required: true,
    index: true
  },
  
  // –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  em: {
    type: String,
    required: true,
    unique: true,
    index: true
  },
  
  // –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  is_active: {
    type: Boolean,
    default: true,
    index: true
  },
  
  // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  customer: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    index: true
  },
  
  partner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    index: true
  },
  
  courier: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    index: true
  },
  
  // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –°—Å—ã–ª–∫–∞ –Ω–∞ AdminUser
  admin: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'AdminUser',
    index: true
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security_info: {
    last_login_attempt: {
      type: Date
    },
    failed_login_attempts: {
      type: Number,
      default: 0
    },
    account_locked_until: {
      type: Date
    },
    password_changed_at: {
      type: Date
    }
  }
}, {
  timestamps: true
});

// –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
metaSchema.index({ em: 1, role: 1 });
metaSchema.index({ role: 1, is_active: 1 });

// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
metaSchema.index({ customer: 1, role: 1 });
metaSchema.index({ partner: 1, role: 1 });
metaSchema.index({ courier: 1, role: 1 });
metaSchema.index({ admin: 1, role: 1 });

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
metaSchema.methods.incrementFailedAttempts = function() {
  this.security_info.failed_login_attempts += 1;
  this.security_info.last_login_attempt = new Date();
  
  // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  let lockDuration = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  let attemptsThreshold = 5;
  
  if (this.role === 'admin') {
    lockDuration = 60 * 60 * 1000; // 1 —á–∞—Å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    attemptsThreshold = 3; // –°—Ç—Ä–æ–∂–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  }
  
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫
  if (this.security_info.failed_login_attempts >= attemptsThreshold) {
    this.security_info.account_locked_until = new Date(Date.now() + lockDuration);
  }
  
  return this.save();
};

metaSchema.methods.resetFailedAttempts = function() {
  this.security_info.failed_login_attempts = 0;
  this.security_info.account_locked_until = undefined;
  this.security_info.last_login_attempt = new Date();
  return this.save();
};

metaSchema.methods.isAccountLocked = function() {
  return this.security_info.account_locked_until && 
         this.security_info.account_locked_until > new Date();
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
metaSchema.methods.getUser = function() {
  switch (this.role) {
    case 'customer':
      return this.customer;
    case 'partner':
      return this.partner;
    case 'courier':
      return this.courier;
    case 'admin':
      return this.admin;
    default:
      return null;
  }
};

metaSchema.methods.getUserId = function() {
  switch (this.role) {
    case 'customer':
      return this.customer;
    case 'partner':
      return this.partner;
    case 'courier':
      return this.courier;
    case 'admin':
      return this.admin;
    default:
      return null;
  }
};

// ================ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ================

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ findByEmailHash
metaSchema.statics.findByEmailHash = function(hashedEmail) {
  return this.findOne({ em: hashedEmail });
};

// –ü–æ–∏—Å–∫ –ø–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É email –∏ —Ä–æ–ª–∏
metaSchema.statics.findByEmailAndRole = function(hashedEmail, role) {
  return this.findOne({ em: hashedEmail, role });
};

// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ —Å populate –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
metaSchema.statics.findByEmailAndRoleWithUser = function(hashedEmail, role) {
  let populateField;
  let refModel;
  
  switch (role) {
    case 'customer':
      populateField = 'customer';
      refModel = 'User';
      break;
    case 'partner':
      populateField = 'partner';
      refModel = 'User';
      break;
    case 'courier':
      populateField = 'courier';
      refModel = 'User';
      break;
    case 'admin':
      populateField = 'admin';
      refModel = 'AdminUser';
      break;
    default:
      return this.findOne({ em: hashedEmail, role });
  }
  
  return this.findOne({ em: hashedEmail, role }).populate({
    path: populateField,
    model: refModel,
    select: '-password_hash'
  });
};

// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ Meta –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
metaSchema.statics.createForCustomer = function(userId, hashedEmail) {
  return this.create({
    customer: userId,
    role: 'customer',
    em: hashedEmail,
    is_active: true
  });
};

metaSchema.statics.createForPartner = function(userId, hashedEmail) {
  return this.create({
    partner: userId,
    role: 'partner',
    em: hashedEmail,
    is_active: true
  });
};

metaSchema.statics.createForCourier = function(userId, hashedEmail) {
  return this.create({
    courier: userId,
    role: 'courier',
    em: hashedEmail,
    is_active: true
  });
};

metaSchema.statics.createForAdmin = function(adminId, hashedEmail) {
  return this.create({
    admin: adminId,
    role: 'admin',
    em: hashedEmail,
    is_active: true
  });
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Meta –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ ID)
metaSchema.statics.findByUserId = function(userId, role) {
  const query = { is_active: true };
  
  switch (role) {
    case 'customer':
      query.customer = userId;
      break;
    case 'partner':
      query.partner = userId;
      break;
    case 'courier':
      query.courier = userId;
      break;
    case 'admin':
      query.admin = userId;
      break;
    default:
      return this.find({ 
        $or: [
          { customer: userId },
          { partner: userId },
          { courier: userId },
          { admin: userId }
        ]
      });
  }
  
  return this.find(query);
};

export default mongoose.model('Meta', metaSchema);