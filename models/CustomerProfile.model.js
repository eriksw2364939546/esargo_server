// models/CustomerProfile.model.js (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π - ES6 modules)
import mongoose from 'mongoose';

const customerProfileSchema = new mongoose.Schema({
  user_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    unique: true,
    index: true
  },
  
  first_name: {
    type: String,
    required: true,
    trim: true
  },
  
  last_name: {
    type: String,
    required: true,
    trim: true
  },
  
  phone: {
    type: String,
    trim: true
  },
  
  avatar_url: {
    type: String
  },
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
  delivery_addresses: [{
    label: {
      type: String,
      required: true,
      trim: true,
      enum: ['–î–æ–º', '–†–∞–±–æ—Ç–∞', '–î—Ä—É–≥–æ–µ']
    },
    address: {
      type: String,
      required: true,
      trim: true
    },
    lat: {
      type: Number,
      required: true
    },
    lng: {
      type: Number,
      required: true
    },
    is_default: {
      type: Boolean,
      default: false
    }
  }],
  
  // –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã
  favorites: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'PartnerProfile'
  }],
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  settings: {
    notifications_enabled: {
      type: Boolean,
      default: true
    },
    preferred_language: {
      type: String,
      enum: ['ru', 'fr', 'en'],
      default: 'fr'
    },
    marketing_emails: {
      type: Boolean,
      default: false
    }
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  order_stats: {
    total_orders: {
      type: Number,
      default: 0
    },
    total_spent: {
      type: Number,
      default: 0
    },
    avg_rating_given: {
      type: Number,
      default: 0
    }
  },
  
  is_active: {
    type: Boolean,
    default: true
  }
}, {
  timestamps: true
});

// –ò–Ω–¥–µ–∫—Å—ã
customerProfileSchema.index({ user_id: 1 });
customerProfileSchema.index({ first_name: 1, last_name: 1 });
customerProfileSchema.index({ is_active: 1 });
customerProfileSchema.index({ 'order_stats.total_orders': -1 });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
customerProfileSchema.virtual('full_name').get(function() {
  return `${this.first_name} ${this.last_name}`;
});

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
customerProfileSchema.methods.addDeliveryAddress = async function(addressData) {
  try {
    const { label, address, lat, lng, is_default } = addressData;
    
    // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º, —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Å –¥—Ä—É–≥–∏—Ö
    if (is_default) {
      this.delivery_addresses.forEach(addr => {
        addr.is_default = false;
      });
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å, –¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (this.delivery_addresses.length === 0) {
      addressData.is_default = true;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
    this.delivery_addresses.push({
      label,
      address,
      lat,
      lng,
      is_default: addressData.is_default || false
    });
    
    return await this.save();
  } catch (error) {
    console.error('Add delivery address method error:', error);
    throw error;
  }
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
customerProfileSchema.methods.updateDeliveryAddress = async function(addressId, updateData) {
  try {
    const address = this.delivery_addresses.id(addressId);
    if (!address) {
      throw new Error('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    Object.keys(updateData).forEach(key => {
      if (updateData[key] !== undefined) {
        address[key] = updateData[key];
      }
    });
    
    // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —Å—Ç–∞–ª –æ—Å–Ω–æ–≤–Ω—ã–º, —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Å –¥—Ä—É–≥–∏—Ö
    if (updateData.is_default) {
      this.delivery_addresses.forEach(addr => {
        if (!addr._id.equals(addressId)) {
          addr.is_default = false;
        }
      });
    }
    
    return await this.save();
  } catch (error) {
    console.error('Update delivery address method error:', error);
    throw error;
  }
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
customerProfileSchema.methods.removeDeliveryAddress = async function(addressId) {
  try {
    const address = this.delivery_addresses.id(addressId);
    if (!address) {
      throw new Error('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const wasDefault = address.is_default;
    
    // –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å
    this.delivery_addresses.pull(addressId);
    
    // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –±—ã–ª –æ—Å–Ω–æ–≤–Ω—ã–º –∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ –∞–¥—Ä–µ—Å–∞
    if (wasDefault && this.delivery_addresses.length > 0) {
      this.delivery_addresses[0].is_default = true;
    }
    
    return await this.save();
  } catch (error) {
    console.error('Remove delivery address method error:', error);
    throw error;
  }
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
customerProfileSchema.methods.addToFavorites = async function(partnerId) {
  try {
    if (!this.favorites.includes(partnerId)) {
      this.favorites.push(partnerId);
      await this.save();
    }
    return this;
  } catch (error) {
    console.error('Add to favorites error:', error);
    throw error;
  }
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
customerProfileSchema.methods.removeFromFavorites = async function(partnerId) {
  try {
    this.favorites.pull(partnerId);
    await this.save();
    return this;
  } catch (error) {
    console.error('Remove from favorites error:', error);
    throw error;
  }
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
customerProfileSchema.methods.updateOrderStats = async function(orderAmount, rating = null) {
  try {
    this.order_stats.total_orders += 1;
    this.order_stats.total_spent += orderAmount;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (rating !== null) {
      const currentTotal = this.order_stats.avg_rating_given * (this.order_stats.total_orders - 1);
      this.order_stats.avg_rating_given = (currentTotal + rating) / this.order_stats.total_orders;
    }
    
    await this.save();
    return this;
  } catch (error) {
    console.error('Update order stats error:', error);
    throw error;
  }
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ user_id
customerProfileSchema.statics.findByUserId = function(userId) {
  return this.findOne({ user_id: userId });
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
customerProfileSchema.statics.findActive = function() {
  return this.find({ is_active: true });
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
customerProfileSchema.statics.findByName = function(searchQuery) {
  const regex = new RegExp(searchQuery, 'i');
  return this.find({
    $or: [
      { first_name: regex },
      { last_name: regex }
    ],
    is_active: true
  });
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ JSON
customerProfileSchema.set('toJSON', { virtuals: true });
customerProfileSchema.set('toObject', { virtuals: true });

export default mongoose.model('CustomerProfile', customerProfileSchema);