// services/payment.service.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω)
import crypto from 'crypto';

/**
 * üí≥ –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - –¢–û–õ–¨–ö–û –û–ù–õ–ê–ô–ù –û–ü–õ–ê–¢–ê
 * –í—Å–µ –∑–∞–∫–∞–∑—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω—ã –∫–∞—Ä—Ç–æ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
 */

/**
 * üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ
 */
export const processOrderPayment = async (orderData) => {
  const {
    amount, // –≤ –µ–≤—Ä–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 24.48)
    currency = 'EUR',
    customer_id,
    order_id,
    card_info = {} // –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  } = orderData;

  console.log('üí≥ PROCESS ORDER PAYMENT:', {
    amount,
    currency,
    customer_id,
    order_id: order_id || 'pending'
  });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
  if (!amount || amount <= 0) {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞');
  }

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (200-800ms)
  await new Promise(resolve => setTimeout(resolve, Math.random() * 600 + 200));

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
  const payment_id = `pi_${crypto.randomBytes(12).toString('hex')}`;
  const transaction_id = `txn_${crypto.randomBytes(10).toString('hex')}`;
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
  const randomOutcome = Math.random();
  
  if (randomOutcome < 0.92) {
    // 92% —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    return {
      success: true,
      payment_id,
      transaction_id,
      method: 'card',
      amount: amount,
      currency,
      status: 'completed',
      processed_at: new Date(),
      receipt_url: `https://payments.esargo.com/receipts/${payment_id}`,
      processing_fee: Math.round(amount * 0.029 * 100) / 100, // 2.9% –∫–æ–º–∏—Å—Å–∏—è
      card_last_digits: '****' + Math.floor(Math.random() * 9000 + 1000),
      details: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
    };
  } else if (randomOutcome < 0.95) {
    // 3% - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É.');
  } else if (randomOutcome < 0.97) {
    // 2% - –∫–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º
    throw new Error('–ë–∞–Ω–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –±–∞–Ω–∫–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É.');
  } else if (randomOutcome < 0.99) {
    // 2% - –∏—Å—Ç–µ–∫—à–∏–π —Å—Ä–æ–∫ –∫–∞—Ä—Ç—ã
    throw new Error('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É.');
  } else {
    // 1% - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    throw new Error('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
  }
};

/**
 * üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
 */
export const processOrderRefund = async (orderData) => {
  const {
    original_payment_id,
    amount,
    order_id,
    reason = 'order_cancelled'
  } = orderData;

  console.log('üí∏ PROCESS ORDER REFUND:', {
    original_payment_id,
    amount,
    order_id,
    reason
  });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
  await new Promise(resolve => setTimeout(resolve, 300));

  const refund_id = `ref_${crypto.randomBytes(10).toString('hex')}`;

  // 95% —É—Å–ø–µ—à–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
  if (Math.random() < 0.95) {
    return {
      success: true,
      refund_id,
      original_payment_id,
      amount,
      currency: 'EUR',
      status: 'completed',
      reason,
      processed_at: new Date(),
      estimated_arrival: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 –¥–Ω—è
      details: '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.'
    };
  } else {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
  }
};

/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
export const getPaymentStatus = async (payment_id) => {
  console.log('üîç GET PAYMENT STATUS:', { payment_id });

  await new Promise(resolve => setTimeout(resolve, 100));

  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  return {
    payment_id,
    status: 'completed',
    amount: null, // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    processed_at: new Date(),
    is_refunded: false
  };
};

/**
 * üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´
 */
export const paymentConfig = {
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
  supported_currencies: ['EUR'],
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
  min_payment_amount: 1.00,
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
  max_payment_amount: 999.99,
  
  // –ö–æ–º–∏—Å—Å–∏—è —Å–∏—Å—Ç–µ–º—ã
  processing_fee_rate: 0.029, // 2.9%
  
  // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–º—Å)
  payment_timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
  
  // –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  success_rate: 0.92
};

/**
 * üß™ –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */

// –°–æ–∑–¥–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
export const createTestSuccessPayment = async (amount) => {
  return {
    success: true,
    payment_id: `pi_test_success_${crypto.randomBytes(6).toString('hex')}`,
    transaction_id: `txn_test_${crypto.randomBytes(6).toString('hex')}`,
    method: 'card',
    amount,
    currency: 'EUR',
    status: 'completed',
    processed_at: new Date(),
    card_last_digits: '****1234',
    details: '–¢–µ—Å—Ç–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
    test_mode: true
  };
};

// –°–æ–∑–¥–∞—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
export const createTestFailedPayment = async (amount, error_type = 'card_declined') => {
  const error_messages = {
    'insufficient_funds': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ',
    'card_declined': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞: –±–∞–Ω–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é',
    'expired_card': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫'
  };
  
  throw new Error(error_messages[error_type] || '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞');
};

export default {
  processOrderPayment,
  processOrderRefund,
  getPaymentStatus,
  createTestSuccessPayment,
  createTestFailedPayment,
  paymentConfig
};