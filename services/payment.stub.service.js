// services/payment.stub.service.js - –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
import crypto from 'crypto';

/**
 * üí≥ –ó–ê–ì–õ–£–®–ö–ê –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–µ–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (Stripe, PayPal –∏ —Ç.–¥.)
 * 
 * –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
 * - success (85% —Å–ª—É—á–∞–µ–≤)
 * - failed_insufficient_funds (5% —Å–ª—É—á–∞–µ–≤) 
 * - failed_card_declined (5% —Å–ª—É—á–∞–µ–≤)
 * - failed_network_error (3% —Å–ª—É—á–∞–µ–≤)
 * - failed_expired_card (2% —Å–ª—É—á–∞–µ–≤)
 */

/**
 * üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
 */
export const createPaymentIntent = async (paymentData) => {
  const {
    amount, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 1250 = 12.50 EUR)
    currency = 'EUR',
    customer_id,
    order_id,
    payment_method = 'card',
    card_info = null
  } = paymentData;

  console.log('üí≥ CREATE PAYMENT INTENT:', {
    amount,
    currency,
    customer_id,
    order_id,
    payment_method
  });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏ (100-500ms)
  await new Promise(resolve => setTimeout(resolve, Math.random() * 400 + 100));

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
  const payment_id = `pi_${crypto.randomBytes(12).toString('hex')}`;
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const randomOutcome = Math.random();
  let status, client_secret, error_code, error_message;

  if (randomOutcome < 0.85) {
    // 85% —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    status = 'requires_confirmation';
    client_secret = `${payment_id}_secret_${crypto.randomBytes(8).toString('hex')}`;
  } else if (randomOutcome < 0.90) {
    // 5% - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    status = 'failed';
    error_code = 'insufficient_funds';
    error_message = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ';
  } else if (randomOutcome < 0.95) {
    // 5% - –∫–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
    status = 'failed';
    error_code = 'card_declined';
    error_message = '–ë–∞–Ω–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é';
  } else if (randomOutcome < 0.98) {
    // 3% - —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
    status = 'failed';
    error_code = 'network_error';
    error_message = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–Ω–∫–æ–º';
  } else {
    // 2% - –∏—Å—Ç–µ–∫—à–∞—è –∫–∞—Ä—Ç–∞
    status = 'failed';
    error_code = 'expired_card';
    error_message = '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫';
  }

  const result = {
    payment_id,
    status,
    amount,
    currency,
    created_at: new Date().toISOString(),
    metadata: {
      order_id,
      customer_id
    }
  };

  if (status === 'requires_confirmation') {
    result.client_secret = client_secret;
  } else {
    result.error = {
      code: error_code,
      message: error_message
    };
  }

  console.log('‚úÖ PAYMENT INTENT CREATED:', {
    payment_id,
    status,
    has_error: !!result.error
  });

  return result;
};

/**
 * ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
 */
export const confirmPayment = async (payment_id, client_secret) => {
  console.log('üîÑ CONFIRM PAYMENT:', { payment_id, client_secret });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (200-1000ms)
  await new Promise(resolve => setTimeout(resolve, Math.random() * 800 + 200));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å client_secret (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
  if (!client_secret || !client_secret.includes(payment_id)) {
    return {
      payment_id,
      status: 'failed',
      error: {
        code: 'invalid_client_secret',
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø–ª–∞—Ç–µ–∂–∞'
      },
      confirmed_at: new Date().toISOString()
    };
  }

  // 95% —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, 5% –Ω–µ—É–¥–∞—á–Ω—ã—Ö
  const success = Math.random() < 0.95;

  if (success) {
    return {
      payment_id,
      status: 'succeeded',
      confirmed_at: new Date().toISOString(),
      transaction_id: `txn_${crypto.randomBytes(8).toString('hex')}`,
      receipt_url: `https://payments.esargo.com/receipts/${payment_id}`,
      processing_fee: Math.round(0.029 * 100) / 100 // 2.9% –∫–æ–º–∏—Å—Å–∏—è
    };
  } else {
    const errorMessages = [
      '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º',
      '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–∞—Ä—Ç–µ',
      '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤ –±–∞–Ω–∫–µ'
    ];

    return {
      payment_id,
      status: 'failed',
      error: {
        code: 'processing_failed',
        message: errorMessages[Math.floor(Math.random() * errorMessages.length)]
      },
      confirmed_at: new Date().toISOString()
    };
  }
};

/**
 * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
export const getPaymentStatus = async (payment_id) => {
  console.log('üîç GET PAYMENT STATUS:', { payment_id });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
  await new Promise(resolve => setTimeout(resolve, 100));

  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  const statuses = [
    { status: 'succeeded', probability: 0.7 },
    { status: 'processing', probability: 0.15 },
    { status: 'requires_confirmation', probability: 0.1 },
    { status: 'failed', probability: 0.05 }
  ];

  const random = Math.random();
  let cumulative = 0;
  
  for (const { status, probability } of statuses) {
    cumulative += probability;
    if (random <= cumulative) {
      return {
        payment_id,
        status,
        checked_at: new Date().toISOString()
      };
    }
  }

  // Fallback
  return {
    payment_id,
    status: 'succeeded',
    checked_at: new Date().toISOString()
  };
};

/**
 * üí∏ –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
 */
export const refundPayment = async (payment_id, refund_amount = null, reason = 'requested_by_customer') => {
  console.log('üí∏ REFUND PAYMENT:', { payment_id, refund_amount, reason });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
  await new Promise(resolve => setTimeout(resolve, 300));

  const refund_id = `re_${crypto.randomBytes(10).toString('hex')}`;

  // 90% —É—Å–ø–µ—à–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
  const success = Math.random() < 0.90;

  if (success) {
    return {
      refund_id,
      payment_id,
      status: 'succeeded',
      amount: refund_amount,
      reason,
      created_at: new Date().toISOString(),
      estimated_arrival: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString() // 5 –¥–Ω–µ–π
    };
  } else {
    return {
      refund_id,
      payment_id,
      status: 'failed',
      error: {
        code: 'refund_failed',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.'
      },
      created_at: new Date().toISOString()
    };
  }
};

/**
 * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
 */
export const getAccountBalance = async (account_id) => {
  console.log('üìä GET ACCOUNT BALANCE:', { account_id });

  await new Promise(resolve => setTimeout(resolve, 50));

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  return {
    account_id,
    available_balance: {
      amount: Math.floor(Math.random() * 10000000), // —Å–ª—É—á–∞–π–Ω–∞—è —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      currency: 'EUR'
    },
    pending_balance: {
      amount: Math.floor(Math.random() * 100000),
      currency: 'EUR'
    },
    last_updated: new Date().toISOString()
  };
};

/**
 * üß™ –¢–ï–°–¢–û–í–´–ï –ú–ï–¢–û–î–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */

/**
 * –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–µ–Ω
 */
export const createTestSuccessPayment = async (paymentData) => {
  const payment_id = `pi_test_success_${crypto.randomBytes(6).toString('hex')}`;
  
  return {
    payment_id,
    status: 'requires_confirmation',
    amount: paymentData.amount,
    currency: paymentData.currency || 'EUR',
    client_secret: `${payment_id}_secret_test`,
    created_at: new Date().toISOString(),
    metadata: paymentData.metadata || {},
    test_mode: true
  };
};

/**
 * –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –Ω–µ—É–¥–∞—á–µ–Ω
 */
export const createTestFailedPayment = async (paymentData, error_type = 'card_declined') => {
  const payment_id = `pi_test_failed_${crypto.randomBytes(6).toString('hex')}`;
  
  const error_messages = {
    'card_declined': '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
    'insufficient_funds': '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
    'expired_card': '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'
  };
  
  return {
    payment_id,
    status: 'failed',
    amount: paymentData.amount,
    currency: paymentData.currency || 'EUR',
    created_at: new Date().toISOString(),
    error: {
      code: error_type,
      message: error_messages[error_type] || '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞'
    },
    metadata: paymentData.metadata || {},
    test_mode: true
  };
};

/**
 * üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê–ì–õ–£–®–ö–ò
 */
export const stubConfig = {
  // –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 85%)
  success_rate: 0.85,
  
  // –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
  simulate_network_delays: true,
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)
  min_delay: 100,
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)
  max_delay: 1000,
  
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
  supported_currencies: ['EUR', 'USD', 'RUB'],
  
  // –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
  processing_fee_rate: 0.029 // 2.9%
};

export default {
  createPaymentIntent,
  confirmPayment,
  getPaymentStatus,
  refundPayment,
  getAccountBalance,
  createTestSuccessPayment,
  createTestFailedPayment,
  stubConfig
};