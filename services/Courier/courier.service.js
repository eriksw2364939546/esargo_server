// services/Courier/courier.service.js - –ü–û–õ–ù–´–ô –§–ê–ô–õ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
import { User, CourierApplication, CourierProfile, Meta } from '../../models/index.js';
import Product from '../../models/Product.model.js';
import { cryptoString, decryptString } from '../../utils/crypto.js';
import { hashString, hashMeta, comparePassword } from '../../utils/hash.js';
import generatePassword from '../../utils/generatePassword.js';


/**
 * –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ö–£–†–¨–ï–†–ê –° –®–ò–§–†–û–í–ê–ù–ò–ï–ú
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ —Å –ø–æ–¥–∞—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
 */
const createCourierApplication = async (applicationData) => {
  try {
    const {
      // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      first_name, last_name, email, phone, password, date_of_birth,
      street, city, postal_code,
      // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      vehicle_type, vehicle_brand, vehicle_model, license_plate,
      insurance_company, insurance_policy_number,
      // –î–æ–∫—É–º–µ–Ω—Ç—ã URLs
      id_card_url, driver_license_url, insurance_url, 
      vehicle_registration_url, bank_rib_url,
      // –°–æ–≥–ª–∞—Å–∏—è
      terms_accepted, privacy_policy_accepted, 
      data_processing_accepted, background_check_accepted,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
      referral_code, source = 'web'
    } = applicationData;

    // ================ –í–ê–õ–ò–î–ê–¶–ò–Ø ================

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = {
      first_name, last_name, email, phone, date_of_birth,
      street, city, postal_code, vehicle_type,
      id_card_url, bank_rib_url,
      terms_accepted, privacy_policy_accepted, 
      data_processing_accepted, background_check_accepted
    };

    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏–π
    if (!terms_accepted || !privacy_policy_accepted || !data_processing_accepted || !background_check_accepted) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (['motorbike', 'car'].includes(vehicle_type)) {
      if (!driver_license_url || !insurance_url) {
        throw new Error('–î–ª—è –º–æ—Ç–æ—Ü–∏–∫–ª–∞/–∞–≤—Ç–æ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞');
      }
      if (vehicle_type === 'car' && !vehicle_registration_url) {
        throw new Error('–î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¢–°');
      }
    }

    // ================ –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í ================

    const normalizedEmail = email.toLowerCase().trim();
    const cleanPhone = phone.replace(/\s/g, '');

    // üîê –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ß–ï–†–ï–ó META (–∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
    const hashedEmail = hashMeta(normalizedEmail);
    const existingMeta = await Meta.findOne({ 
      em: hashedEmail,
      role: 'courier' 
    });

    if (existingMeta) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ search_data (–æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è)
    const existingApplication = await CourierApplication.findOne({
      $or: [
        { 
          'search_data.first_name': first_name.trim(),
          'search_data.last_name': last_name.trim(),
          'search_data.city': city.trim()
        }
      ],
      status: { $in: ['pending', 'approved'] }
    });

    if (existingApplication) {
      throw new Error('–ó–∞—è–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ –ø–æ–¥–∞–Ω–∞');
    }

    // ================ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ================

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    const finalPassword = password || generatePassword();
    const hashedPassword = await hashString(finalPassword);

    // üîê –°–û–ó–î–ê–ï–ú USER –° –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ú EMAIL (–∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
    const newUser = new User({
      email: cryptoString(normalizedEmail), // üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π email
      password_hash: hashedPassword,
      role: 'courier',
      is_active: true,
      is_email_verified: false,
      gdpr_consent: {
        data_processing: data_processing_accepted,
        marketing: false,
        analytics: false,
        consent_date: new Date()
      },
      registration_source: source || 'web'
    });

    await newUser.save();

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º Meta –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    const metaInfo = new Meta({
      em: hashedEmail,           // üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email –¥–ª—è –ø–æ–∏—Å–∫–∞
      role: 'courier',          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ role
      courier: newUser._id,     // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
      is_active: true          // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
    });

    await metaInfo.save();

    // ================ –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ö–£–†–¨–ï–†–ê –° –®–ò–§–†–û–í–ê–ù–ò–ï–ú ================

    const courierApplication = new CourierApplication({
      user_id: newUser._id,
      
      // üîê –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï - –ó–ê–®–ò–§–†–û–í–ê–ù–´ (–∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
      personal_data: {
        first_name: cryptoString(first_name.trim()),      // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        last_name: cryptoString(last_name.trim()),        // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        email: cryptoString(normalizedEmail),             // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        phone: cryptoString(cleanPhone),                  // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        date_of_birth: new Date(date_of_birth),           // ‚úÖ –î–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞
        address: {
          street: cryptoString(street.trim()),            // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
          city: cryptoString(city.trim()),                // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
          postal_code: cryptoString(postal_code.trim()),  // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
          country: 'France'                               // ‚úÖ –û—Ç–∫—Ä—ã—Ç–æ
        }
      },

      // ‚úÖ –ü–û–ò–°–ö–û–í–´–ï –ü–û–õ–Ø - –û–¢–ö–†–´–¢–û (—Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞)
      search_data: {
        first_name: first_name.trim(),                    // ‚úÖ –û–¢–ö–†–´–¢–û –¥–ª—è –ø–æ–∏—Å–∫–∞
        last_name: last_name.trim(),                      // ‚úÖ –û–¢–ö–†–´–¢–û –¥–ª—è –ø–æ–∏—Å–∫–∞
        city: city.trim()                                 // ‚úÖ –û–¢–ö–†–´–¢–û –¥–ª—è –ø–æ–∏—Å–∫–∞
      },

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
      vehicle_info: {
        vehicle_type,
        vehicle_brand: vehicle_brand?.trim(),
        vehicle_model: vehicle_model?.trim(),
        license_plate: license_plate ? 
          cryptoString(license_plate.trim().toUpperCase()) : undefined,  // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        insurance_company: insurance_company?.trim(),
        insurance_policy_number: insurance_policy_number ? 
          cryptoString(insurance_policy_number.trim()) : undefined       // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
      },

      // üîê –î–û–ö–£–ú–ï–ù–¢–´ - URLs –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
      documents: {
        id_card_url: cryptoString(id_card_url),           // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        driver_license_url: ['motorbike', 'car'].includes(vehicle_type) ? 
          cryptoString(driver_license_url) : undefined,   // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        insurance_url: ['motorbike', 'car'].includes(vehicle_type) ? 
          cryptoString(insurance_url) : undefined,        // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        vehicle_registration_url: vehicle_type === 'car' ? 
          cryptoString(vehicle_registration_url) : undefined,  // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
        bank_rib_url: cryptoString(bank_rib_url)          // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
      },

      // –°–æ–≥–ª–∞—Å–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã)
      consents: {
        terms_accepted,
        privacy_policy_accepted,
        data_processing_accepted,
        background_check_accepted
      },

      // –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
      status: 'pending',
      submitted_at: new Date(),
      review_info: {
        review_stage: 'documents',
        priority_level: 'normal'
      },

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      source,
      referral_code: referral_code?.trim(),
      ip_address: applicationData.ip_address,
      user_agent: applicationData.user_agent
    });

    await courierApplication.save();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    await courierApplication.checkForDuplicates();

    console.log('‚úÖ COURIER APPLICATION CREATED WITH ENCRYPTION:', {
      application_id: courierApplication._id,
      user_id: newUser._id,
      email: normalizedEmail,
      status: 'pending',
      encrypted: true
    });

    return {
      success: true,
      user: {
        id: newUser._id,
        email: normalizedEmail,
        role: 'courier',
        is_active: true
      },
      application: {
        id: courierApplication._id,
        status: courierApplication.status,
        submitted_at: courierApplication.submitted_at,
        vehicle_type: courierApplication.vehicle_info.vehicle_type
      },
      credentials: {
        email: normalizedEmail,
        password: finalPassword // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      }
    };

  } catch (error) {
    console.error('üö® CREATE COURIER APPLICATION - Error:', error);
    throw error;
  }
};

/**
 * –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ Meta)
 */
const loginCourier = async ({ email, password }) => {
  try {
    if (!email || !password) {
      throw new Error('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const normalizedEmail = email.toLowerCase().trim();
    const hashedEmail = hashMeta(normalizedEmail);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Meta —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const metaRecord = await Meta.findOne({ 
      em: hashedEmail, 
      role: 'courier' 
    }).populate('courier'); // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (!metaRecord || !metaRecord.courier) {
      throw new Error('–ö—É—Ä—å–µ—Ä —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ courier –≤–º–µ—Å—Ç–æ ui
    const user = metaRecord.courier;
    if (!user || !user.is_active) {
      throw new Error('–ê–∫–∫–∞—É–Ω—Ç –∫—É—Ä—å–µ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
    if (user.isAccountLocked && user.isAccountLocked()) {
      throw new Error('–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await comparePassword(password, user.password_hash);
    if (!isPasswordValid) {
      if (user.incrementLoginAttempts) {
        await user.incrementLoginAttempts();
      }
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    }

    // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    if (user.resetLoginAttempts) {
      await user.resetLoginAttempts();
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const courierProfile = await CourierProfile.findOne({ user_id: user._id });

    return {
      success: true,
      user: {
        id: user._id,
        email: normalizedEmail,
        role: user.role,
        is_active: user.is_active,
        last_login_at: user.last_login_at
      },
      courier: courierProfile ? {
        id: courierProfile._id,
        first_name: courierProfile.first_name,
        last_name: courierProfile.last_name,
        is_approved: courierProfile.is_approved,
        is_available: courierProfile.is_available,
        application_status: courierProfile.application_status
      } : null
    };

  } catch (error) {
    console.error('üö® LOGIN COURIER - Error:', error);
    throw error;
  }
};

/**
 * –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–Ø–í–ö–ò –ö–£–†–¨–ï–†–ê (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
 */
const getCourierApplicationStatus = async (userId) => {
  try {
    const application = await CourierApplication.findOne({ user_id: userId });
    
    if (!application) {
      return {
        has_application: false,
        status: null
      };
    }

    return {
      has_application: true,
      application: {
        id: application._id,
        status: application.status,
        submitted_at: application.submitted_at,
        vehicle_type: application.vehicle_info.vehicle_type,
        verification_status: application.verification.overall_verification_status,
        review_notes: application.review_info.admin_notes
      }
    };

  } catch (error) {
    console.error('üö® GET APPLICATION STATUS - Error:', error);
    throw error;
  }
};

/**
 * –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ö–£–†–¨–ï–†–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
 */
const getCourierProfile = async (userId) => {
  try {
    const courierProfile = await CourierProfile.findOne({ user_id: userId });
    
    if (!courierProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      success: true,
      profile: courierProfile
    };

  } catch (error) {
    console.error('üö® GET COURIER PROFILE - Error:', error);
    throw error;
  }
};

/**
 * –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò (On-e/Off-e)
 */
const toggleCourierAvailability = async (userId) => {
  try {
    const courierProfile = await CourierProfile.findOne({ user_id: userId });
    
    if (!courierProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!courierProfile.is_approved) {
      throw new Error('–ö—É—Ä—å–µ—Ä –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã');
    }

    await courierProfile.toggleAvailability();

    return {
      success: true,
      is_available: courierProfile.is_available,
      is_online: courierProfile.is_online
    };

  } catch (error) {
    console.error('üö® TOGGLE AVAILABILITY - Error:', error);
    throw error;
  }
};

/**
 * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–ï–û–õ–û–ö–ê–¶–ò–ò –ö–£–†–¨–ï–†–ê
 */
const updateCourierLocation = async (userId, { latitude, longitude }) => {
  try {
    const courierProfile = await CourierProfile.findOne({ user_id: userId });
    
    if (!courierProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    await courierProfile.updateLocation(latitude, longitude);

    return {
      success: true,
      location: courierProfile.location
    };

  } catch (error) {
    console.error('üö® UPDATE LOCATION - Error:', error);
    throw error;
  }
};

export {
  createCourierApplication,
  loginCourier,
  getCourierApplicationStatus,
  getCourierProfile,
  toggleCourierAvailability,
  updateCourierLocation
};