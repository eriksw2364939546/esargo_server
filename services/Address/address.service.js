// services/Address/address.service.js - –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏ ESARGO
import { CustomerProfile } from '../../models/index.js';
import mongoose from 'mongoose';

// ================ –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ú–ê–†–°–ï–õ–Ø ================

const MARSEILLE_BOUNDS = {
  lat: { min: 43.200, max: 43.350 },
  lng: { min: 5.200, max: 5.600 }
};

const DELIVERY_ZONES = {
  1: { max_distance: 5, name: '–¶–µ–Ω—Ç—Ä –ú–∞—Ä—Å–µ–ª—è' },
  2: { max_distance: 10, name: '–ë–æ–ª—å—à–æ–π –ú–∞—Ä—Å–µ–ª—å' }
};

// ================ MOCK –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–ï ================

/**
 * üó∫Ô∏è Mock –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–∑–∞–º–µ–Ω–∞ Google Maps API)
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ú–∞—Ä—Å–µ–ª—è
 */
const mockGeocodeAddress = (address) => {
  const addressLower = address.toLowerCase();
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const mockAddresses = {
    'vieux port marseille': { lat: 43.2951, lng: 5.3739, zone: 1 },
    'notre dame de la garde': { lat: 43.2842, lng: 5.3714, zone: 1 },
    'canebi√®re marseille': { lat: 43.2946, lng: 5.3758, zone: 1 },
    'ch√¢teau d\'if': { lat: 43.2799, lng: 5.3256, zone: 2 },
    'calanques marseille': { lat: 43.2109, lng: 5.4414, zone: 2 },
    'a√©roport marseille': { lat: 43.4393, lng: 5.2214, zone: 2 },
    'la joliette': { lat: 43.3067, lng: 5.3647, zone: 1 },
    'cours julien': { lat: 43.2929, lng: 5.3832, zone: 1 },
    'prado marseille': { lat: 43.2580, lng: 5.3927, zone: 1 },
    'castellane': { lat: 43.2884, lng: 5.3984, zone: 1 }
  };

  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const [mockAddr, coords] of Object.entries(mockAddresses)) {
    if (addressLower.includes(mockAddr) || mockAddr.includes(addressLower)) {
      return {
        success: true,
        coordinates: coords,
        formatted_address: address,
        zone: coords.zone
      };
    }
  }

  // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ mock –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–∞—Ä—Å–µ–ª—è
  const randomLat = 43.295 + (Math.random() - 0.5) * 0.02;
  const randomLng = 5.375 + (Math.random() - 0.5) * 0.02;
  
  return {
    success: true,
    coordinates: { lat: randomLat, lng: randomLng, zone: 1 },
    formatted_address: address,
    zone: 1,
    mock_warning: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
  };
};

/**
 * üìè –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (Haversine formula)
 */
const calculateDistance = (lat1, lng1, lat2, lng2) => {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLng = (lng2 - lng1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
           Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
           Math.sin(dLng/2) * Math.sin(dLng/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
};

/**
 * üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ú–∞—Ä—Å–µ–ª—è
 */
const determineDeliveryZone = (lat, lng) => {
  const centerMarseille = { lat: 43.2951, lng: 5.3739 }; // Vieux Port
  const distance = calculateDistance(centerMarseille.lat, centerMarseille.lng, lat, lng);
  
  if (distance <= DELIVERY_ZONES[1].max_distance) return 1;
  if (distance <= DELIVERY_ZONES[2].max_distance) return 2;
  return null; // –ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
};

// ================ –í–ê–õ–ò–î–ê–¶–ò–Ø ================

/**
 * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞
 */
const validateAddressData = (addressData) => {
  const errors = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!addressData.address || addressData.address.trim().length < 5) {
    errors.push('–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤');
  }

  if (!addressData.name || !['–î–æ–º', '–†–∞–±–æ—Ç–∞', '–†–æ–¥–∏—Ç–µ–ª–∏', '–î—Ä—É–∑—å—è', '–î—Ä—É–≥–æ–µ'].includes(addressData.name)) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: –î–æ–º, –†–∞–±–æ—Ç–∞, –†–æ–¥–∏—Ç–µ–ª–∏, –î—Ä—É–∑—å—è –∏–ª–∏ –î—Ä—É–≥–æ–µ');
  }

  // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
  if (addressData.lat !== undefined || addressData.lng !== undefined) {
    // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –µ—Å—Ç—å, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤—Ç–æ—Ä–∞—è
    if (addressData.lat === undefined || addressData.lng === undefined) {
      errors.push('–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –∏ lat, –∏ lng');
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–∞
      if (typeof addressData.lat !== 'number' || typeof addressData.lng !== 'number') {
        errors.push('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏');
      } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ú–∞—Ä—Å–µ–ª—è
        if (addressData.lat < MARSEILLE_BOUNDS.lat.min || addressData.lat > MARSEILLE_BOUNDS.lat.max) {
          errors.push('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–∞—Ä—Å–µ–ª—è (—à–∏—Ä–æ—Ç–∞)');
        }
        
        if (addressData.lng < MARSEILLE_BOUNDS.lng.min || addressData.lng > MARSEILLE_BOUNDS.lng.max) {
          errors.push('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–∞—Ä—Å–µ–ª—è (–¥–æ–ª–≥–æ—Ç–∞)');
        }
      }
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–¥—Ä–µ—Å–∞
  if (addressData.details) {
    if (addressData.details.apartment && addressData.details.apartment.length > 20) {
      errors.push('–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤');
    }
    
    if (addressData.details.delivery_notes && addressData.details.delivery_notes.length > 200) {
      errors.push('–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤');
    }
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

// ================ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–ï–†–í–ò–°–ê ================

/**
 * üìç –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ê–î–†–ï–°–ê
 */
export const addCustomerAddress = async (userId, addressData) => {
  try {
    console.log('üìç ADD ADDRESS:', { userId, address: addressData.address });

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // ‚úÖ –°–ù–ê–ß–ê–õ–ê –¥–µ–ª–∞–µ–º mock –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    let coordinates = { lat: addressData.lat, lng: addressData.lng };
    let zone = null;
    
    if (!addressData.lat || !addressData.lng) {
      const geocodeResult = mockGeocodeAddress(addressData.address);
      coordinates = geocodeResult.coordinates;
      zone = geocodeResult.zone;
      
      console.log('üó∫Ô∏è MOCK GEOCODING:', {
        address: addressData.address,
        coordinates,
        zone
      });
    } else {
      zone = determineDeliveryZone(addressData.lat, addressData.lng);
    }

    // ‚úÖ –¢–ï–ü–ï–†–¨ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    const dataToValidate = {
      ...addressData,
      lat: coordinates.lat,
      lng: coordinates.lng
    };
    
    const validation = validateAddressData(dataToValidate);
    if (!validation.isValid) {
      const error = new Error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞');
      error.validationErrors = validation.errors;
      throw error;
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤
    if (profile.saved_addresses.length >= 5) {
      throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤: 5');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    if (!zone) {
      throw new Error('–ê–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –ú–∞—Ä—Å–µ–ª—è');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –∞–¥—Ä–µ—Å –æ—Å–Ω–æ–≤–Ω—ã–º
    const isFirstAddress = profile.saved_addresses.length === 0;
    const isDefault = isFirstAddress || addressData.is_default || false;

    // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ—Å–Ω–æ–≤–Ω–æ–π, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    if (isDefault) {
      profile.saved_addresses.forEach(addr => {
        addr.is_default = false;
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
    const newAddress = {
      address: addressData.address.trim(),
      lat: coordinates.lat,
      lng: coordinates.lng,
      name: addressData.name || '–î–æ–º',
      is_default: isDefault,
      details: {
        apartment: addressData.details?.apartment || '',
        entrance: addressData.details?.entrance || '',
        intercom: addressData.details?.intercom || '',
        floor: addressData.details?.floor || '',
        delivery_notes: addressData.details?.delivery_notes || ''
      },
      delivery_info: {
        zone: zone,
        estimated_distance_km: calculateDistance(43.2951, 5.3739, coordinates.lat, coordinates.lng),
        order_count: 0,
        last_used_at: null
      },
      validation: {
        is_validated: true,
        validated_at: new Date(),
        validation_method: 'mock'
      }
    };

    profile.saved_addresses.push(newAddress);
    await profile.save();

    console.log('‚úÖ ADDRESS ADDED:', { addressId: newAddress._id, zone });

    return {
      success: true,
      address: newAddress,
      profile: profile
    };

  } catch (error) {
    console.error('üö® ADD ADDRESS Error:', error);
    throw error;
  }
};

/**
 * ‚úèÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–†–ï–°–ê
 */
export const updateCustomerAddress = async (userId, addressId, updateData) => {
  try {
    console.log('‚úèÔ∏è UPDATE ADDRESS:', { userId, addressId });

    if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(addressId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID');
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const address = profile.saved_addresses.id(addressId);
    if (!address) {
      throw new Error('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const dataToValidate = { ...address.toObject(), ...updateData };
    const validation = validateAddressData(dataToValidate);
    if (!validation.isValid) {
      const error = new Error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞');
      error.validationErrors = validation.errors;
      throw error;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞
    if (updateData.address) {
      address.address = updateData.address.trim();
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –∞–¥—Ä–µ—Å, –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
      const geocodeResult = mockGeocodeAddress(updateData.address);
      address.lat = geocodeResult.coordinates.lat;
      address.lng = geocodeResult.coordinates.lng;
      address.delivery_info.zone = geocodeResult.zone;
      address.delivery_info.estimated_distance_km = calculateDistance(
        43.2951, 5.3739, geocodeResult.coordinates.lat, geocodeResult.coordinates.lng
      );
      address.validation.validated_at = new Date();
    }

    if (updateData.name) address.name = updateData.name;
    if (updateData.details) {
      address.details = { ...address.details, ...updateData.details };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª–∞–≥–∞ is_default
    if (updateData.is_default !== undefined) {
      if (updateData.is_default) {
        // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        profile.saved_addresses.forEach(addr => {
          if (!addr._id.equals(addressId)) {
            addr.is_default = false;
          }
        });
      }
      address.is_default = updateData.is_default;
    }

    await profile.save();

    console.log('‚úÖ ADDRESS UPDATED:', { addressId });

    return {
      success: true,
      address: address,
      profile: profile
    };

  } catch (error) {
    console.error('üö® UPDATE ADDRESS Error:', error);
    throw error;
  }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ê–î–†–ï–°–ê
 */
export const deleteCustomerAddress = async (userId, addressId) => {
  try {
    console.log('üóëÔ∏è DELETE ADDRESS:', { userId, addressId });

    if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(addressId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID');
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const address = profile.saved_addresses.id(addressId);
    if (!address) {
      throw new Error('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const wasDefault = address.is_default;
    
    // –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å
    profile.saved_addresses.pull(addressId);

    // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –±—ã–ª –æ—Å–Ω–æ–≤–Ω—ã–º, –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø–µ—Ä–≤—ã–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è
    if (wasDefault && profile.saved_addresses.length > 0) {
      profile.saved_addresses[0].is_default = true;
    }

    await profile.save();

    console.log('‚úÖ ADDRESS DELETED:', { addressId, wasDefault });

    return {
      success: true,
      message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      profile: profile
    };

  } catch (error) {
    console.error('üö® DELETE ADDRESS Error:', error);
    throw error;
  }
};

/**
 * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ê–î–†–ï–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
 */
export const getCustomerAddresses = async (userId) => {
  try {
    console.log('üìã GET ADDRESSES:', { userId });

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      success: true,
      addresses: profile.saved_addresses,
      total_count: profile.saved_addresses.length
    };

  } catch (error) {
    console.error('üö® GET ADDRESSES Error:', error);
    throw error;
  }
};

/**
 * üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –ê–î–†–ï–°–ê –ü–û ID
 */
export const getCustomerAddressById = async (userId, addressId) => {
  try {
    console.log('üéØ GET ADDRESS BY ID:', { userId, addressId });

    if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(addressId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID');
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const address = profile.saved_addresses.id(addressId);
    if (!address) {
      throw new Error('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      success: true,
      address: address
    };

  } catch (error) {
    console.error('üö® GET ADDRESS BY ID Error:', error);
    throw error;
  }
};

/**
 * üè† –£–°–¢–ê–ù–û–í–ö–ê –û–°–ù–û–í–ù–û–ì–û –ê–î–†–ï–°–ê
 */
export const setDefaultAddress = async (userId, addressId) => {
  try {
    console.log('üè† SET DEFAULT ADDRESS:', { userId, addressId });

    if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(addressId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID');
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const address = profile.saved_addresses.id(addressId);
    if (!address) {
      throw new Error('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
    profile.saved_addresses.forEach(addr => {
      addr.is_default = false;
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
    address.is_default = true;

    await profile.save();

    console.log('‚úÖ DEFAULT ADDRESS SET:', { addressId });

    return {
      success: true,
      message: '–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω',
      address: address
    };

  } catch (error) {
    console.error('üö® SET DEFAULT ADDRESS Error:', error);
    throw error;
  }
};

// ================ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * üß™ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export const getDeliveryZones = () => {
  return {
    zones: DELIVERY_ZONES,
    city: '–ú–∞—Ä—Å–µ–ª—å',
    bounds: MARSEILLE_BOUNDS
  };
};

/**
 * üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
export const generateMockAddresses = () => {
  return [
    {
      address: 'Vieux Port, Marseille',
      lat: 43.2951,
      lng: 5.3739,
      name: '–î–æ–º',
      details: { apartment: '12A', floor: '3' }
    },
    {
      address: 'Canebi√®re, Marseille',
      lat: 43.2946,
      lng: 5.3758,
      name: '–†–∞–±–æ—Ç–∞',
      details: { entrance: 'B', intercom: '142' }
    }
  ];
};

// ================ –≠–ö–°–ü–û–†–¢ ================

export default {
  addCustomerAddress,
  updateCustomerAddress,
  deleteCustomerAddress,
  getCustomerAddresses,
  getCustomerAddressById,
  setDefaultAddress,
  getDeliveryZones,
  generateMockAddresses,
  
  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  mockGeocodeAddress,
  determineDeliveryZone,
  calculateDistance
};