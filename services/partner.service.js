// services/partner.service.js (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
import { User, PartnerProfile, InitialPartnerRequest, PartnerLegalInfo } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { cryptoString } from '../utils/crypto.js';
import { hashString, hashMeta, comparePassword } from '../utils/hash.js';
import { generateCustomerToken } from './token.service.js';
import mongoose from 'mongoose';

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–∏–∑ User ‚Üí PartnerProfile –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
 * @param {object} partnerData - –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
 */
export const createPartnerAccount = async (partnerData) => {
  try {
    const {
      user_id,
      business_name,
      brand_name,
      category,
      description,
      address,
      location,
      phone,
      email,
      owner_name,
      owner_surname,
      floor_unit,
      cover_image_url,
      working_hours,
      legal_info
    } = partnerData;

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    const existingMeta = await Meta.findByUserId(user_id, 'partner');

    if (existingMeta && existingMeta.length > 0) {
      return {
        isNewPartner: false,
        partner: existingMeta[0]
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(user_id);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –°–æ–∑–¥–∞–µ–º PartnerProfile
    const newPartnerProfile = new PartnerProfile({
      user_id: user._id,
      business_name,
      brand_name,
      category,
      description,
      address: cryptoString(address), // –®–∏—Ñ—Ä—É–µ–º –∞–¥—Ä–µ—Å
      location,
      phone: cryptoString(phone), // –®–∏—Ñ—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
      email: cryptoString(email), // –®–∏—Ñ—Ä—É–µ–º email
      owner_name,
      owner_surname,
      floor_unit,
      cover_image_url,
      working_hours: working_hours || {
        monday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        tuesday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        wednesday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        thursday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        friday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        saturday: { is_open: true, open_time: '10:00', close_time: '22:00' },
        sunday: { is_open: false, open_time: null, close_time: null }
      },
      legal_info,
      is_approved: true, // –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
      is_active: true
    });

    await newPartnerProfile.save();

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.role = 'partner';
    await user.save();

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º Meta –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    const newMetaInfo = await Meta.createForPartner(user._id, hashMeta(user.email));

    return { 
      isNewPartner: true, 
      partner: newPartnerProfile
    };

  } catch (error) {
    console.error('Create partner account error:', error);
    throw error;
  }
};

/**
 * üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–ª–∏–µ–Ω—Ç—É, –Ω–æ –¥–ª—è —Ä–æ–ª–∏ partner)
 * @param {object} loginData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export const loginPartner = async ({ email, password }) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      const error = new Error('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      error.statusCode = 400;
      throw error;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email
    email = email.toLowerCase().trim();

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ Meta –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(email), 'partner');

    if (!metaInfo || !metaInfo.partner) {
      const error = new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      error.statusCode = 404;
      throw error;
    }

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const user = metaInfo.partner; // –≠—Ç–æ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ populate

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    if (metaInfo.isAccountLocked()) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      error.statusCode = 423;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.is_active) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      error.statusCode = 403;
      throw error;
    }

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partnerProfile) {
      const error = new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      error.statusCode = 404;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    if (!partnerProfile.is_approved) {
      const error = new Error('–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ');
      error.statusCode = 403;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await comparePassword(password, user.password_hash);
    if (!isPasswordValid) {
      await metaInfo.incrementFailedAttempts();
      const error = new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      error.statusCode = 401;
      throw error;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    await metaInfo.resetFailedAttempts();

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const token = generateCustomerToken({
      user_id: user._id,
      _id: user._id,
      email: user.email,
      role: 'partner',
      is_admin: false
    }, '30d');

    return { 
      token,
      user: {
        id: user._id,
        email: user.email,
        role: user.role,
        is_email_verified: user.is_email_verified,
        profile: partnerProfile
      }
    };

  } catch (error) {
    console.error('Login partner error:', error);
    throw error;
  }
};

/**
 * üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ ID (–¥–ª—è middleware)
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {object} - –ü–∞—Ä—Ç–Ω–µ—Ä —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
 */
export const getPartnerById = async (userId) => {
  try {
    const user = await User.findById(userId).select('-password_hash');
    if (!user || user.role !== 'partner') return null;

    const profile = await PartnerProfile.findOne({ user_id: userId });

    return {
      ...user.toObject(),
      profile
    };
  } catch (error) {
    console.error('Get partner by ID error:', error);
    return null;
  }
};

/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ PartnerProfile –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
 * @param {string} legalInfoId - ID —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * @param {string} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
export const finalApprovePartner = async (legalInfoId, adminId) => {
  try {
    const session = await mongoose.startSession();
    
    try {
      const result = await session.withTransaction(async () => {
        // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–æ–π
        const legalInfo = await PartnerLegalInfo.findById(legalInfoId)
          .populate('user_id')
          .populate('partner_request_id')
          .session(session);

        if (!legalInfo) {
          throw new Error('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (legalInfo.verification_status !== 'pending') {
          throw new Error('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –∑–∞—è–≤–∫—É
        const initialRequest = legalInfo.partner_request_id;
        if (!initialRequest) {
          throw new Error('–ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        legalInfo.verification_status = 'verified';
        legalInfo.verified_at = new Date();
        legalInfo.verified_by = adminId;
        await legalInfo.save({ session });

        // –°–æ–∑–¥–∞–µ–º PartnerProfile
        const partnerProfileData = {
          user_id: legalInfo.user_id._id,
          business_name: initialRequest.business_data.business_name,
          brand_name: initialRequest.business_data.brand_name,
          category: initialRequest.business_data.category,
          description: initialRequest.business_data.description,
          address: initialRequest.business_data.address,
          location: initialRequest.business_data.location,
          phone: initialRequest.business_data.phone,
          email: initialRequest.business_data.email,
          owner_name: initialRequest.business_data.owner_name,
          owner_surname: initialRequest.business_data.owner_surname,
          floor_unit: initialRequest.business_data.floor_unit,
          cover_image_url: initialRequest.business_data.cover_image_url,
          legal_info: legalInfo.legal_data
        };

        const newPartner = await createPartnerAccount(partnerProfileData);

        return {
          success: true,
          partner: newPartner.partner,
          legalInfo: legalInfo
        };
      });

      await session.endSession();
      return result;

    } catch (transactionError) {
      await session.endSession();
      throw transactionError;
    }

  } catch (error) {
    console.error('Final approve partner error:', error);
    throw error;
  }
};