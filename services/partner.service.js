// services/partner.service.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
import { User, PartnerProfile, InitialPartnerRequest, PartnerLegalInfo } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { cryptoString, decryptString } from '../utils/crypto.js';
import { hashString, hashMeta, comparePassword } from '../utils/hash.js';
import { generateCustomerToken } from './token.service.js';
import mongoose from 'mongoose';

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ PartnerProfile –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä.–¥–∞–Ω–Ω—ã—Ö
 * @param {object} partnerData - –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ InitialRequest + LegalInfo
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
 */
export const createPartnerAccount = async (partnerData) => {
  try {
    const {
      user_id,
      business_name,
      brand_name,
      category,
      description,
      address,
      location,
      phone,
      email,
      owner_name,
      owner_surname,
      floor_unit,
      cover_image_url,
      legal_info_id // üÜï –î–û–ë–ê–í–õ–ï–ù–û: —Å—Å—ã–ª–∫–∞ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    } = partnerData;

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingProfile = await PartnerProfile.findOne({ user_id });
    if (existingProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(user_id);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º PartnerProfile —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const newPartnerProfile = new PartnerProfile({
      user_id: user._id,
      business_name,
      brand_name: brand_name || business_name,
      category,
      description,
      
      // üîê –í–°–ï –ê–î–†–ï–°–ê –ò –ö–û–ù–¢–ê–ö–¢–´ –£–ñ–ï –ó–ê–®–ò–§–†–û–í–ê–ù–´ –í InitialRequest
      address, // –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
      location,
      phone, // –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
      email, // –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
      
      owner_name,
      owner_surname,
      floor_unit, // –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
      cover_image_url,
      
      // üÜï –ù–û–í–û–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      is_approved: false, // –ï—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
      is_active: false,   // –ï—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
      approval_status: 'awaiting_content', // üéØ –ñ–î–ï–¢ –ù–ê–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–û–ú
      content_status: 'awaiting_content',  // üéØ –ñ–î–ï–¢ –ö–û–ù–¢–ï–ù–¢–ê
      is_public: false,   // –ù–ï –ü–£–ë–õ–ò–ß–ù–´–ô (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø)
      
      // –°—Å—ã–ª–∫–∞ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      legal_info: legal_info_id,
      
      // –ë–∞–∑–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞–±–∏–Ω–µ—Ç–µ)
      working_hours: {
        monday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        tuesday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        wednesday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        thursday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        friday: { is_open: true, open_time: '09:00', close_time: '21:00' },
        saturday: { is_open: true, open_time: '10:00', close_time: '22:00' },
        sunday: { is_open: false, open_time: null, close_time: null }
      }
    });

    await newPartnerProfile.save();

    return {
      isNewPartner: true,
      partner: newPartnerProfile
    };

  } catch (error) {
    console.error('Create partner account error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π)
 */
export const loginPartner = async (email, password) => {
  try {
    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º Meta —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥  
    const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(email), 'partner');

    if (!metaInfo || !metaInfo.partner) {
      const error = new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      error.statusCode = 404;
      throw error;
    }

    const user = metaInfo.partner; // –£–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ populate

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
    if (metaInfo.isAccountLocked()) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      error.statusCode = 423;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.is_active) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      error.statusCode = 403;
      throw error;
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å (–Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö)
    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    
    // üéØ –ù–û–í–û–ï: –ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –¥–∞–∂–µ –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è (–¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞)
    // –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä.–¥–∞–Ω–Ω—ã—Ö

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await comparePassword(password, user.password_hash);
    if (!isPasswordValid) {
      await metaInfo.incrementFailedAttempts();
      const error = new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      error.statusCode = 401;
      throw error;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    await metaInfo.resetFailedAttempts();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = generateCustomerToken({
      user_id: user._id,
      _id: user._id,
      email: user.email,
      role: 'partner',
      is_admin: false
    }, '30d');

    return { 
      token,
      user: {
        id: user._id,
        email: user.email,
        role: user.role,
        is_email_verified: user.is_email_verified,
        profile: partnerProfile // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö
      }
    };

  } catch (error) {
    console.error('Login partner error:', error);
    throw error;
  }
};

/**
 * üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ ID (–¥–ª—è middleware)
 */
export const getPartnerById = async (userId) => {
  try {
    const user = await User.findById(userId).select('-password_hash');
    if (!user || user.role !== 'partner') return null;

    const profile = await PartnerProfile.findOne({ user_id: userId });

    return {
      ...user.toObject(),
      profile
    };
  } catch (error) {
    console.error('Get partner by ID error:', error);
    return null;
  }
};

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ 
 * –°–æ–∑–¥–∞–µ—Ç PartnerProfile –¢–û–õ–¨–ö–û –ó–î–ï–°–¨ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä.–¥–∞–Ω–Ω—ã—Ö
 */
export const finalApprovePartner = async (legalInfoId, adminId) => {
  const session = await mongoose.startSession();
  
  try {
    const result = await session.withTransaction(async () => {
      // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∑–∞—è–≤–∫–æ–π
      const legalInfo = await PartnerLegalInfo.findById(legalInfoId)
        .populate('user_id')
        .populate('partner_request_id')
        .session(session);

      if (!legalInfo) {
        throw new Error('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      if (legalInfo.verification_status !== 'pending') {
        throw new Error('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
      }

      const initialRequest = legalInfo.partner_request_id;
      if (!initialRequest) {
        throw new Error('–ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      legalInfo.verification_status = 'verified';
      legalInfo.verified_at = new Date();
      legalInfo.verified_by = adminId;
      await legalInfo.save({ session });

      // 2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏
      initialRequest.status = 'legal_approved'; // üÜï –ù–û–í–´–ô –°–¢–ê–¢–£–°!
      await initialRequest.save({ session });

      // 3Ô∏è‚É£ –°–û–ó–î–ê–ï–ú PartnerProfile (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è!)
      const partnerProfileData = {
        user_id: legalInfo.user_id._id,
        business_name: initialRequest.business_data.business_name,
        brand_name: initialRequest.business_data.brand_name,
        category: initialRequest.business_data.category,
        description: initialRequest.business_data.description,
        
        // üîê –ë–µ—Ä–µ–º —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏
        address: initialRequest.business_data.address,
        location: initialRequest.business_data.location,
        phone: initialRequest.business_data.phone,
        email: initialRequest.business_data.email,
        floor_unit: initialRequest.business_data.floor_unit,
        
        owner_name: initialRequest.business_data.owner_name,
        owner_surname: initialRequest.business_data.owner_surname,
        cover_image_url: initialRequest.business_data.cover_image_url,
        legal_info_id: legalInfo._id
      };

      const newPartner = await createPartnerAccount(partnerProfileData);

      return {
        success: true,
        partner: newPartner.partner,
        legalInfo: legalInfo,
        initialRequest: initialRequest
      };
    });

    return result;

  } catch (error) {
    console.error('Final approve partner error:', error);
    throw error;
  } finally {
    await session.endSession();
  }
};

/**
 * üÜï –î–û–ë–ê–í–õ–ï–ù–û: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
export const updatePartnerContentStatus = async (profileId, newStatus, adminId = null) => {
  try {
    const profile = await PartnerProfile.findById(profileId);
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    profile.content_status = newStatus;

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω - –¥–µ–ª–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—É–±–ª–∏—á–Ω—ã–º
    if (newStatus === 'approved') {
      profile.is_approved = true;
      profile.is_active = true;
      profile.is_public = true;
      profile.published_at = new Date();
      
      if (adminId) {
        profile.approved_by = adminId;
        profile.approved_at = new Date();
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–µ
      await InitialPartnerRequest.findOneAndUpdate(
        { user_id: profile.user_id },
        { status: 'completed' }
      );
    }

    await profile.save();

    return {
      success: true,
      profile: profile,
      message: `–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${newStatus}"`
    };

  } catch (error) {
    console.error('Update partner content status error:', error);
    throw error;
  }
};

/**
 * üÜï –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
 */
export const submitContentForReview = async (userId) => {
  try {
    const profile = await PartnerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (profile.content_status !== 'awaiting_content' && profile.content_status !== 'content_added') {
      throw new Error('–ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ–¥–æ–±—Ä–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∑–∞—è–≤–∫–∏
    profile.content_status = 'pending_review';
    await profile.save();

    await InitialPartnerRequest.findOneAndUpdate(
      { user_id: userId },
      { status: 'content_review' }
    );

    return {
      success: true,
      message: '–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é',
      profile: profile
    };

  } catch (error) {
    console.error('Submit content for review error:', error);
    throw error;
  }
};