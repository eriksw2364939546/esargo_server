// services/partner.service.js - –ü–û–õ–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ üéØ
import { User, PartnerProfile, InitialPartnerRequest, PartnerLegalInfo } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { cryptoString, decryptString } from '../utils/crypto.js';
import { hashString, hashMeta, comparePassword } from '../utils/hash.js';
import { generateCustomerToken } from './token.service.js';
import mongoose from 'mongoose';

// ================ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ================

/**
 * ‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π)
 * –ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–∞–∂–µ –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è)
 */
const loginPartner = async (email, password) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º Meta —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥  
    const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(email), 'partner');

    if (!metaInfo || !metaInfo.partner) {
      const error = new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      error.statusCode = 404;
      throw error;
    }

    const user = metaInfo.partner; // –£–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ populate

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
    if (metaInfo.isAccountLocked()) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      error.statusCode = 423;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.is_active) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      error.statusCode = 403;
      throw error;
    }

    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å (–Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö)
    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    
    // üéØ –ö–õ–Æ–ß–ï–í–û–ï: –ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –¥–∞–∂–µ –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    // PartnerProfile —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä.–¥–∞–Ω–Ω—ã—Ö (–≠–¢–ê–ü 3)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await comparePassword(password, user.password_hash);
    if (!isPasswordValid) {
      await metaInfo.incrementFailedAttempts();
      const error = new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      error.statusCode = 401;
      throw error;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    await metaInfo.resetFailedAttempts();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = generateCustomerToken({
      user_id: user._id,
      _id: user._id,
      email: user.email,
      role: 'partner',
      is_admin: false
    }, '30d');

    return { 
      token,
      user: {
        id: user._id,
        email: user.email,
        role: user.role,
        is_email_verified: user.is_email_verified,
        profile: partnerProfile // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö (–ù–û–†–ú–ê–õ–¨–ù–û!)
      }
    };

  } catch (error) {
    console.error('Login partner error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ ID (–¥–ª—è middleware)
 */
const getPartnerById = async (userId) => {
  try {
    const user = await User.findById(userId).select('-password_hash');
    if (!user || user.role !== 'partner') return null;

    const profile = await PartnerProfile.findOne({ user_id: userId });

    return {
      ...user.toObject(),
      profile // –ú–æ–∂–µ—Ç –±—ã—Ç—å null - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    };
  } catch (error) {
    console.error('Get partner by ID error:', error);
    return null;
  }
};

// ================ –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï PARTNERPROFILE ================

/**
 * ‚úÖ –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ PartnerProfile –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä.–¥–∞–Ω–Ω—ã—Ö
 * –≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≥–¥–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è PartnerProfile!
 */
const createPartnerAccount = async (partnerData) => {
  try {
    const {
      user_id,
      business_name,
      brand_name,
      category,
      description,
      address,
      location,
      phone,
      email,
      owner_name,
      owner_surname,
      floor_unit,
      cover_image_url,
      legal_info_id
    } = partnerData;

    // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    const existingProfile = await PartnerProfile.findOne({ user_id });
    if (existingProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(user_id);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // ‚úÖ –°–û–ó–î–ê–ï–ú PartnerProfile —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const newPartnerProfile = new PartnerProfile({
      user_id: user._id,
      business_name,
      brand_name: brand_name || business_name,
      category,
      description,
      
      // üîê –í–°–ï –ê–î–†–ï–°–ê –ò –ö–û–ù–¢–ê–ö–¢–´ –£–ñ–ï –ó–ê–®–ò–§–†–û–í–ê–ù–´ –í InitialRequest
      address, // –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
      location,
      phone, // –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ  
      email, // –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
      floor_unit, // –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
      
      owner_name,
      owner_surname,
      cover_image_url,
      
      // üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ï –°–¢–ê–¢–£–°–´ –î–õ–Ø –≠–¢–ê–ü–ê 4
      content_status: 'awaiting_content', // –ü–∞—Ä—Ç–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
      is_approved: false, // –ë—É–¥–µ—Ç true –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      is_active: false, // –ë—É–¥–µ—Ç true –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞  
      is_public: false, // –ë—É–¥–µ—Ç true –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      
      legal_info_id // –°—Å—ã–ª–∫–∞ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    });

    await newPartnerProfile.save();

    return {
      success: true,
      partner: newPartnerProfile,
      message: '–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–ø–æ–ª–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.'
    };

  } catch (error) {
    console.error('Create partner account error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –≠–¢–ê–ü 3: –§–ò–ù–ê–õ–¨–ù–û–ï –û–î–û–ë–†–ï–ù–ò–ï –ü–ê–†–¢–ù–ï–†–ê (—Å–æ–∑–¥–∞–Ω–∏–µ PartnerProfile)
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
const finalApprovePartner = async (legalInfoId, adminId) => {
  const session = await mongoose.startSession();
  
  try {
    return await session.withTransaction(async () => {
      // 1Ô∏è‚É£ –ü–û–õ–£–ß–ê–ï–ú —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const legalInfo = await PartnerLegalInfo.findById(legalInfoId)
        .populate('user_id')
        .session(session);
      
      if (!legalInfo) {
        throw new Error('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      if (legalInfo.verification_status !== 'pending') {
        throw new Error('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      }

      // 2Ô∏è‚É£ –û–î–û–ë–†–Ø–ï–ú —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      await legalInfo.verify(adminId, '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –∑–∞—è–≤–∫—É
      const initialRequest = await InitialPartnerRequest.findOne({
        user_id: legalInfo.user_id._id
      }).session(session);

      if (!initialRequest) {
        throw new Error('–ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      await initialRequest.approveLegal(adminId, '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã');

      // 3Ô∏è‚É£ –°–û–ó–î–ê–ï–ú PartnerProfile (–ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ú–ï–°–¢–û –°–û–ó–î–ê–ù–ò–Ø!)
      const partnerProfileData = {
        user_id: legalInfo.user_id._id,
        business_name: initialRequest.business_data.business_name,
        brand_name: initialRequest.business_data.brand_name,
        category: initialRequest.business_data.category,
        description: initialRequest.business_data.description,
        
        // üîê –ë–µ—Ä–µ–º —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏
        address: initialRequest.business_data.address,
        location: initialRequest.business_data.location,
        phone: initialRequest.business_data.phone,
        email: initialRequest.business_data.email,
        floor_unit: initialRequest.business_data.floor_unit,
        
        owner_name: initialRequest.business_data.owner_name,
        owner_surname: initialRequest.business_data.owner_surname,
        cover_image_url: initialRequest.business_data.cover_image_url,
        legal_info_id: legalInfo._id
      };

      const newPartner = await createPartnerAccount(partnerProfileData);

      return {
        success: true,
        partner: newPartner.partner,
        legalInfo: legalInfo,
        initialRequest: initialRequest
      };
    });

  } catch (error) {
    console.error('Final approve partner error:', error);
    throw error;
  } finally {
    await session.endSession();
  }
};

// ================ –≠–¢–ê–ü 4-5: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–û–ú ================

/**
 * ‚úÖ –≠–¢–ê–ü 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
 */
const submitContentForReview = async (userId) => {
  try {
    const profile = await PartnerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (profile.content_status !== 'awaiting_content' && profile.content_status !== 'content_added') {
      throw new Error('–ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ–¥–æ–±—Ä–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∑–∞—è–≤–∫–∏
    profile.content_status = 'pending_review';
    await profile.save();

    await InitialPartnerRequest.findOneAndUpdate(
      { user_id: userId },
      { status: 'content_review' }
    );

    return {
      success: true,
      message: '–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é',
      profile: profile
    };

  } catch (error) {
    console.error('Submit content for review error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –≠–¢–ê–ü 5: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
const updatePartnerContentStatus = async (profileId, newStatus, adminId = null) => {
  try {
    const profile = await PartnerProfile.findById(profileId);
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    profile.content_status = newStatus;

    // –≠–¢–ê–ü 6: –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω - –¥–µ–ª–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—É–±–ª–∏—á–Ω—ã–º!
    if (newStatus === 'approved') {
      profile.is_approved = true;
      profile.is_active = true;
      profile.is_public = true;
      profile.published_at = new Date();
      
      if (adminId) {
        profile.approved_by = adminId;
        profile.approved_at = new Date();
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–µ
      await InitialPartnerRequest.findOneAndUpdate(
        { user_id: profile.user_id },
        { status: 'completed' }
      );
    }

    await profile.save();

    return {
      success: true,
      profile: profile,
      message: `–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${newStatus}"`
    };

  } catch (error) {
    console.error('Update partner content status error:', error);
    throw error;
  }
};

// ================ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (–¥–ª—è —Å–∞–π—Ç–∞)
 */
const getPublicPartners = async (filters = {}) => {
  try {
    const { category, lat, lng, radius = 5 } = filters;
    
    let query = {
      is_public: true,
      is_active: true,
      is_approved: true
    };

    if (category) {
      query.category = category;
    }

    // –ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if (lat && lng) {
      query.location = {
        $near: {
          $geometry: {
            type: 'Point',
            coordinates: [lng, lat]
          },
          $maxDistance: radius * 1000 // –∫–º –≤ –º–µ—Ç—Ä—ã
        }
      };
    }

    const partners = await PartnerProfile.find(query)
      .select('business_name brand_name category description location ratings working_hours cover_image_url')
      .sort({ 'ratings.avg_rating': -1 })
      .limit(50);

    return {
      success: true,
      partners: partners,
      count: partners.length
    };

  } catch (error) {
    console.error('Get public partners error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const getPartnerStats = async (userId) => {
  try {
    const profile = await PartnerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      success: true,
      stats: profile.stats,
      ratings: profile.ratings,
      status: {
        is_public: profile.is_public,
        is_active: profile.is_active,
        content_status: profile.content_status,
        published_at: profile.published_at
      }
    };

  } catch (error) {
    console.error('Get partner stats error:', error);
    throw error;
  }
};

// ================ –ï–î–ò–ù–´–ô –≠–ö–°–ü–û–†–¢ ================
export {
  // –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
  loginPartner,
  getPartnerById,
  
  // –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø (–¢–û–õ–¨–ö–û –ó–î–ï–°–¨!)
  createPartnerAccount,
  finalApprovePartner,
  
  // –≠–¢–ê–ü 4-5: –ö–û–ù–¢–ï–ù–¢
  submitContentForReview,
  updatePartnerContentStatus,
  
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û
  getPublicPartners,
  getPartnerStats
};