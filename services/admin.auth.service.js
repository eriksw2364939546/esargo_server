// services/admin.auth.service.js (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
import { AdminUser } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { hashString, hashMeta, comparePassword } from '../utils/hash.js';
import { generateCustomerToken } from './token.service.js';

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {object} adminData - –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export const createAdminAccount = async (adminData) => {
  try {
    let { 
      full_name, 
      email, 
      password, 
      role, 
      department, 
      contact_info 
    } = adminData;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!full_name || !email || !password || !role) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: full_name, email, password, role');
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email
    email = email.toLowerCase().trim();

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
    const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(email), 'admin');

    if (metaInfo) {
      return { 
        isNewAdmin: false, 
        admin: metaInfo.admin 
      };
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await hashString(password);

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const newAdmin = new AdminUser({
      full_name,
      email,
      password_hash: hashedPassword,
      role,
      contact_info: {
        department: department || 'general',
        ...contact_info
      },
      is_active: true,
      created_by: null, // –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ —Å—Å—ã–ª–∫–∏
      permissions: getDefaultPermissions(role)
    });

    await newAdmin.save();

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º Meta –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
    const newMetaInfo = await Meta.createForAdmin(newAdmin._id, hashMeta(email));

    await newMetaInfo.save(); // –£–±–∏—Ä–∞–µ–º —Ç–∞–∫ –∫–∞–∫ createForAdmin —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç

    return { 
      isNewAdmin: true, 
      admin: newAdmin
    };

  } catch (error) {
    console.error('Create admin account error:', error);
    throw error;
  }
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {object} loginData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export const loginAdmin = async ({ email, password }) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      const error = new Error('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      error.statusCode = 400;
      throw error;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email
    email = email.toLowerCase().trim();

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Å populate
    const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(email), 'admin');

    if (!metaInfo || !metaInfo.admin) {
      const error = new Error('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      error.statusCode = 404;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    if (metaInfo.admin.isAccountLocked()) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞');
      error.statusCode = 423;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!metaInfo.admin.is_active) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      error.statusCode = 403;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É
    if (metaInfo.admin.isSuspended()) {
      const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      error.statusCode = 403;
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await comparePassword(password, metaInfo.admin.password_hash);
    
    if (!isPasswordValid) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      await metaInfo.admin.incrementLoginAttempts();
      
      const error = new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      error.statusCode = 401;
      throw error;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
    await metaInfo.admin.resetLoginAttempts();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∞
    await metaInfo.admin.recordActivity();

    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const token = generateCustomerToken({
      user_id: metaInfo.admin._id, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id
      _id: metaInfo.admin._id,
      email: metaInfo.admin.email,
      role: 'admin', // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ–≥–¥–∞ 'admin' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ middleware
      admin_role: metaInfo.admin.role, // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ä–æ–ª—å
      is_admin: true // üÜï –î–û–ë–ê–í–õ–ï–ù–û: —Ñ–ª–∞–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    }, '8h'); // –ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

    return { 
      token,
      admin: {
        id: metaInfo.admin._id,
        email: metaInfo.admin.email,
        full_name: metaInfo.admin.full_name,
        role: metaInfo.admin.role,
        department: metaInfo.admin.contact_info?.department,
        permissions: metaInfo.admin.permissions,
        is_admin: true // üÜï –î–û–ë–ê–í–õ–ï–ù–û
      }
    };

  } catch (error) {
    console.error('Login admin error:', error);
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID (–¥–ª—è middleware)
 * @param {string} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @returns {object} - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
 */
export const getAdminById = async (adminId) => {
  try {
    const admin = await AdminUser.findById(adminId).select('-password_hash');
    if (!admin) return null;

    // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ isAdmin –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    admin.isAdmin = function() {
      return ['admin', 'manager', 'owner', 'support', 'moderator'].includes(this.role);
    };

    return admin;
  } catch (error) {
    console.error('Get admin by ID error:', error);
    return null;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {object} admin - –û–±—ä–µ–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {string} section - –†–∞–∑–¥–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'partners')
 * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'read', 'write')
 * @returns {boolean} - –ï—Å—Ç—å –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
 */
export const checkAdminPermission = (admin, section, action) => {
  try {
    // –í–ª–∞–¥–µ–ª–µ—Ü –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
    if (admin.role === 'owner') {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const sectionPermissions = admin.permissions[section];
    if (!sectionPermissions) {
      return false;
    }

    return sectionPermissions[action] === true;
  } catch (error) {
    console.error('Check admin permission error:', error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–æ–ª–∏
 * @param {string} role - –†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @returns {object} - –û–±—ä–µ–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 */
const getDefaultPermissions = (role) => {
  const basePermissions = {
    dashboard: { read: false, write: false },
    users: { read: false, write: false, delete: false },
    partners: { read: false, write: false, approve: false },
    couriers: { read: false, write: false, approve: false },
    orders: { read: false, write: false, cancel: false },
    finance: { read: false, write: false },
    analytics: { read: false, write: false },
    system: { read: false, write: false, maintain: false }
  };

  switch (role) {
    case 'owner':
      // –í–ª–∞–¥–µ–ª–µ—Ü –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
      Object.keys(basePermissions).forEach(section => {
        Object.keys(basePermissions[section]).forEach(action => {
          basePermissions[section][action] = true;
        });
      });
      break;

    case 'manager':
      // –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º–µ–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–∞–≤ –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
      basePermissions.dashboard = { read: true, write: true };
      basePermissions.users = { read: true, write: true, delete: false };
      basePermissions.partners = { read: true, write: true, approve: true };
      basePermissions.couriers = { read: true, write: true, approve: true };
      basePermissions.orders = { read: true, write: true, cancel: true };
      basePermissions.finance = { read: true, write: false };
      basePermissions.analytics = { read: true, write: false };
      break;

    case 'admin': // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω
      // –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞
      basePermissions.dashboard = { read: true, write: false };
      basePermissions.users = { read: true, write: true, delete: false };
      basePermissions.partners = { read: true, write: true, approve: true };
      basePermissions.couriers = { read: true, write: false, approve: false };
      basePermissions.orders = { read: true, write: true, cancel: true };
      basePermissions.analytics = { read: true, write: false };
      break;

    case 'support':
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
      basePermissions.dashboard = { read: true, write: false };
      basePermissions.users = { read: true, write: false, delete: false };
      basePermissions.partners = { read: true, write: false, approve: false };
      basePermissions.couriers = { read: true, write: false, approve: false };
      basePermissions.orders = { read: true, write: true, cancel: false };
      break;

    case 'moderator':
      // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –∑–∞—è–≤–∫–∞–º–∏
      basePermissions.dashboard = { read: true, write: false };
      basePermissions.partners = { read: true, write: true, approve: true };
      basePermissions.couriers = { read: true, write: true, approve: false };
      basePermissions.orders = { read: true, write: false, cancel: false };
      break;
  }

  return basePermissions;
};