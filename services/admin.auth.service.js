// ================ services/admin.auth.service.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –° –û–¢–õ–ê–î–ö–û–ô) ================
import { AdminUser } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { hashString, hashMeta } from '../utils/hash.js';
import { generateCustomerToken } from './token.service.js';

 const createAdminAccount = async (adminData) => {
    try {
        let { full_name, email, password, role, department } = adminData;

        console.log('üîç CREATE ADMIN ACCOUNT - Start:', {
            full_name, email, role, department
        });

        // ‚úÖ –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!full_name || !email || !password || !role) {
            throw new Error('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: full_name, email, password, role');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if (full_name.trim().length < 2) {
            throw new Error('–ü–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        }

        if (full_name.length > 100) {
            throw new Error('–ü–æ–ª–Ω–æ–µ –∏–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
        }

        email = email.toLowerCase().trim();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if (password.length < 8) {
            throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
        }

        if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(password)) {
            throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
        const allowedRoles = ['admin', 'manager', 'support', 'moderator'];
        if (!allowedRoles.includes(role)) {
            throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ: ${allowedRoles.join(', ')}`);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
        const allowedDepartments = ['general', 'support', 'operations', 'finance', 'marketing', 'technical'];
        if (department && !allowedDepartments.includes(department)) {
            throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ: ${allowedDepartments.join(', ')}`);
        }

        console.log('‚úÖ VALIDATION PASSED');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Meta
        const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(email), 'admin');

        if (metaInfo) {
            return { isNewAdmin: false, admin: metaInfo.admin };
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await hashString(password);

        // ‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï AdminUser —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        const newAdmin = new AdminUser({
            full_name: full_name.trim(),
            email: email,
            password_hash: hashedPassword,
            role: role,
            contact_info: {
                department: department || 'general',
                created_by: 'system', // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
                creation_notes: `–ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —Å —Ä–æ–ª—å—é ${role}`
            },
            permissions: {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ —Ä–æ–ª–∏
                can_view_reports: ['manager', 'owner'].includes(role),
                can_manage_users: ['manager', 'owner'].includes(role),
                can_manage_partners: ['manager', 'owner'].includes(role),
                can_manage_system: role === 'owner',
                can_delete_data: role === 'owner'
            },
            security_settings: {
                require_2fa: role === 'owner', // –î–ª—è owner –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ 2FA
                session_timeout: role === 'owner' ? 4 : 8, // –ß–∞—Å—ã
                allowed_ip_ranges: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ = —Ä–∞–∑—Ä–µ—à–µ–Ω –ª—é–±–æ–π IP
                password_change_required: true // –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
            },
            is_active: true,
            account_status: 'active'
        });

        await newAdmin.save();

        // –°–æ–∑–¥–∞–µ–º Meta –∑–∞–ø–∏—Å—å
        await Meta.createForAdmin(newAdmin._id, hashMeta(email));

        console.log('‚úÖ ADMIN CREATED WITH VALIDATION:', {
            admin_id: newAdmin._id,
            role: newAdmin.role,
            department: newAdmin.contact_info.department,
            has_permissions: !!newAdmin.permissions
        });

        return { isNewAdmin: true, admin: newAdmin };

    } catch (error) {
        console.error('üö® CREATE ADMIN ACCOUNT ERROR:', error);
        throw error;
    }
};

 const loginAdmin = async (loginData) => {
    try {
        // üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
        console.log('üîç LOGIN ADMIN - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            loginData,
            loginData_type: typeof loginData,
            has_email: !!loginData?.email,
            has_password: !!loginData?.password,
            email_value: loginData?.email,
            password_provided: !!loginData?.password
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if (!loginData || typeof loginData !== 'object') {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞');
        }

        const { email, password } = loginData;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!email || !password) {
            throw new Error('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        console.log('üîç LOGIN ADMIN - –û–±—Ä–∞–±–æ—Ç–∫–∞:', {
            original_email: email,
            password_length: password ? password.length : 0
        });

        const normalizedEmail = email.toLowerCase().trim();

        console.log('üîç LOGIN ADMIN - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ:', {
            normalized_email: normalizedEmail,
            hashed_email: hashMeta(normalizedEmail)
        });

        const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(normalizedEmail), 'admin');

        console.log('üîç LOGIN ADMIN - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', {
            metaInfo_found: !!metaInfo,
            has_admin: !!(metaInfo?.admin),
            admin_id: metaInfo?.admin?._id,
            admin_email: metaInfo?.admin?.email
        });

        if (!metaInfo || !metaInfo.admin) {
            const error = new Error('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            error.statusCode = 404;
            throw error;
        }

        if (!metaInfo.admin.is_active) {
            const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            error.statusCode = 403;
            throw error;
        }

        console.log('üîç LOGIN ADMIN - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ AdminUser
        const isPasswordValid = await metaInfo.admin.comparePassword(password);

        console.log('üîç LOGIN ADMIN - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', {
            password_valid: isPasswordValid
        });

        if (!isPasswordValid) {
            await metaInfo.admin.incrementLoginAttempts();
            
            const error = new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            error.statusCode = 401;
            throw error;
        }

        // –°–±—Ä–æ—Å –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await metaInfo.admin.resetLoginAttempts();
        await metaInfo.admin.recordActivity();

        console.log('üîç LOGIN ADMIN - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞...');

        const token = generateCustomerToken({
            _id: metaInfo.admin._id,
            email: metaInfo.admin.email,
            role: 'admin',
            admin_role: metaInfo.admin.role
        }, '8h');

        console.log('üîç LOGIN ADMIN - –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:', {
            token_length: token ? token.length : 0,
            has_token: !!token
        });

        const result = {
            token,
            admin: {
                id: metaInfo.admin._id,
                email: metaInfo.admin.email,
                full_name: metaInfo.admin.full_name,
                role: metaInfo.admin.role,
                department: metaInfo.admin.contact_info?.department
            }
        };

        console.log('‚úÖ LOGIN ADMIN - –£—Å–ø–µ—à–Ω–æ:', {
            admin_id: result.admin.id,
            admin_email: result.admin.email,
            admin_role: result.admin.role
        });

        return result;

    } catch (error) {
        console.error('üö® LOGIN ADMIN - –û—à–∏–±–∫–∞:', error);
        throw error;
    }
};


export { createAdminAccount, loginAdmin }