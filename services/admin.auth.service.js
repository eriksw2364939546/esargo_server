// ================ services/admin.auth.service.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –° –û–¢–õ–ê–î–ö–û–ô) ================
import { AdminUser } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { hashString, hashMeta } from '../utils/hash.js';
import { generateCustomerToken } from './token.service.js';

export const createAdminAccount = async (adminData) => {
    try {
        let { full_name, email, password, role, department } = adminData;

        if (!full_name || !email || !password || !role) {
            throw new Error('Missing required fields');
        }

        email = email.toLowerCase().trim();

        const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(email), 'admin');

        if (metaInfo) {
            return { isNewAdmin: false, admin: metaInfo.admin };
        }

        const hashedPassword = await hashString(password);

        const newAdmin = new AdminUser({
            full_name,
            email,
            password_hash: hashedPassword,
            role,
            contact_info: {
                department: department || 'general'
            },
            is_active: true
        });

        await newAdmin.save();
        await Meta.createForAdmin(newAdmin._id, hashMeta(email));

        return { isNewAdmin: true, admin: newAdmin };

    } catch (error) {
        throw error;
    }
};

export const loginAdmin = async (loginData) => {
    try {
        // üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
        console.log('üîç LOGIN ADMIN - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            loginData,
            loginData_type: typeof loginData,
            has_email: !!loginData?.email,
            has_password: !!loginData?.password,
            email_value: loginData?.email,
            password_provided: !!loginData?.password
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if (!loginData || typeof loginData !== 'object') {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞');
        }

        const { email, password } = loginData;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!email || !password) {
            throw new Error('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        console.log('üîç LOGIN ADMIN - –û–±—Ä–∞–±–æ—Ç–∫–∞:', {
            original_email: email,
            password_length: password ? password.length : 0
        });

        const normalizedEmail = email.toLowerCase().trim();

        console.log('üîç LOGIN ADMIN - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ:', {
            normalized_email: normalizedEmail,
            hashed_email: hashMeta(normalizedEmail)
        });

        const metaInfo = await Meta.findByEmailAndRoleWithUser(hashMeta(normalizedEmail), 'admin');

        console.log('üîç LOGIN ADMIN - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', {
            metaInfo_found: !!metaInfo,
            has_admin: !!(metaInfo?.admin),
            admin_id: metaInfo?.admin?._id,
            admin_email: metaInfo?.admin?.email
        });

        if (!metaInfo || !metaInfo.admin) {
            const error = new Error('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            error.statusCode = 404;
            throw error;
        }

        if (!metaInfo.admin.is_active) {
            const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            error.statusCode = 403;
            throw error;
        }

        console.log('üîç LOGIN ADMIN - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ AdminUser
        const isPasswordValid = await metaInfo.admin.comparePassword(password);

        console.log('üîç LOGIN ADMIN - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', {
            password_valid: isPasswordValid
        });

        if (!isPasswordValid) {
            await metaInfo.admin.incrementLoginAttempts();
            
            const error = new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            error.statusCode = 401;
            throw error;
        }

        // –°–±—Ä–æ—Å –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await metaInfo.admin.resetLoginAttempts();
        await metaInfo.admin.recordActivity();

        console.log('üîç LOGIN ADMIN - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞...');

        const token = generateCustomerToken({
            _id: metaInfo.admin._id,
            email: metaInfo.admin.email,
            role: 'admin',
            admin_role: metaInfo.admin.role
        }, '8h');

        console.log('üîç LOGIN ADMIN - –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:', {
            token_length: token ? token.length : 0,
            has_token: !!token
        });

        const result = {
            token,
            admin: {
                id: metaInfo.admin._id,
                email: metaInfo.admin.email,
                full_name: metaInfo.admin.full_name,
                role: metaInfo.admin.role,
                department: metaInfo.admin.contact_info?.department
            }
        };

        console.log('‚úÖ LOGIN ADMIN - –£—Å–ø–µ—à–Ω–æ:', {
            admin_id: result.admin.id,
            admin_email: result.admin.email,
            admin_role: result.admin.role
        });

        return result;

    } catch (error) {
        console.error('üö® LOGIN ADMIN - –û—à–∏–±–∫–∞:', error);
        throw error;
    }
};