// services/partner.register.service.js - –ò–°–ü–†–ê–í–õ–ï–ù –î–õ–Ø –í–û–ó–í–†–ê–¢–ê –¢–û–ö–ï–ù–ê üéØ
import { User, InitialPartnerRequest, PartnerLegalInfo } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { hashString, hashMeta } from '../utils/hash.js';
import { cryptoString, decryptString } from '../utils/crypto.js';
import { generateCustomerToken } from './token.service.js';
import mongoose from 'mongoose';

// ================ üéØ –≠–¢–ê–ü 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ================

/**
 * ‚úÖ –≠–¢–ê–ü 1: –¢–û–õ–¨–ö–û User + InitialPartnerRequest
 * ‚ùå –ù–ï —Å–æ–∑–¥–∞–µ–º PartnerProfile (—Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä.–¥–∞–Ω–Ω—ã—Ö)
 */
export const registerPartnerWithInitialRequest = async (registrationData) => {
  const session = await mongoose.startSession();
  
  try {
    console.log('üîç STARTING PARTNER REGISTRATION:', {
      email: registrationData.email,
      business_name: registrationData.business_name
    });

    const result = await session.withTransaction(async () => {
      const {
        // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_name,
        last_name, 
        email,
        password,
        phone,
        
        // –î–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å–∞
        business_name,
        brand_name,
        category, // restaurant/store
        address,
        location,
        floor_unit,
        whatsapp_consent = false,
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        registration_ip,
        user_agent
      } = registrationData;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
      const normalizedEmail = email.toLowerCase().trim();
      const hashedEmail = hashMeta(normalizedEmail);
      
      console.log('üîç CHECKING EXISTING USER:', {
        normalized_email: normalizedEmail,
        hashed_email: hashedEmail
      });
      
      const existingMeta = await Meta.findByEmailHash(hashedEmail);
      if (existingMeta) {
        console.log('üö® USER EXISTS:', existingMeta._id);
        const error = new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        error.statusCode = 400;
        throw error;
      }

      // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º location –≤ GeoJSON —Ñ–æ—Ä–º–∞—Ç
      let geoLocation;
      if (location && location.lat && location.lng) {
        geoLocation = {
          type: 'Point',
          coordinates: [location.lng, location.lat] // [longitude, latitude] - –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!
        };
      } else {
        const error = new Error('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã (lat, lng)');
        error.statusCode = 400;
        throw error;
      }

      console.log('üîç CREATING USER...');

      // 1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º User —Å —Ä–æ–ª—å—é 'partner'
      const newUser = new User({
        email: normalizedEmail, // ‚úÖ –û–¢–ö–†–´–¢–û (–Ω—É–∂–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        password_hash: await hashString(password),
        role: 'partner', // üéØ –°–†–ê–ó–£ –ü–ê–†–¢–ù–ï–† (–º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç)
        is_active: true,
        is_email_verified: false,
        gdpr_consent: {
          data_processing: true,
          marketing: whatsapp_consent,
          analytics: true,
          consent_date: new Date()
        },
        registration_source: 'web',
        registration_ip,
        user_agent
      });

      await newUser.save({ session });
      
      console.log('‚úÖ USER CREATED:', {
        user_id: newUser._id,
        email: newUser.email,
        role: newUser.role
      });

      // 2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º Meta –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      const newMetaInfo = await Meta.createForPartner(newUser._id, hashedEmail);
      
      console.log('‚úÖ META CREATED:', {
        meta_id: newMetaInfo._id,
        user_id: newMetaInfo.user_id
      });

      // 3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û InitialPartnerRequest (–∑–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞)
      // ‚ùå –ù–ï –°–û–ó–î–ê–ï–ú PartnerProfile (—Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≠–¢–ê–ü–ï 3!)
      const newInitialRequest = new InitialPartnerRequest({
        user_id: newUser._id,
        personal_data: {
          first_name,
          last_name,
          phone: cryptoString(phone), // üîê –®–∏—Ñ—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
          email: normalizedEmail // ‚úÖ Email –æ—Ç–∫—Ä—ã—Ç–æ (–∫–æ–ø–∏—è –∏–∑ User)
        },
        business_data: {
          // ‚úÖ –û–¢–ö–†–´–¢–´–ï –î–ê–ù–ù–´–ï (–¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞)
          business_name,
          brand_name: brand_name || business_name,
          category,
          description: `${category === 'restaurant' ? '–†–µ—Å—Ç–æ—Ä–∞–Ω' : '–ú–∞–≥–∞–∑–∏–Ω'} ${business_name}`,
          
          // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï (–∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã)
          address: cryptoString(address),
          phone: cryptoString(phone),
          email: cryptoString(normalizedEmail),
          floor_unit: floor_unit ? cryptoString(floor_unit) : null,
          
          // ‚úÖ –ì–ï–û–õ–û–ö–ê–¶–ò–Ø (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π GeoJSON —Ñ–æ—Ä–º–∞—Ç)
          location: geoLocation,
          
          // ‚úÖ –í–õ–ê–î–ï–õ–ï–¶ (–∏–º–µ–Ω–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã)
          owner_name: first_name,
          owner_surname: last_name
        },
        registration_info: {
          registration_ip,
          user_agent,
          whatsapp_consent,
          consent_date: new Date()
        }
      });

      await newInitialRequest.save({ session });
      
      console.log('‚úÖ INITIAL REQUEST CREATED:', {
        request_id: newInitialRequest._id,
        status: newInitialRequest.status
      });

      // 4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
      console.log('üîç GENERATING TOKEN...');
      
      const tokenPayload = {
        user_id: newUser._id,
        _id: newUser._id,
        email: newUser.email,
        role: 'partner',
        is_admin: false
      };
      
      console.log('üîç TOKEN PAYLOAD:', tokenPayload);
      
      const token = generateCustomerToken(tokenPayload, '30d');
      
      console.log('üîç TOKEN GENERATION RESULT:', {
        token_created: !!token,
        token_length: token ? token.length : 0,
        token_preview: token ? token.substring(0, 20) + '...' : 'NO_TOKEN'
      });

      if (!token) {
        console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è!');
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
      }

      const responseData = {
        success: true,
        user: {
          id: newUser._id,
          email: newUser.email,
          role: newUser.role,
          is_email_verified: newUser.is_email_verified
        },
        request: {
          _id: newInitialRequest._id,
          status: newInitialRequest.status,
          business_name: newInitialRequest.business_data.business_name,
          category: newInitialRequest.business_data.category
        },
        token,
        next_steps: [
          '–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
          '–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
          '–í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
        ]
      };
      
      console.log('‚úÖ REGISTRATION COMPLETE:', {
        success: responseData.success,
        user_id: responseData.user.id,
        has_token: !!responseData.token,
        token_length: responseData.token ? responseData.token.length : 0
      });

      return responseData;
    });

    console.log('‚úÖ TRANSACTION COMPLETE:', {
      success: result.success,
      has_token: !!result.token
    });

    return result;

  } catch (error) {
    console.error('üö® REGISTER PARTNER ERROR:', {
      message: error.message,
      statusCode: error.statusCode,
      stack: error.stack
    });
    throw error;
  } finally {
    await session.endSession();
  }
};

// ================ üìä DASHBOARD –ò –°–¢–ê–¢–£–°–´ ================

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
export const getPartnerDashboardStatus = async (userId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const request = await InitialPartnerRequest.findOne({ user_id: userId });
    if (!request) {
      throw new Error('–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    let legalInfo = null;
    if (request.status !== 'pending') {
      legalInfo = await PartnerLegalInfo.findOne({
        partner_request_id: request._id
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
    let currentStep = 1;
    let stepName = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏";
    let nextSteps = [];
    let canAccess = {};

    switch (request.status) {
      case 'pending':
        currentStep = 1;
        stepName = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏";
        nextSteps = [
          "–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
          "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
          "–í —Å–ª—É—á–∞–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        ];
        canAccess = {
          dashboard: true,
          personal_data: true,
          legal_forms: false,
          profile_editing: false,
          menu_management: false
        };
        break;

      case 'approved':
        currentStep = 2;
        stepName = "–ü–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö";
        nextSteps = [
          "–ü–æ–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É",
          "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ SIRET, –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞",
          "–ü–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
        ];
        canAccess = {
          dashboard: true,
          personal_data: true,
          legal_forms: true,
          profile_editing: false,
          menu_management: false
        };
        break;

      case 'legal_submitted':
        currentStep = 3;
        stepName = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö";
        nextSteps = [
          "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
          "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π",
          "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏"
        ];
        canAccess = {
          dashboard: true,
          personal_data: true,
          legal_forms: false,
          profile_editing: false,
          menu_management: false
        };
        break;

      case 'legal_approved':
        currentStep = 4;
        stepName = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞";
        nextSteps = [
          "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞/–º–∞–≥–∞–∑–∏–Ω–∞",
          "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ",
          "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏ —Ü–µ–Ω—ã",
          "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        ];
        canAccess = {
          dashboard: true,
          personal_data: true,
          legal_forms: false,
          profile_editing: true,
          menu_management: true
        };
        break;

      default:
        currentStep = 1;
        stepName = "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
        nextSteps = ["–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"];
        canAccess = {
          dashboard: true,
          personal_data: false,
          legal_forms: false,
          profile_editing: false,
          menu_management: false
        };
    }

    return {
      workflow: {
        current_step: currentStep,
        step_name: stepName,
        next_steps: nextSteps
      },
      request: {
        id: request._id,
        status: request.status,
        business_name: request.business_data.business_name,
        category: request.business_data.category,
        created_at: request.createdAt
      },
      legal_info: legalInfo ? {
        id: legalInfo._id,
        status: legalInfo.verification_status,
        submitted_at: legalInfo.createdAt
      } : null,
      access_permissions: canAccess
    };

  } catch (error) {
    console.error('Get partner dashboard status error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏
 */
export const checkPartnerAccess = async (userId, feature) => {
  try {
    const dashboardData = await getPartnerDashboardStatus(userId);
    const permissions = dashboardData.access_permissions;

    const hasAccess = permissions[feature] || false;
    
    let reason = null;
    if (!hasAccess) {
      switch (feature) {
        case 'legal_forms':
          reason = "–î–æ—Å—Ç—É–ø –∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏";
          break;
        case 'profile_editing':
          reason = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö";
          break;
        case 'menu_management':
          reason = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è";
          break;
        default:
          reason = "–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ";
      }
    }

    return {
      has_access: hasAccess,
      reason,
      current_step: dashboardData.workflow.current_step,
      required_step: feature === 'legal_forms' ? 2 : feature === 'profile_editing' ? 4 : 1
    };

  } catch (error) {
    console.error('Check partner access error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
export const getDecryptedPartnerData = async (userId) => {
  try {
    const request = await InitialPartnerRequest.findOne({ user_id: userId });
    if (!request) {
      throw new Error('–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const user = await User.findById(userId).select('-password_hash');
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const personalData = {
      first_name: request.personal_data.first_name,
      last_name: request.personal_data.last_name,
      email: request.personal_data.email,
      phone: decryptString(request.personal_data.phone)
    };

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –±–∏–∑–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ
    const businessData = {
      business_name: request.business_data.business_name,
      brand_name: request.business_data.brand_name,
      category: request.business_data.category,
      description: request.business_data.description,
      address: decryptString(request.business_data.address),
      phone: decryptString(request.business_data.phone),
      email: decryptString(request.business_data.email),
      floor_unit: request.business_data.floor_unit ? decryptString(request.business_data.floor_unit) : null,
      location: request.business_data.location,
      owner_name: request.business_data.owner_name,
      owner_surname: request.business_data.owner_surname
    };

    return {
      user: {
        id: user._id,
        email: user.email,
        role: user.role,
        is_email_verified: user.is_email_verified,
        created_at: user.createdAt
      },
      personal_data: personalData,
      business_data: businessData,
      registration_info: request.registration_info,
      request_status: request.status,
      created_at: request.createdAt
    };

  } catch (error) {
    console.error('Get decrypted partner data error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export const encryptLegalData = async (legalData) => {
  try {
    const {
      user_id,
      partner_request_id,
      legal_name,
      siret_number,
      legal_form,
      business_address,
      contact_person,
      contact_phone,
      bank_details,
      tax_number,
      additional_info,
      submitted_ip,
      user_agent
    } = legalData;

    const newLegalInfo = new PartnerLegalInfo({
      user_id,
      partner_request_id,
      
      // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      legal_data: {
        legal_name: cryptoString(legal_name),
        siret_number: cryptoString(siret_number),
        legal_form: cryptoString(legal_form),
        business_address: cryptoString(business_address),
        contact_person: cryptoString(contact_person),
        contact_phone: cryptoString(contact_phone),
        bank_details: bank_details ? cryptoString(JSON.stringify(bank_details)) : null,
        tax_number: tax_number ? cryptoString(tax_number) : null,
        additional_info: additional_info ? cryptoString(additional_info) : null
      },
      
      submission_info: {
        submitted_at: new Date(),
        submitted_ip,
        user_agent
      },
      
      verification_status: 'pending'
    });

    await newLegalInfo.save();
    
    console.log('‚úÖ LEGAL DATA ENCRYPTED AND SAVED:', {
      legal_info_id: newLegalInfo._id,
      user_id,
      partner_request_id
    });

    return newLegalInfo;

  } catch (error) {
    console.error('Encrypt legal data error:', error);
    throw error;
  }
};