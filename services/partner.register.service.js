// services/partner.register.service.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
import { User, InitialPartnerRequest } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { hashString, hashMeta } from '../utils/hash.js';
import { generateCustomerToken } from './token.service.js';
import mongoose from 'mongoose';

/**
 * ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ User + InitialPartnerRequest (–∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ 1)
 * –ü–∞—Ä—Ç–Ω–µ—Ä —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å 'partner' –∏ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
 * –ù–û –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ—á—Ç–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
 */
export const registerPartnerWithInitialRequest = async (registrationData) => {
  const session = await mongoose.startSession();
  
  try {
    return await session.withTransaction(async () => {
      const {
        // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_name,
        last_name, 
        email,
        password,
        phone,
        
        // –î–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1)
        business_name,
        brand_name,
        category, // restaurant/store
        address,
        location,
        floor_unit,
        whatsapp_consent = false,
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        registration_ip,
        user_agent
      } = registrationData;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
      const normalizedEmail = email.toLowerCase().trim();
      const hashedEmail = hashMeta(normalizedEmail);
      
      const existingMeta = await Meta.findByEmailHash(hashedEmail);
      if (existingMeta) {
        const error = new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        error.statusCode = 400;
        throw error;
      }

      // 1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º User —Å —Ä–æ–ª—å—é 'partner'
      const newUser = new User({
        email: normalizedEmail,
        password_hash: await hashString(password),
        role: 'partner', // üéØ –°–†–ê–ó–£ –ü–ê–†–¢–ù–ï–† (–º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç)
        is_active: true,
        is_email_verified: false,
        gdpr_consent: {
          data_processing: true,
          marketing: whatsapp_consent,
          analytics: true,
          consent_date: new Date()
        },
        registration_source: 'web',
        registration_ip,
        user_agent
      });

      await newUser.save({ session });

      // 2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º Meta –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      const newMetaInfo = await Meta.createForPartner(newUser._id, hashedEmail);

      // 3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º InitialPartnerRequest (–∑–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞)
      const newPartnerRequest = new InitialPartnerRequest({
        user_id: newUser._id,
        personal_data: {
          first_name,
          last_name,
          phone,
          email: normalizedEmail
        },
        business_data: {
          business_name,
          brand_name: brand_name || business_name,
          category,
          description: `${category === 'restaurant' ? '–†–µ—Å—Ç–æ—Ä–∞–Ω' : '–ú–∞–≥–∞–∑–∏–Ω'} ${business_name}`,
          address,
          location,
          floor_unit,
          phone,
          email: normalizedEmail,
          owner_name: first_name,
          owner_surname: last_name
        },
        registration_info: {
          registration_ip,
          user_agent,
          whatsapp_consent,
          consent_date: new Date()
        },
        status: 'pending', // –ñ–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
        submitted_at: new Date()
      });

      await newPartnerRequest.save({ session });

      // 4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω 
      const token = generateCustomerToken({
        user_id: newUser._id,
        email: newUser.email,
        role: newUser.role
      });

      return {
        success: true,
        user: {
          id: newUser._id,
          email: newUser.email,
          role: newUser.role,
          is_active: newUser.is_active,
          is_email_verified: newUser.is_email_verified
        },
        request: {
          id: newPartnerRequest._id,
          business_name: newPartnerRequest.business_data.business_name,
          category: newPartnerRequest.business_data.category,
          status: newPartnerRequest.status,
          submitted_at: newPartnerRequest.submitted_at
        },
        token
      };
    });

  } catch (error) {
    console.error('Register partner with initial request error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
 */
export const getPartnerDashboardStatus = async (userId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const request = await InitialPartnerRequest.findOne({ user_id: userId });
    
    if (!request) {
      return {
        hasRequest: false,
        dashboard_state: 'no_request',
        message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        can_access_features: false,
        show_legal_form: false,
        admin_action_needed: false
      };
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    const statusConfig = {
      'pending': {
        dashboard_state: 'awaiting_approval',
        message: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        can_access_features: false,
        show_legal_form: false,
        admin_action_needed: true
      },
      'approved': {
        dashboard_state: 'need_legal_info',
        message: '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        can_access_features: false,
        show_legal_form: true, // üéØ –ü–û–ö–ê–ó–ê–¢–¨ –§–û–†–ú–£ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø 2
        admin_action_needed: false
      },
      'awaiting_legal_info': {
        dashboard_state: 'need_legal_info',
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        can_access_features: false,
        show_legal_form: true,
        admin_action_needed: false
      },
      'under_review': {
        dashboard_state: 'legal_review',
        message: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        can_access_features: false,
        show_legal_form: false,
        admin_action_needed: true
      },
      'rejected': {
        dashboard_state: 'rejected',
        message: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
        can_access_features: false,
        show_legal_form: false,
        admin_action_needed: false,
        rejection_reason: request.review_info?.rejection_reason
      }
    };

    const config = statusConfig[request.status] || statusConfig['pending'];

    return {
      hasRequest: true,
      request_id: request._id,
      status: request.status,
      business_name: request.business_data.business_name,
      category: request.business_data.category,
      submitted_at: request.submitted_at,
      ...config
    };

  } catch (error) {
    console.error('Get partner dashboard status error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
 */
export const checkPartnerAccess = async (userId, feature) => {
  try {
    const status = await getPartnerDashboardStatus(userId);
    
    // –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
    const restrictedFeatures = [
      'menu_management',
      'order_management', 
      'analytics',
      'profile_editing',
      'financial_reports'
    ];

    if (restrictedFeatures.includes(feature)) {
      return {
        has_access: status.can_access_features || false,
        reason: status.can_access_features 
          ? null 
          : '–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
      };
    }

    // –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞
    return {
      has_access: true,
      reason: null
    };

  } catch (error) {
    console.error('Check partner access error:', error);
    return {
      has_access: false,
      reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞'
    };
  }
};