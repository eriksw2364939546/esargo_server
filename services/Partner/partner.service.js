// ================ services/Partner/partner.service.js (–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò) ================
// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª services/Partner/partner.service.js

import { User, PartnerProfile, InitialPartnerRequest, PartnerLegalInfo, Product } from '../../models/index.js';
import Meta from '../../models/Meta.model.js';
import { cryptoString, decryptString } from '../../utils/crypto.js';
import { hashMeta } from '../../utils/hash.js';
import mongoose from 'mongoose';

/**
 * ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í ==================
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object|null} - –ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ null
 */
export const getPartnerRequest = async (partnerId) => {
    try {
        console.log('üîç GET PARTNER REQUEST:', { partnerId });
        
        if (!partnerId) {
            console.log('‚ùå PARTNER REQUEST - No partnerId provided');
            return null;
        }
        
        const request = await InitialPartnerRequest.findOne({ 
            user_id: partnerId 
        });
        
        console.log('‚úÖ PARTNER REQUEST FOUND:', {
            found: !!request,
            status: request ? request.status : null,
            workflow_stage: request ? request.workflow_stage : null,
            business_name: request ? request.business_data?.business_name : null
        });
        
        return request;
        
    } catch (error) {
        console.error('üö® GET PARTNER REQUEST ERROR:', error);
        return null;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object|null} - –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ null
 */
export const getPartnerProfile = async (partnerId) => {
    try {
        console.log('üîç GET PARTNER PROFILE:', { partnerId });
        
        if (!partnerId) {
            console.log('‚ùå PARTNER PROFILE - No partnerId provided');
            return null;
        }
        
        const profile = await PartnerProfile.findOne({ 
            user_id: partnerId 
        });
        
        console.log('‚úÖ PARTNER PROFILE FOUND:', {
            found: !!profile,
            is_published: profile ? profile.is_published : null,
            status: profile ? profile.status : null
        });
        
        return profile;
        
    } catch (error) {
        console.error('üö® GET PARTNER PROFILE ERROR:', error);
        return null;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object|null} - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ null
 */
export const getPartnerLegalInfo = async (partnerId) => {
    try {
        console.log('üîç GET PARTNER LEGAL INFO:', { partnerId });
        
        if (!partnerId) {
            console.log('‚ùå PARTNER LEGAL INFO - No partnerId provided');
            return null;
        }
        
        const legalInfo = await PartnerLegalInfo.findOne({ 
            user_id: partnerId 
        });
        
        console.log('‚úÖ PARTNER LEGAL INFO FOUND:', {
            found: !!legalInfo,
            status: legalInfo ? legalInfo.status : null
        });
        
        return legalInfo;
        
    } catch (error) {
        console.error('üö® GET PARTNER LEGAL INFO ERROR:', error);
        return null;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
 */
export const getPartnerFullInfo = async (partnerId) => {
    try {
        console.log('üîç GET PARTNER FULL INFO:', { partnerId });
        
        if (!partnerId) {
            throw new Error('Partner ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const partner = await User.findById(partnerId).select('-password_hash');
        if (!partner || partner.role !== 'partner') {
            throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const partnerProfile = await getPartnerProfile(partnerId);
        const partnerRequest = await getPartnerRequest(partnerId);
        const legalInfo = await getPartnerLegalInfo(partnerId);

        const fullInfo = {
            partner: {
                id: partner._id,
                email: partner.email,
                role: partner.role,
                is_active: partner.is_active,
                is_email_verified: partner.is_email_verified,
                created_at: partner.createdAt
            },
            profile: partnerProfile,
            request: partnerRequest,
            legalInfo: legalInfo
        };
        
        console.log('‚úÖ PARTNER FULL INFO COLLECTED:', {
            has_partner: !!fullInfo.partner,
            has_profile: !!fullInfo.profile,
            has_request: !!fullInfo.request,
            has_legal: !!fullInfo.legalInfo
        });

        return fullInfo;

    } catch (error) {
        console.error('üö® GET PARTNER FULL INFO ERROR:', error);
        throw error;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞ –∏ workflow
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –°—Ç–∞—Ç—É—Å –¥–∞—à–±–æ—Ä–¥–∞
 */
export const getDashboardWorkflow = async (partnerId) => {
    try {
        console.log('üîç GET DASHBOARD WORKFLOW:', { partnerId });
        
        const partnerInfo = await getPartnerFullInfo(partnerId);
        const { partner, profile, request, legalInfo } = partnerInfo;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø workflow
        let currentStage = 0;
        let nextAction = null;
        let permissions = {
            can_submit_legal: false,
            can_create_profile: false,
            can_manage_content: false
        };

        if (request) {
            currentStage = request.workflow_stage || 1;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            if (request.status === 'approved') {
                permissions.can_submit_legal = true;
            }
            
            if (legalInfo && legalInfo.status === 'approved') {
                permissions.can_create_profile = true;
            }
            
            if (profile && profile.is_published) {
                permissions.can_manage_content = true;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            nextAction = getNextAction(request, legalInfo, profile);
        }

        const workflow = {
            current_stage: currentStage,
            status: request ? request.status : 'not_found',
            business_name: request ? request.business_data?.business_name : null,
            permissions: permissions,
            next_action: nextAction
        };
        
        console.log('‚úÖ DASHBOARD WORKFLOW PREPARED:', {
            current_stage: workflow.current_stage,
            status: workflow.status,
            permissions: workflow.permissions
        });

        return {
            user: partner,
            workflow: workflow
        };

    } catch (error) {
        console.error('üö® GET DASHBOARD WORKFLOW ERROR:', error);
        throw error;
    }
};

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ workflow
 * @param {object} request - –ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} legal - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 * @param {object} profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
 */
const getNextAction = (request, legal, profile) => {
    if (!request) {
        return {
            action: "submit_request",
            description: "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            status: "required"
        };
    }
    
    if (request.status === 'pending') {
        return {
            action: "wait_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            status: "waiting"
        };
    }
    
    if (request.status === 'approved' && !legal) {
        return {
            action: "submit_legal",
            description: "–ü–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            status: "available"
        };
    }
    
    if (legal && legal.status === 'pending') {
        return {
            action: "wait_legal_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            status: "waiting"
        };
    }
    
    if (legal && legal.status === 'approved' && !profile) {
        return {
            action: "create_profile",
            description: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "available"
        };
    }
    
    if (profile && !profile.is_published) {
        return {
            action: "wait_publication",
            description: "–û–∂–∏–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            status: "waiting"
        };
    }
    
    if (profile && profile.is_published) {
        return {
            action: "manage_content",
            description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "active"
        };
    }
    
    return {
        action: "unknown",
        description: "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        status: "error"
    };
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∫ —Ä–µ—Å—É—Ä—Å—É
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} resourceId - ID —Ä–µ—Å—É—Ä—Å–∞
 * @param {string} resourceType - –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (profile, request, legal)
 * @returns {boolean} - –ò–º–µ–µ—Ç –ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
 */
export const checkPartnerAccess = async (partnerId, resourceId, resourceType = 'profile') => {
    try {
        console.log('üîç CHECK PARTNER ACCESS:', {
            partnerId,
            resourceId,
            resourceType
        });
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–≤–æ–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        let resource = null;
        
        switch (resourceType) {
            case 'profile':
                resource = await PartnerProfile.findById(resourceId);
                break;
            case 'request':
                resource = await InitialPartnerRequest.findById(resourceId);
                break;
            case 'legal':
                resource = await PartnerLegalInfo.findById(resourceId);
                break;
            default:
                return false;
        }
        
        if (!resource) {
            console.log('‚ùå RESOURCE NOT FOUND');
            return false;
        }
        
        const hasAccess = resource.user_id.toString() === partnerId.toString();
        
        console.log('‚úÖ ACCESS CHECK RESULT:', {
            hasAccess,
            resource_owner: resource.user_id,
            requesting_partner: partnerId
        });
        
        return hasAccess;
        
    } catch (error) {
        console.error('üö® CHECK PARTNER ACCESS ERROR:', error);
        return false;
    }
};