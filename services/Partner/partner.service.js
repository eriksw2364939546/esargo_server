// ================ services/Partner/partner.service.js (–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò) ================
// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª services/Partner/partner.service.js

import { User, PartnerProfile, InitialPartnerRequest, PartnerLegalInfo, Product } from '../../models/index.js';
import Meta from '../../models/Meta.model.js';
import { cryptoString, decryptString } from '../../utils/crypto.js';
import { hashMeta } from '../../utils/hash.js';
import mongoose from 'mongoose';

/**
 * ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í ==================
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object|null} - –ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ null
 */
 const getPartnerRequest = async (partnerId) => {
    try {
        console.log('üîç GET PARTNER REQUEST:', { partnerId });
        
        if (!partnerId) {
            console.log('‚ùå PARTNER REQUEST - No partnerId provided');
            return null;
        }
        
        const request = await InitialPartnerRequest.findOne({ 
            user_id: partnerId 
        });
        
        console.log('‚úÖ PARTNER REQUEST FOUND:', {
            found: !!request,
            status: request ? request.status : null,
            workflow_stage: request ? request.workflow_stage : null,
            business_name: request ? request.business_data?.business_name : null
        });
        
        return request;
        
    } catch (error) {
        console.error('üö® GET PARTNER REQUEST ERROR:', error);
        return null;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object|null} - –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ null
 */
 const getPartnerProfile = async (partnerId) => {
    try {
        console.log('üîç GET PARTNER PROFILE:', { partnerId });
        
        if (!partnerId) {
            console.log('‚ùå PARTNER PROFILE - No partnerId provided');
            return null;
        }
        
        const profile = await PartnerProfile.findOne({ 
            user_id: partnerId 
        });
        
        console.log('‚úÖ PARTNER PROFILE FOUND:', {
            found: !!profile,
            is_published: profile ? profile.is_published : null,
            status: profile ? profile.status : null
        });
        
        return profile;
        
    } catch (error) {
        console.error('üö® GET PARTNER PROFILE ERROR:', error);
        return null;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object|null} - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ null
 */
 const getPartnerLegalInfo = async (partnerId) => {
    try {
        console.log('üîç GET PARTNER LEGAL INFO:', { partnerId });
        
        if (!partnerId) {
            console.log('‚ùå PARTNER LEGAL INFO - No partnerId provided');
            return null;
        }
        
        const legalInfo = await PartnerLegalInfo.findOne({ 
            user_id: partnerId 
        });
        
        console.log('‚úÖ PARTNER LEGAL INFO FOUND:', {
            found: !!legalInfo,
            status: legalInfo ? legalInfo.status : null
        });
        
        return legalInfo;
        
    } catch (error) {
        console.error('üö® GET PARTNER LEGAL INFO ERROR:', error);
        return null;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
 */
 const getPartnerFullInfo = async (partnerId) => {
    try {
        console.log('üîç GET PARTNER FULL INFO:', { partnerId });
        
        if (!partnerId) {
            throw new Error('Partner ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const partner = await User.findById(partnerId).select('-password_hash');
        if (!partner || partner.role !== 'partner') {
            throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const partnerProfile = await getPartnerProfile(partnerId);
        const partnerRequest = await getPartnerRequest(partnerId);
        const legalInfo = await getPartnerLegalInfo(partnerId);

        const fullInfo = {
            partner: {
                id: partner._id,
                email: partner.email,
                role: partner.role,
                is_active: partner.is_active,
                is_email_verified: partner.is_email_verified,
                created_at: partner.createdAt
            },
            profile: partnerProfile,
            request: partnerRequest,
            legalInfo: legalInfo
        };
        
        console.log('‚úÖ PARTNER FULL INFO COLLECTED:', {
            has_partner: !!fullInfo.partner,
            has_profile: !!fullInfo.profile,
            has_request: !!fullInfo.request,
            has_legal: !!fullInfo.legalInfo
        });

        return fullInfo;

    } catch (error) {
        console.error('üö® GET PARTNER FULL INFO ERROR:', error);
        throw error;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞ –∏ workflow
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –°—Ç–∞—Ç—É—Å –¥–∞—à–±–æ—Ä–¥–∞
 */
 const getDashboardWorkflow = async (partnerId) => {
    try {
        console.log('üîç GET DASHBOARD WORKFLOW:', { partnerId });
        
        const partnerInfo = await getPartnerFullInfo(partnerId);
        const { partner, profile, request, legalInfo } = partnerInfo;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø workflow
        let currentStage = 0;
        let nextAction = null;
        let permissions = {
            can_submit_legal: false,
            can_create_profile: false,
            can_manage_content: false
        };

        if (request) {
            currentStage = request.workflow_stage || 1;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            if (request.status === 'approved') {
                permissions.can_submit_legal = true;
            }
            
            if (legalInfo && legalInfo.status === 'approved') {
                permissions.can_create_profile = true;
            }
            
            if (profile && profile.is_published) {
                permissions.can_manage_content = true;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            nextAction = getNextAction(request, legalInfo, profile);
        }

        const workflow = {
            current_stage: currentStage,
            status: request ? request.status : 'not_found',
            business_name: request ? request.business_data?.business_name : null,
            permissions: permissions,
            next_action: nextAction
        };
        
        console.log('‚úÖ DASHBOARD WORKFLOW PREPARED:', {
            current_stage: workflow.current_stage,
            status: workflow.status,
            permissions: workflow.permissions
        });

        return {
            user: partner,
            workflow: workflow
        };

    } catch (error) {
        console.error('üö® GET DASHBOARD WORKFLOW ERROR:', error);
        throw error;
    }
};

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ workflow
 * @param {object} request - –ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} legal - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 * @param {object} profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
 */
const getNextAction = (request, legal, profile) => {
    if (!request) {
        return {
            action: "submit_request",
            description: "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            status: "required"
        };
    }
    
    if (request.status === 'pending') {
        return {
            action: "wait_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            status: "waiting"
        };
    }
    
    if (request.status === 'approved' && !legal) {
        return {
            action: "submit_legal",
            description: "–ü–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            status: "available"
        };
    }
    
    if (legal && legal.status === 'pending') {
        return {
            action: "wait_legal_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            status: "waiting"
        };
    }
    
    if (legal && legal.status === 'approved' && !profile) {
        return {
            action: "create_profile",
            description: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "available"
        };
    }
    
    if (profile && !profile.is_published) {
        return {
            action: "wait_publication",
            description: "–û–∂–∏–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            status: "waiting"
        };
    }
    
    if (profile && profile.is_published) {
        return {
            action: "manage_content",
            description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "active"
        };
    }
    
    return {
        action: "unknown",
        description: "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        status: "error"
    };
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∫ —Ä–µ—Å—É—Ä—Å—É
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} resourceId - ID —Ä–µ—Å—É—Ä—Å–∞
 * @param {string} resourceType - –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (profile, request, legal)
 * @returns {boolean} - –ò–º–µ–µ—Ç –ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
 */
 const checkPartnerAccess = async (partnerId, resourceId, resourceType = 'profile') => {
    try {
        console.log('üîç CHECK PARTNER ACCESS:', {
            partnerId,
            resourceId,
            resourceType
        });
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–≤–æ–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        let resource = null;
        
        switch (resourceType) {
            case 'profile':
                resource = await PartnerProfile.findById(resourceId);
                break;
            case 'request':
                resource = await InitialPartnerRequest.findById(resourceId);
                break;
            case 'legal':
                resource = await PartnerLegalInfo.findById(resourceId);
                break;
            default:
                return false;
        }
        
        if (!resource) {
            console.log('‚ùå RESOURCE NOT FOUND');
            return false;
        }
        
        const hasAccess = resource.user_id.toString() === partnerId.toString();
        
        console.log('‚úÖ ACCESS CHECK RESULT:', {
            hasAccess,
            resource_owner: resource.user_id,
            requesting_partner: partnerId
        });
        
        return hasAccess;
        
    } catch (error) {
        console.error('üö® CHECK PARTNER ACCESS ERROR:', error);
        return false;
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
 */
 const updatePartnerProfile = async (partnerId, updateData) => {
    try {
        console.log('üîç UPDATE PARTNER PROFILE:', { partnerId, fields: Object.keys(updateData) });
        
        if (!partnerId) {
            throw new Error('Partner ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        }

        // –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const profile = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!profile) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è
        if (!profile.is_approved) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
        }

        // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const allowedFields = [
            'business_name', 'brand_name', 'description', 'phone',
            'cover_image_url', 'working_hours', 'delivery_info',
            'contact_info', 'social_media'
        ];

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        const updateFields = {};
        allowedFields.forEach(field => {
            if (updateData[field] !== undefined) {
                updateFields[field] = updateData[field];
            }
        });

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π
        if (updateData.working_hours) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
            const validDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
            const hours = updateData.working_hours;
            
            for (const day of validDays) {
                if (hours[day]) {
                    if (hours[day].open_time && hours[day].close_time) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
                        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
                        if (!timeRegex.test(hours[day].open_time) || !timeRegex.test(hours[day].close_time)) {
                            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è ${day}`);
                        }
                    }
                }
            }
            updateFields.working_hours = hours;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const updatedProfile = await PartnerProfile.findOneAndUpdate(
            { user_id: partnerId },
            { 
                ...updateFields,
                updated_at: new Date()
            },
            { new: true, runValidators: true }
        );

        console.log('‚úÖ PARTNER PROFILE UPDATED:', {
            profile_id: updatedProfile._id,
            updated_fields: Object.keys(updateFields)
        });

        return updatedProfile;

    } catch (error) {
        console.error('üö® UPDATE PARTNER PROFILE ERROR:', error);
        throw error;
    }
};


/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
 const deletePartnerAccount = async (partnerId) => {
    const session = await mongoose.startSession();
    
    try {
        console.log('üîç DELETE PARTNER ACCOUNT:', { partnerId });
        
        if (!partnerId) {
            throw new Error('Partner ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        }

        let cleanupInfo = {
            user_deleted: false,
            meta_deleted: false,
            request_deleted: false,
            legal_deleted: false,
            profile_deleted: false,
            products_deleted: 0
        };

        await session.withTransaction(async () => {
            // 1. –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            const deleteProductsResult = await Product.deleteMany({ 
                partner_id: partnerId 
            }, { session });
            cleanupInfo.products_deleted = deleteProductsResult.deletedCount;

            // 2. –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            const profileResult = await PartnerProfile.findOneAndDelete({ 
                user_id: partnerId 
            }, { session });
            cleanupInfo.profile_deleted = !!profileResult;

            // 3. –£–¥–∞–ª—è–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const legalResult = await PartnerLegalInfo.findOneAndDelete({ 
                user_id: partnerId 
            }, { session });
            cleanupInfo.legal_deleted = !!legalResult;

            // 4. –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
            const requestResult = await InitialPartnerRequest.findOneAndDelete({ 
                user_id: partnerId 
            }, { session });
            cleanupInfo.request_deleted = !!requestResult;

            // 5. –£–¥–∞–ª—è–µ–º Meta –∑–∞–ø–∏—Å—å
            const metaResult = await Meta.findOneAndDelete({ 
                partner: partnerId,
                role: 'partner'
            }, { session });
            cleanupInfo.meta_deleted = !!metaResult;

            // 6. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await User.findByIdAndDelete(partnerId, { session });
            cleanupInfo.user_deleted = !!userResult;
        });

        console.log('‚úÖ PARTNER ACCOUNT DELETED:', cleanupInfo);

        return {
            deleted_partner: {
                id: partnerId,
                deleted_at: new Date()
            },
            cleanup_info: cleanupInfo
        };

    } catch (error) {
        console.error('üö® DELETE PARTNER ACCOUNT ERROR:', error);
        throw error;
    } finally {
        await session.endSession();
    }
};

// ================ services/Partner/partner.service.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø) ================

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
 * @param {object} partnerData - –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ InitialPartnerRequest
 * @returns {object} - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
const normalizePartnerData = (partnerData) => {
    try {
        console.log('üîç NORMALIZING PARTNER DATA:', {
            has_business_data: !!partnerData.business_data,
            has_personal_data: !!partnerData.personal_data,
            business_name: partnerData.business_data?.business_name
        });

        // ‚úÖ –†–ê–°–®–ò–§–†–û–í–ö–ê –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–• –ü–û–õ–ï–ô
        let decryptedEmail = '';
        let decryptedPhone = '';
        let decryptedAddress = '';

        try {
            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º email –∏–∑ personal_data
            if (partnerData.personal_data?.email) {
                decryptedEmail = decryptString(partnerData.personal_data.email);
            }

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º phone –∏–∑ personal_data  
            if (partnerData.personal_data?.phone) {
                decryptedPhone = decryptString(partnerData.personal_data.phone);
            }

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º address –∏–∑ business_data
            if (partnerData.business_data?.address) {
                decryptedAddress = decryptString(partnerData.business_data.address);
            }

            console.log('‚úÖ DECRYPTION SUCCESS:', {
                has_email: !!decryptedEmail,
                has_phone: !!decryptedPhone,
                has_address: !!decryptedAddress
            });

        } catch (decryptError) {
            console.warn('‚ö†Ô∏è DECRYPTION WARNING:', decryptError.message);
            // Fallback –∫ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        }

        const normalized = {
            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            business_name: partnerData.business_data?.business_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            brand_name: partnerData.business_data?.brand_name || 
                       partnerData.business_data?.business_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            category: partnerData.business_data?.category || 'store',
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            phone: decryptedPhone || '–ù–µ —É–∫–∞–∑–∞–Ω',           // ‚Üê –†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ô
            email: decryptedEmail || '–Ω–µ-—É–∫–∞–∑–∞–Ω@example.com', // ‚Üê –†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ô
            address: decryptedAddress || '',                  // ‚Üê –†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ô
            
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å fallback
            floor_unit: partnerData.business_data?.floor_unit ? 
                       decryptString(partnerData.business_data.floor_unit) : null,
            description: partnerData.business_data?.description || 
                        `–ü–∞—Ä—Ç–Ω–µ—Ä ${partnerData.business_data?.business_name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`,
            
            // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å fallback
            location: partnerData.business_data?.location || {
                type: 'Point',
                coordinates: [2.3522, 48.8566] // Paris coordinates
            },
            
            // –°–æ–≥–ª–∞—Å–∏—è
            whatsapp_consent: partnerData.marketing_consent?.whatsapp_consent || false
        };

        console.log('‚úÖ DATA NORMALIZED WITH DECRYPTION:', {
            has_brand_name: !!normalized.brand_name,
            has_floor_unit: !!normalized.floor_unit,
            category: normalized.category,
            has_phone: !!normalized.phone && normalized.phone !== '–ù–µ —É–∫–∞–∑–∞–Ω',
            has_email: !!normalized.email && normalized.email !== '–Ω–µ-—É–∫–∞–∑–∞–Ω@example.com',
            whatsapp_consent: normalized.whatsapp_consent
        });

        return normalized;

    } catch (error) {
        console.error('üö® NORMALIZE PARTNER DATA ERROR:', error);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–ê–õ–ò–î–ù–´–ï fallback –¥–∞–Ω–Ω—ã–µ
        return {
            business_name: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            brand_name: '–ù–µ —É–∫–∞–∑–∞–Ω–æ', 
            category: 'store',
            floor_unit: null,
            description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
            address: '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
            phone: '+33 1 00 00 00 00',              // ‚Üê –í–ê–õ–ò–î–ù–´–ô —Ç–µ–ª–µ—Ñ–æ–Ω
            email: 'fallback@partner-temp.com',     // ‚Üê –í–ê–õ–ò–î–ù–´–ô email
            location: { type: 'Point', coordinates: [2.3522, 48.8566] },
            whatsapp_consent: false
        };
    }
};


export{
    getPartnerRequest,
    getPartnerProfile,
    getPartnerLegalInfo,
    getPartnerFullInfo,
    getDashboardWorkflow,
    getNextAction,
    checkPartnerAccess,
    updatePartnerProfile,
    deletePartnerAccount,
    normalizePartnerData
}