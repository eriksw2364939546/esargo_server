// ================ services/Partner/partner.auth.service.js (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô) ================
import jwt from "jsonwebtoken";
import { User, PartnerProfile, InitialPartnerRequest, PartnerLegalInfo } from '../../models/index.js';
import Meta from '../../models/Meta.model.js';
import { hashString, hashMeta, comparePassword } from '../../utils/hash.js';
import { cryptoString } from '../../utils/crypto.js';
import { generateCustomerToken } from '../token.service.js';
import mongoose from 'mongoose';

/**
 * ================== –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ==================
 */

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
export const createPartnerAccount = async (partnerData) => {
    try {
        let { 
            first_name, last_name, email, password, phone,
            business_name, category, address, location,
            registration_ip, user_agent
        } = partnerData;

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email
        email = email.toLowerCase().trim();

        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó META
        const existingMeta = await Meta.findByEmailAndRole(hashMeta(email), 'partner');
        if (existingMeta) {
            throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await hashString(password);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ú EMAIL
        const newUser = new User({
            email: cryptoString(email), // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ô EMAIL
            password_hash: hashedPassword,
            role: 'partner',
            is_active: true,
            is_email_verified: false,
            gdpr_consent: {
                data_processing: true,
                marketing: false,
                analytics: false,
                consent_date: new Date()
            },
            registration_source: 'web'
        });

        await newUser.save();

        // –°–æ–∑–¥–∞–µ–º Meta –∑–∞–ø–∏—Å—å
        const newMeta = new Meta({
            em: hashMeta(email), // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ em
            role: 'partner',
            partner: newUser._id,
            is_active: true,
            security_info: {
                last_login_attempt: null,
                failed_login_attempts: 0,
                account_locked_until: null
            }
        });

        await newMeta.save();

        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const partnerRequest = new InitialPartnerRequest({
            user_id: newUser._id,
            
            // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã)
            personal_data: {
                first_name: cryptoString(first_name),
                last_name: cryptoString(last_name),
                phone: cryptoString(phone),
                email: cryptoString(email) // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è
            },
            
            // –ë–∏–∑–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ (–º–∏–∫—Å –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ)
            business_data: {
                // –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                business_name: business_name, // ‚úÖ –ù–ï —à–∏—Ñ—Ä—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
                category: category, // ‚úÖ –ù–ï —à–∏—Ñ—Ä—É–µ–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
                description: `${category === 'restaurant' ? '–†–µ—Å—Ç–æ—Ä–∞–Ω' : '–ú–∞–≥–∞–∑–∏–Ω'} ${business_name}`,
                
                // –í–ª–∞–¥–µ–ª–µ—Ü (–∏–º–µ–Ω–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã)
                owner_name: first_name,
                owner_surname: last_name,
                
                // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                address: cryptoString(address),
                phone: cryptoString(phone),
                email: cryptoString(email),
                
                // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
                location: {
                    type: 'Point',
                    coordinates: location?.longitude && location?.latitude ? 
                        [parseFloat(location.longitude), parseFloat(location.latitude)] : 
                        [0, 0] // Default coordinates if not provided
                }
            },
            
            // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–∞—è–≤–∫–∏
            location: {
                coordinates: {
                    type: 'Point',
                    coordinates: location?.longitude && location?.latitude ? 
                        [parseFloat(location.longitude), parseFloat(location.latitude)] : 
                        [0, 0]
                },
                address: address
            },
            
            // –°—Ç–∞—Ç—É—Å –∏ workflow
            status: 'pending',
            workflow_stage: 1,
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            submitted_at: new Date(),
            updated_at: new Date(),
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            security_info: {
                registration_ip: registration_ip,
                user_agent: user_agent,
                email_verified: false,
                phone_verified: false
            },
            
            // –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å–æ–≥–ª–∞—Å–∏—è
            marketing_consent: {
                whatsapp: partnerData.whatsapp_consent || false,
                email_newsletter: false,
                sms: false
            }
        });

        await partnerRequest.save();

        // üÜï –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        console.log('üîç GENERATING TOKEN FOR NEW PARTNER:', {
            user_id: newUser._id,
            role: newUser.role,
            email_encrypted: !!newUser.email
        });

        const token = generateCustomerToken({
            _id: newUser._id,
            user_id: newUser._id,
            role: 'partner'
            // üîê –ù–ï –í–ö–õ–Æ–ß–ê–ï–ú EMAIL –≤ —Ç–æ–∫–µ–Ω - –æ–Ω –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
        }, '30d');

        console.log('‚úÖ TOKEN GENERATED FOR NEW PARTNER:', {
            token_length: token ? token.length : 0,
            token_preview: token ? token.substring(0, 20) + '...' : null
        });

        return {
            isNewPartner: true,
            partner: {
                id: newUser._id,
                role: newUser.role,
                email: email, // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π email –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                request: partnerRequest
            },
            token: token // üÜï –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω
        };

    } catch (error) {
        console.error('üö® CREATE PARTNER ACCOUNT ERROR:', error);
        throw error;
    }
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
export const loginPartner = async ({ email, password }) => {
    try {
        const normalizedEmail = email.toLowerCase().trim();
        
        // –ò—â–µ–º —á–µ—Ä–µ–∑ Meta
        const metaInfo = await Meta.findOne({
            em: hashMeta(normalizedEmail),
            role: 'partner'
        }).populate('partner');

        if (!metaInfo || !metaInfo.partner) {
            const error = new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            error.statusCode = 404;
            throw error;
        }

        const partner = metaInfo.partner;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
        if (!partner.is_active) {
            const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            error.statusCode = 403;
            throw error;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        if (metaInfo.isAccountLocked && metaInfo.isAccountLocked()) {
            const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞');
            error.statusCode = 423;
            throw error;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordValid = await comparePassword(password, partner.password_hash);
        
        if (!isPasswordValid) {
            await metaInfo.incrementFailedAttempts();
            const error = new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            error.statusCode = 401;
            throw error;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
        await metaInfo.resetFailedAttempts();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        partner.last_login_at = new Date();
        await partner.save();

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const profile = await PartnerProfile.findOne({ user_id: partner._id });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ë–ï–ó EMAIL
        const token = generateCustomerToken({
            _id: partner._id,
            user_id: partner._id,
            role: 'partner'
        }, '30d');

        return {
            token,
            partner: {
                id: partner._id,
                role: partner.role,
                is_email_verified: partner.is_email_verified,
                is_active: partner.is_active,
                profile: profile
            }
        };

    } catch (error) {
        throw error;
    }
};

/**
 * ================== –ú–ï–¢–û–î–´ –î–õ–Ø MIDDLEWARE ==================
 */

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–¥–ª—è middleware)
 */
export const verifyPartnerToken = async (token) => {
    try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const { user_id, _id, role } = decoded;
        const partnerId = user_id || _id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        if (role !== "partner") {
            return { 
                success: false,
                message: "Access denied! Not a partner account!", 
                statusCode: 403 
            };
        }

        // –ò—â–µ–º —á–µ—Ä–µ–∑ Meta —Å populate
        const metaInfo = await Meta.findOne({
            partner: partnerId,
            role: "partner"
        }).populate("partner");

        if (!metaInfo || !metaInfo.partner) {
            return { 
                success: false,
                message: "Access denied! Partner not found!", 
                statusCode: 404 
            };
        }

        const partner = metaInfo.partner;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (!metaInfo.is_active || !partner.is_active) {
            return {
                success: false,
                message: "Access denied! Account is inactive!",
                statusCode: 403
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if (metaInfo.isAccountLocked && metaInfo.isAccountLocked()) {
            return {
                success: false,
                message: "Access denied! Account is locked!",
                statusCode: 423
            };
        }

        return { 
            success: true,
            message: "Access approved!", 
            partner: partner,
            metaInfo: metaInfo
        };

    } catch (err) {
        if (err.name === 'TokenExpiredError') {
            return { success: false, message: "Access denied! Token expired!", statusCode: 401 };
        } else if (err.name === 'JsonWebTokenError') {
            return { success: false, message: "Access denied! Token invalid!", statusCode: 401 };
        } else {
            return { success: false, message: "Access denied! Token error!", statusCode: 401 };
        }
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ email
 */
export const checkPartnerExists = async (email) => {
    try {
        const normalizedEmail = email.toLowerCase().trim();
        
        console.log('üîç CHECK PARTNER EXISTS - Start:', {
            original_email: email,
            normalized_email: normalizedEmail,
            hashed_email: hashMeta(normalizedEmail)
        });
        
        // –ò—â–µ–º —á–µ—Ä–µ–∑ Meta
        const existingMeta = await Meta.findOne({
            em: hashMeta(normalizedEmail),
            role: 'partner'
        });
        
        console.log('üîç CHECK PARTNER EXISTS - Result:', {
            found: !!existingMeta,
            meta_id: existingMeta ? existingMeta._id : null
        });
        
        return !!existingMeta;
        
    } catch (error) {
        console.error('üö® CHECK PARTNER EXISTS - Error:', error);
        return false;
    }
};