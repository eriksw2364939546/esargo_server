// ================ services/Partner/partner.auth.service.js (–ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ================
import jwt from "jsonwebtoken";
import { User, PartnerProfile, InitialPartnerRequest, PartnerLegalInfo } from '../../models/index.js';
import Meta from '../../models/Meta.model.js';
import { hashString, hashMeta, comparePassword } from '../../utils/hash.js';
import { cryptoString } from '../../utils/crypto.js';
import { generateCustomerToken } from '../token.service.js';
import mongoose from 'mongoose';

/**
 * ================== –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ==================
 */


/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å InitialPartnerRequest
 */
const createPartnerAccount = async (data) => {
    const {
        first_name, last_name, email, password, phone,
        business_name, brand_name, category, address, floor_unit,
        location, whatsapp_consent
    } = data;

    console.log('üîç CREATE PARTNER ACCOUNT - Data check:', {
        has_brand_name: !!brand_name,
        has_floor_unit: !!floor_unit,
        whatsapp_consent: whatsapp_consent,
        location_received: !!location,
        location_structure: location
    });

    try {
        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó META
        const existingMeta = await Meta.findByEmailAndRole(hashMeta(email), 'partner');
        if (existingMeta) {
            throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await hashString(password);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ú EMAIL
        const newUser = new User({
            email: cryptoString(email), // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ô EMAIL
            password_hash: hashedPassword,
            role: 'partner',
            is_active: true,
            is_email_verified: false,
            gdpr_consent: {
                data_processing: true,
                marketing: false,
                analytics: false,
                consent_date: new Date()
            },
            registration_source: 'web'
        });

        await newUser.save();

        // –°–æ–∑–¥–∞–µ–º Meta –∑–∞–ø–∏—Å—å
        const newMeta = new Meta({
            em: hashMeta(email),
            role: 'partner',
            partner: newUser._id,
            is_active: true,
            security_info: {
                last_login_attempt: null,
                failed_login_attempts: 0,
                account_locked_until: null
            }
        });

        await newMeta.save();

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è location
        if (!location || !location.coordinates || !Array.isArray(location.coordinates) || location.coordinates.length !== 2) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
        }

        const [longitude, latitude] = location.coordinates;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if (typeof longitude !== 'number' || typeof latitude !== 'number') {
            throw new Error('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏');
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º InitialPartnerRequest —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        const partnerRequest = new InitialPartnerRequest({
            user_id: newUser._id,
            
            // üë§ –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –≤ personal_data)
            personal_data: {
                first_name: cryptoString(first_name), // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                last_name: cryptoString(last_name),   // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                email: cryptoString(email),           // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                phone: cryptoString(phone)            // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
            },
            
            // üè™ –ë–ò–ó–ù–ï–° –î–ê–ù–ù–´–ï
            business_data: {
                // –ê–¥—Ä–µ—Å –∏ —ç—Ç–∞–∂ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã)
                address: cryptoString(address),                                    // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                floor_unit: floor_unit ? cryptoString(floor_unit) : null,         // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û –∏–ª–∏ null
                
                // –ù–∞–∑–≤–∞–Ω–∏—è (–æ—Ç–∫—Ä—ã—Ç–æ)
                business_name: business_name,                                      // ‚úÖ –û–¢–ö–†–´–¢–û
                brand_name: brand_name || business_name,                          // ‚úÖ –û–¢–ö–†–´–¢–û
                
                // –¢–∏–ø –±–∏–∑–Ω–µ—Å–∞
                category: category,                                               // ‚úÖ –û–¢–ö–†–´–¢–û
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º owner_name –∏ owner_surname –∫–∞–∫ –¢–†–ï–ë–£–ï–¢ –ú–û–î–ï–õ–¨
                owner_name: first_name,                                           // ‚úÖ –û–¢–ö–†–´–¢–û (–¥–ª—è –ø–æ–∏—Å–∫–∞)
                owner_surname: last_name,                                         // ‚úÖ –û–¢–ö–†–´–¢–û (–¥–ª—è –ø–æ–∏—Å–∫–∞)
                
                // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
                location: {
                    type: 'Point',
                    coordinates: [longitude, latitude] // [lng, lat] –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                }
            },
            
            // üì± WHATSAPP –°–û–ì–õ–ê–°–ò–ï
            marketing_consent: {
                whatsapp_consent: whatsapp_consent === true
            },
            
            // üéØ –°–¢–ê–¢–£–° (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            status: 'pending',
            workflow_stage: 1,
            
            // üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
            security_info: {
                registration_ip: '127.0.0.1', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ req.ip
                user_agent: 'API_REQUEST',     // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ req.headers['user-agent']
                country_code: 'FR',
                phone_country: 'FR'
            },
            
            // üìÖ –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–ö–ò
            submitted_at: new Date(),
            updated_at: new Date()
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
        const savedRequest = await partnerRequest.save();

        console.log('‚úÖ PARTNER REQUEST CREATED:', {
            id: savedRequest._id,
            user_id: savedRequest.user_id,
            business_name: savedRequest.business_data.business_name,
            brand_name: savedRequest.business_data.brand_name,
            category: savedRequest.business_data.category,
            owner_name: savedRequest.business_data.owner_name,       // ‚úÖ –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å
            owner_surname: savedRequest.business_data.owner_surname, // ‚úÖ –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å
            status: savedRequest.status,
            workflow_stage: savedRequest.workflow_stage
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        const token = generateJWT({
            user_id: newUser._id,
            email: email,
            role: 'partner'
        });

        return {
            token,
            user: {
                id: newUser._id,
                email: email, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π email
                role: 'partner'
            },
            request: savedRequest
        };

    } catch (error) {
        console.error('üö® CREATE PARTNER ACCOUNT ERROR:', error);
        throw error;
    }
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
 const loginPartner = async ({ email, password }) => {
    try {
        const normalizedEmail = email.toLowerCase().trim();
        
        // –ò—â–µ–º —á–µ—Ä–µ–∑ Meta
        const metaInfo = await Meta.findOne({
            em: hashMeta(normalizedEmail),
            role: 'partner'
        }).populate('partner');

        if (!metaInfo || !metaInfo.partner) {
            const error = new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            error.statusCode = 404;
            throw error;
        }

        const partner = metaInfo.partner;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
        if (!partner.is_active) {
            const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            error.statusCode = 403;
            throw error;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        if (metaInfo.isAccountLocked && metaInfo.isAccountLocked()) {
            const error = new Error('–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞');
            error.statusCode = 423;
            throw error;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordValid = await comparePassword(password, partner.password_hash);
        
        if (!isPasswordValid) {
            await metaInfo.incrementFailedAttempts();
            const error = new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            error.statusCode = 401;
            throw error;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
        await metaInfo.resetFailedAttempts();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        partner.last_login_at = new Date();
        await partner.save();

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const profile = await PartnerProfile.findOne({ user_id: partner._id });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ë–ï–ó EMAIL
        const token = generateCustomerToken({
            _id: partner._id,
            user_id: partner._id,
            role: 'partner'
        }, '30d');

        return {
            token,
            partner: {
                id: partner._id,
                role: partner.role,
                is_email_verified: partner.is_email_verified,
                is_active: partner.is_active,
                profile: profile
            }
        };

    } catch (error) {
        throw error;
    }
};

/**
 * ================== –ú–ï–¢–û–î–´ –î–õ–Ø MIDDLEWARE ==================
 * ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–¥–ª—è middleware)
 */
 const verifyPartnerToken = async (token) => {
    try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const { user_id, _id, role } = decoded;
        const partnerId = user_id || _id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        if (role !== "partner") {
            return { 
                success: false,
                message: "Access denied! Not a partner account!", 
                statusCode: 403 
            };
        }

        // –ò—â–µ–º —á–µ—Ä–µ–∑ Meta —Å populate
        const metaInfo = await Meta.findOne({
            partner: partnerId,
            role: "partner"
        }).populate("partner");

        if (!metaInfo || !metaInfo.partner) {
            return { 
                success: false,
                message: "Access denied! Partner not found!", 
                statusCode: 404 
            };
        }

        const partner = metaInfo.partner;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (!metaInfo.is_active || !partner.is_active) {
            return {
                success: false,
                message: "Access denied! Account is inactive!",
                statusCode: 403
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if (metaInfo.isAccountLocked && metaInfo.isAccountLocked()) {
            return {
                success: false,
                message: "Access denied! Account is locked!",
                statusCode: 423
            };
        }

        return { 
            success: true,
            message: "Access approved!", 
            partner: partner,
            metaInfo: metaInfo
        };

    } catch (err) {
        if (err.name === 'TokenExpiredError') {
            return { success: false, message: "Access denied! Token expired!", statusCode: 401 };
        } else if (err.name === 'JsonWebTokenError') {
            return { success: false, message: "Access denied! Token invalid!", statusCode: 401 };
        } else {
            return { success: false, message: "Access denied! Token error!", statusCode: 401 };
        }
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ email
 * ‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
 const checkPartnerExists = async (email) => {
    try {
        const normalizedEmail = email.toLowerCase().trim();
        
        console.log('üîç CHECK PARTNER EXISTS - Start:', {
            original_email: email,
            normalized_email: normalizedEmail,
            hashed_email: hashMeta(normalizedEmail)
        });
        
        // –ò—â–µ–º —á–µ—Ä–µ–∑ Meta
        const existingMeta = await Meta.findOne({
            em: hashMeta(normalizedEmail),
            role: 'partner'
        });
        
        console.log('üîç CHECK PARTNER EXISTS - Result:', {
            found: !!existingMeta,
            meta_id: existingMeta ? existingMeta._id : null
        });
        
        return !!existingMeta;
        
    } catch (error) {
        console.error('üö® CHECK PARTNER EXISTS - Error:', error);
        return false;
    }
};


export { createPartnerAccount,loginPartner,verifyPartnerToken,checkPartnerExists }