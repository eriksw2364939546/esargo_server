// ================ services/Partner/partner.menu.service.js (–ù–û–í–´–ô –°–ï–†–í–ò–°–ù–´–ô –°–õ–û–ô) ================
import { PartnerProfile, Product } from '../../models/index.js';
import mongoose from 'mongoose';

/**
 * ================== –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ï–ù–Æ ==================
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
 const getPartnerMenuCategories = async (partnerId) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await partner.updateProductStats();

        return {
            categories: partner.menu_categories,
            total_categories: partner.menu_categories.length,
            business_info: {
                business_name: partner.business_name,
                brand_name: partner.brand_name,
                category: partner.category
            }
        };

    } catch (error) {
        console.error('üö® GET PARTNER MENU CATEGORIES ERROR:', error);
        throw error;
    }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} categoryData - –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {object} - –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
 const addMenuCategory = async (partnerId, categoryData) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        const { name, description, image_url, sort_order } = categoryData;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!name || name.trim().length === 0) {
            throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        }

        if (name.length > 50) {
            throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤');
        }

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
        await partner.addMenuCategory({
            name: name.trim(),
            description: description?.trim() || '',
            image_url: image_url || '',
            sort_order: sort_order || partner.menu_categories.length
        });

        const addedCategory = partner.menu_categories[partner.menu_categories.length - 1];

        return {
            category: addedCategory,
            total_categories: partner.menu_categories.length
        };

    } catch (error) {
        console.error('üö® ADD MENU CATEGORY ERROR:', error);
        throw error;
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
 const updateMenuCategory = async (partnerId, categoryId, updateData) => {
    try {
        if (!partnerId || !categoryId) {
            throw new Error('Partner ID –∏ Category ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
        await partner.updateMenuCategory(categoryId, {
            name: updateData.name?.trim(),
            description: updateData.description?.trim(),
            image_url: updateData.image_url,
            sort_order: updateData.sort_order,
            is_active: updateData.is_active
        });

        const updatedCategory = partner.menu_categories.id(categoryId);

        return {
            category: updatedCategory
        };

    } catch (error) {
        console.error('üö® UPDATE MENU CATEGORY ERROR:', error);
        throw error;
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
 const deleteMenuCategory = async (partnerId, categoryId) => {
    try {
        if (!partnerId || !categoryId) {
            throw new Error('Partner ID –∏ Category ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const category = partner.menu_categories.id(categoryId);
        if (!category) {
            throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        const productsInCategory = await Product.countDocuments({
            partner_id: partner._id,
            subcategory: category.slug
        });

        if (productsInCategory > 0) {
            throw new Error(`–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í –Ω–µ–π ${productsInCategory} —Ç–æ–≤–∞—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã.`);
        }

        // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await partner.removeMenuCategory(categoryId);

        return {
            remaining_categories: partner.menu_categories.length
        };

    } catch (error) {
        console.error('üö® DELETE MENU CATEGORY ERROR:', error);
        throw error;
    }
};

/**
 * ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê–ú–ò ==================
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} filters - –§–∏–ª—å—Ç—Ä—ã (category_slug, include_inactive)
 * @returns {object} - –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
 const getPartnerProducts = async (partnerId, filters = {}) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        const { category_slug, include_inactive } = filters;

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        let products;
        if (category_slug) {
            // –ü—Ä–æ–¥—É–∫—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products = await Product.findByPartnerCategory(
                partner._id, 
                category_slug, 
                include_inactive === 'true'
            );
        } else {
            // –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            products = await Product.findByPartner(
                partner._id, 
                include_inactive === 'true'
            );
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        const productsByCategory = {};
        partner.menu_categories.forEach(category => {
            productsByCategory[category.slug] = {
                category_info: category,
                products: products.filter(p => p.subcategory === category.slug)
            };
        });

        return {
            products_by_category: productsByCategory,
            total_products: products.length,
            business_info: {
                business_name: partner.business_name,
                brand_name: partner.brand_name,
                category: partner.category
            }
        };

    } catch (error) {
        console.error('üö® GET PARTNER PRODUCTS ERROR:', error);
        throw error;
    }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ª–æ–≥–∏–∫–æ–π –¥–æ–±–∞–≤–æ–∫
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} productData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @returns {object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
 */
 const addPartnerProduct = async (partnerId, productData) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        const {
            title, description, price, discount_price, image_url,
            subcategory, preparation_time, options_groups,
            dish_info, product_info, tags
        } = productData;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!title || !price || !subcategory) {
            throw new Error('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: title, price, subcategory');
        }

        if (price <= 0) {
            throw new Error('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
        }

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const category = partner.menu_categories.find(cat => cat.slug === subcategory);
        if (!category) {
            throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        let finalOptionsGroups = [];
        let validationWarnings = [];

        if (partner.category === 'restaurant') {
            // üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù: –†–∞–∑—Ä–µ—à–µ–Ω—ã –¥–æ–±–∞–≤–∫–∏
            if (options_groups && Array.isArray(options_groups)) {
                finalOptionsGroups = validateAndProcessOptionsGroups(options_groups, validationWarnings);
            }
        } else if (partner.category === 'store') {
            // üè™ –ú–ê–ì–ê–ó–ò–ù: –î–æ–±–∞–≤–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã
            if (options_groups && options_groups.length > 0) {
                throw new Error('–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø—Ü–∏–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º. –¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥–æ–±–∞–≤–∫–∏ –∫ –±–ª—é–¥–∞–º.');
            }
            finalOptionsGroups = [];
        }

        // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let finalPreparationTime = 0;
        if (partner.category === 'restaurant') {
            finalPreparationTime = preparation_time || 15; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç
        } else if (partner.category === 'store') {
            finalPreparationTime = 0; // —Ç–æ–≤–∞—Ä –≥–æ—Ç–æ–≤
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        const newProduct = new Product({
            partner_id: partner._id,
            title: title.trim(),
            description: description?.trim() || '',
            price: parseFloat(price),
            discount_price: discount_price ? parseFloat(discount_price) : null,
            image_url: image_url || '',
            category: partner.category,
            subcategory: subcategory,
            menu_category_id: category._id,
            preparation_time: finalPreparationTime,
            options_groups: finalOptionsGroups,
            dish_info: partner.category === 'restaurant' ? (dish_info || {}) : {},
            product_info: partner.category === 'store' ? (product_info || {}) : {},
            tags: tags || [],
            last_updated_by: partnerId
        });

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await newProduct.validateCategory();
        
        await newProduct.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await partner.updateProductStats();

        return {
            product: newProduct,
            category_info: {
                name: category.name,
                slug: category.slug
            },
            business_rules: {
                partner_category: partner.category,
                supports_options: partner.category === 'restaurant',
                supports_preparation_time: partner.category === 'restaurant',
                options_groups_count: finalOptionsGroups.length,
                preparation_time: finalPreparationTime
            },
            warnings: validationWarnings.length > 0 ? validationWarnings : undefined
        };

    } catch (error) {
        console.error('üö® ADD PARTNER PRODUCT ERROR:', error);
        throw error;
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ª–æ–≥–∏–∫–æ–π –¥–æ–±–∞–≤–æ–∫
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
 */
 const updatePartnerProduct = async (partnerId, productId, updateData) => {
    try {
        if (!partnerId || !productId) {
            throw new Error('Partner ID –∏ Product ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π —ç—Ç–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
        const product = await Product.findOne({ 
            _id: productId, 
            partner_id: partner._id 
        });

        if (!product) {
            throw new Error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (updateData.subcategory && updateData.subcategory !== product.subcategory) {
            const category = partner.menu_categories.find(cat => cat.slug === updateData.subcategory);
            if (!category) {
                throw new Error('–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            updateData.menu_category_id = category._id;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
        if (updateData.price && updateData.price <= 0) {
            throw new Error('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
        }

        // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        let validationWarnings = [];

        if (updateData.options_groups !== undefined) {
            if (partner.category === 'restaurant') {
                // üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù: –†–∞–∑—Ä–µ—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ–∫
                if (Array.isArray(updateData.options_groups)) {
                    updateData.options_groups = validateAndProcessOptionsGroups(updateData.options_groups, validationWarnings);
                }
            } else if (partner.category === 'store') {
                // üè™ –ú–ê–ì–ê–ó–ò–ù: –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ–∫
                throw new Error('–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥–æ–±–∞–≤–∫–∏.');
            }
        }

        // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        if (updateData.preparation_time !== undefined) {
            if (partner.category === 'store' && updateData.preparation_time > 0) {
                validationWarnings.push('–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ 0 –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤');
                updateData.preparation_time = 0;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        const allowedFields = [
            'title', 'description', 'price', 'discount_price', 'image_url',
            'subcategory', 'menu_category_id', 'preparation_time', 'options_groups',
            'dish_info', 'product_info', 'tags', 'is_active', 'is_available',
            'sort_order'
        ];

        allowedFields.forEach(field => {
            if (updateData[field] !== undefined) {
                product[field] = updateData[field];
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏–∑–º–µ–Ω–∏–ª
        product.last_updated_by = partnerId;

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if (updateData.subcategory) {
            await product.validateCategory();
        }

        await product.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await partner.updateProductStats();

        return {
            product: product,
            business_rules: {
                partner_category: partner.category,
                supports_options: partner.category === 'restaurant',
                options_groups_count: product.options_groups.length
            },
            warnings: validationWarnings.length > 0 ? validationWarnings : undefined
        };

    } catch (error) {
        console.error('üö® UPDATE PARTNER PRODUCT ERROR:', error);
        throw error;
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
 const deletePartnerProduct = async (partnerId, productId) => {
    try {
        if (!partnerId || !productId) {
            throw new Error('Partner ID –∏ Product ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
        const product = await Product.findOneAndDelete({ 
            _id: productId, 
            partner_id: partner._id 
        });

        if (!product) {
            throw new Error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await partner.updateProductStats();

        return {
            deleted_product: {
                id: product._id,
                title: product.title,
                category: product.subcategory
            },
            remaining_products: await Product.countDocuments({ partner_id: partner._id })
        };

    } catch (error) {
        console.error('üö® DELETE PARTNER PRODUCT ERROR:', error);
        throw error;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω—é
 */
 const getPartnerMenuStats = async (partnerId) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        const partner = await PartnerProfile.findOne({ user_id: partnerId });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await partner.updateProductStats();

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
        const fullStats = await partner.getFullMenuStats();

        return {
            stats: fullStats,
            business_info: {
                business_name: partner.business_name,
                brand_name: partner.brand_name,
                category: partner.category
            }
        };

    } catch (error) {
        console.error('üö® GET PARTNER MENU STATS ERROR:', error);
        throw error;
    }
};

/**
 * ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
 */

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø –¥–æ–±–∞–≤–æ–∫
 * @param {array} optionsGroups - –ú–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø –¥–æ–±–∞–≤–æ–∫
 * @param {array} warnings - –ú–∞—Å—Å–∏–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
 * @returns {array} - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
 */
function validateAndProcessOptionsGroups(optionsGroups, warnings) {
    const validatedGroups = [];
    
    optionsGroups.forEach((group, groupIndex) => {
        if (!group.name || typeof group.name !== 'string') {
            warnings.push(`–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–æ–∫ ${groupIndex + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
            return;
        }

        if (!group.options || !Array.isArray(group.options) || group.options.length === 0) {
            warnings.push(`–ì—Ä—É–ø–ø–∞ "${group.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–∏`);
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ü–∏–π –≤ –≥—Ä—É–ø–ø–µ
        const validatedOptions = [];
        group.options.forEach((option, optionIndex) => {
            if (!option.name || typeof option.name !== 'string') {
                warnings.push(`–û–ø—Ü–∏—è ${optionIndex + 1} –≤ –≥—Ä—É–ø–ø–µ "${group.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
                return;
            }

            if (typeof option.price !== 'number' || option.price < 0) {
                warnings.push(`–û–ø—Ü–∏—è "${option.name}": –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞`);
                return;
            }

            validatedOptions.push({
                name: option.name.trim(),
                price: parseFloat(option.price),
                is_available: option.is_available !== false // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
            });
        });

        if (validatedOptions.length > 0) {
            validatedGroups.push({
                name: group.name.trim(),
                description: group.description?.trim() || '',
                required: Boolean(group.required),
                multiple_choice: Boolean(group.multiple_choice),
                max_selections: parseInt(group.max_selections) || 1,
                options: validatedOptions
            });
        }
    });

    return validatedGroups;
}


export { getPartnerMenuCategories
       , addMenuCategory
       , updateMenuCategory
       , deleteMenuCategory
       , getPartnerProducts
       , addPartnerProduct
       , updatePartnerProduct
       , deletePartnerProduct
       , getPartnerMenuStats}