// services/Partner/partner.menu.service.js - –ü–û–õ–ù–´–ô –°–ï–†–í–ò–° –° –§–†–ê–ù–¶–£–ó–°–ö–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô üá´üá∑

import { PartnerProfile, Product } from '../../models/index.js';
import mongoose from 'mongoose';

// ============ –£–¢–ò–õ–ò–¢–´ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò (–ë–ï–ó–û–ü–ê–°–ù–´–ï) ============

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –æ—Å—Ç—Ä–æ—Å—Ç–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
 */
const normalizeSpiceLevel = (spiceLevel) => {
  if (typeof spiceLevel === 'number') {
    return spiceLevel; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  }
  
  if (typeof spiceLevel === 'string') {
    const spiceLevelMap = {
      // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π ‚Üí —á–∏—Å–ª–æ
      'aucun': 0, 'doux': 1, 'moyen': 2, 'piquant': 3, 'tr√®s_piquant': 4, 'extr√™me': 5,
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí —á–∏—Å–ª–æ
      'none': 0, 'mild': 1, 'medium': 2, 'hot': 3, 'very_hot': 4, 'extreme': 5,
      // –†—É—Å—Å–∫–∏–π ‚Üí —á–∏—Å–ª–æ
      '–Ω–µ—Ç': 0, '—Å–ª–∞–±–æ': 1, '—Å—Ä–µ–¥–Ω–µ': 2, '–æ—Å—Ç—Ä–æ': 3, '–æ—á–µ–Ω—å_–æ—Å—Ç—Ä–æ': 4, '—ç–∫—Å—Ç—Ä–∏–º': 5
    };
    
    const numericLevel = spiceLevelMap[spiceLevel.toLowerCase()];
    return numericLevel !== undefined ? numericLevel : spiceLevel; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  }
  
  return 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ (—Ä–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫, –Ω–µ –ª–æ–º–∞–µ–º —Å—Ç–∞—Ä—ã–µ)
 */
const normalizeAllergens = (allergens) => {
  if (!allergens || !Array.isArray(allergens)) return [];
  
  const allergenMap = {
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π (–¥–ª—è —Å—Ç–∞—Ä–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    'gluten': '–≥–ª—é—Ç–µ–Ω',
    'eggs': '—è–π—Ü–∞',
    'fish': '—Ä—ã–±–∞',
    'peanuts': '–∞—Ä–∞—Ö–∏—Å',
    'soy': '—Å–æ—è',
    'soybeans': '—Å–æ—è',
    'milk': '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    'dairy': '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    'nuts': '–æ—Ä–µ—Ö–∏',
    'tree_nuts': '–æ—Ä–µ—Ö–∏',
    'celery': '—Å–µ–ª—å–¥–µ—Ä–µ–π',
    'mustard': '–≥–æ—Ä—á–∏—Ü–∞',
    'sesame': '–∫—É–Ω–∂—É—Ç',
    'sesame_seeds': '–∫—É–Ω–∂—É—Ç',
    'sulfites': '—Å—É–ª—å—Ñ–∏—Ç—ã',
    'sulfur_dioxide_and_sulfites': '—Å—É–ª—å—Ñ–∏—Ç—ã',
    'lupin': '–ª—é–ø–∏–Ω',
    'shellfish': '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
    'crustaceans': '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
    'mollusks': '–º–æ–ª–ª—é—Å–∫–∏',
    
    // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π (–æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å)
    'lait': '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    '≈ìufs': '—è–π—Ü–∞',
    'poissons': '—Ä—ã–±–∞',
    'arachides': '–∞—Ä–∞—Ö–∏—Å',
    'soja': '—Å–æ—è',
    'fruits_√†_coque': '–æ—Ä–µ—Ö–∏',
    'c√©leri': '—Å–µ–ª—å–¥–µ—Ä–µ–π',
    'moutarde': '–≥–æ—Ä—á–∏—Ü–∞',
    'graines_de_s√©same': '–∫—É–Ω–∂—É—Ç',
    'anhydride_sulfureux_et_sulfites': '—Å—É–ª—å—Ñ–∏—Ç—ã',
    'crustac√©s': '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
    'mollusques': '–º–æ–ª–ª—é—Å–∫–∏'
  };
  
  return allergens.map(allergen => {
    const lowerAllergen = allergen.toLowerCase().replace(/\s+/g, '_');
    return allergenMap[lowerAllergen] || allergen; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  }).filter((allergen, index, arr) => arr.indexOf(allergen) === index); // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–ª—é–¥–∞
 */
const normalizeDishInfoSafe = (dishInfo, partnerCategory) => {
  if (!dishInfo || typeof dishInfo !== 'object') return {};
  
  const normalized = { ...dishInfo };
  
  // ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º spice_level –±–µ–∑–æ–ø–∞—Å–Ω–æ
  if (normalized.spice_level !== undefined) {
    normalized.spice_level = normalizeSpiceLevel(normalized.spice_level);
  }
  
  // ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–ª–ª–µ—Ä–≥–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
  if (normalized.allergens) {
    normalized.allergens = normalizeAllergens(normalized.allergens);
  }
  
  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
  if (normalized.dietary_tags) {
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ dietary_labels –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    normalized.dietary_labels = Array.isArray(normalized.dietary_tags) ? 
      normalized.dietary_tags : [];
    delete normalized.dietary_tags;
  }
  
  // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É–ª–µ–≤—ã —Ñ–ª–∞–≥–∏
  if (normalized.dietary_labels) {
    normalized.is_vegetarian = normalized.dietary_labels.includes('v√©g√©tarien') || 
                             normalized.dietary_labels.includes('vegetarian') ||
                             normalized.dietary_labels.includes('–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π');
    normalized.is_vegan = normalized.dietary_labels.includes('v√©g√©talien') || 
                        normalized.dietary_labels.includes('vegan') ||
                        normalized.dietary_labels.includes('–≤–µ–≥–∞–Ω—Å–∫–∏–π');
    normalized.is_halal = normalized.dietary_labels.includes('halal') ||
                        normalized.dietary_labels.includes('—Ö–∞–ª—è–ª—å');
  }
  
  return normalized;
};

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
 */
const detectMultilingualFields = (productData) => {
  const multilingual = {};
  
  if (productData.title) {
    const title = productData.title;
    if (/[–∞-—è—ë]/i.test(title)) {
      multilingual.title_ru = title;
    } else if (/[√†√¢√§√ß√©√®√™√´√Ø√Æ√¥√π√ª√º√ø√±√¶≈ì]/i.test(title)) {
      multilingual.title_fr = title;
    } else {
      multilingual.title_en = title;
    }
  }
  
  if (productData.description) {
    const description = productData.description;
    if (/[–∞-—è—ë]/i.test(description)) {
      multilingual.description_ru = description;
    } else if (/[√†√¢√§√ß√©√®√™√´√Ø√Æ√¥√π√ª√º√ø√±√¶≈ì]/i.test(description)) {
      multilingual.description_fr = description;
    } else {
      multilingual.description_en = description;
    }
  }
  
  return Object.keys(multilingual).length > 0 ? multilingual : undefined;
};

/**
 * –†–∞—Å—á–µ—Ç —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –Ω–∞–ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
const calculateFrenchTaxes = (price, category, customTaxInfo) => {
  // –ï—Å–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —è–≤–Ω–æ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
  if (!customTaxInfo?.tva_rate && !customTaxInfo?.calculate_french_taxes) {
    return undefined;
  }
  
  const tvaRate = customTaxInfo.tva_rate || (category === 'restaurant' ? 5.5 : 20);
  const priceIncludesTva = customTaxInfo.price_includes_tva !== false;
  
  return {
    tva_rate: tvaRate,
    price_includes_tva: priceIncludesTva,
    tva_amount: priceIncludesTva ? 
      price * (tvaRate / (100 + tvaRate)) : 
      price * (tvaRate / 100)
  };
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø –æ–ø—Ü–∏–π
 */
function validateAndProcessOptionsGroups(optionsGroups, warnings) {
  const validatedGroups = [];
  
  optionsGroups.forEach((group, groupIndex) => {
    if (!group.name || typeof group.name !== 'string') {
      warnings.push(`–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–æ–∫ ${groupIndex + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
      return;
    }

    if (!group.options || !Array.isArray(group.options) || group.options.length === 0) {
      warnings.push(`–ì—Ä—É–ø–ø–∞ "${group.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–∏`);
      return;
    }

    const validatedOptions = [];
    group.options.forEach((option, optionIndex) => {
      if (!option.name || typeof option.name !== 'string') {
        warnings.push(`–û–ø—Ü–∏—è ${optionIndex + 1} –≤ –≥—Ä—É–ø–ø–µ "${group.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
        return;
      }

      if (typeof option.price !== 'number' || option.price < 0) {
        warnings.push(`–û–ø—Ü–∏—è "${option.name}": –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞`);
        return;
      }

      validatedOptions.push({
        name: option.name.trim(),
        description: option.description?.trim() || '',
        price: parseFloat(option.price),
        is_available: option.is_available !== false
      });
    });

    if (validatedOptions.length > 0) {
      validatedGroups.push({
        name: group.name.trim(),
        description: group.description?.trim() || '',
        required: Boolean(group.required),
        multiple_choice: Boolean(group.multiple_choice),
        max_selections: parseInt(group.max_selections) || 1,
        options: validatedOptions
      });
    }
  });

  return validatedGroups;
}

// ============ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò –ú–ï–ù–Æ ============

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
const getPartnerMenuCategories = async (partnerId) => {
  try {
    if (!partnerId) {
      throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await partner.updateProductStats();

    return {
      categories: partner.menu_categories,
      total_categories: partner.menu_categories.length,
      business_info: {
        business_name: partner.business_name,
        brand_name: partner.brand_name,
        category: partner.category
      }
    };

  } catch (error) {
    console.error('üö® GET PARTNER MENU CATEGORIES ERROR:', error);
    throw error;
  }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} categoryData - –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {object} - –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
const addMenuCategoryService = async (partnerId, categoryData) => {
  try {
    if (!partnerId) {
      throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const { name, description, image_url, sort_order } = categoryData;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || name.trim().length === 0) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    if (name.length > 50) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    await partner.addMenuCategory({
      name: name.trim(),
      description: description?.trim() || '',
      image_url: image_url || '',
      sort_order: sort_order || partner.menu_categories.length
    });

    const addedCategory = partner.menu_categories[partner.menu_categories.length - 1];

    return {
      category: addedCategory,
      total_categories: partner.menu_categories.length
    };

  } catch (error) {
    console.error('üö® ADD MENU CATEGORY ERROR:', error);
    throw error;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
const updateMenuCategory = async (partnerId, categoryId, updateData) => {
  try {
    if (!partnerId || !categoryId) {
      throw new Error('Partner ID –∏ Category ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    await partner.updateMenuCategory(categoryId, updateData);

    // –ù–∞—Ö–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const updatedCategory = partner.menu_categories.id(categoryId);
    
    if (!updatedCategory) {
      throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

    return {
      category: updatedCategory
    };

  } catch (error) {
    console.error('üö® UPDATE MENU CATEGORY ERROR:', error);
    throw error;
  }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
 */
const deleteMenuCategory = async (partnerId, categoryId) => {
  try {
    if (!partnerId || !categoryId) {
      throw new Error('Partner ID –∏ Category ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = partner.menu_categories.id(categoryId);
    if (!category) {
      throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const productsInCategory = await Product.countDocuments({ 
      partner_id: partner._id, 
      subcategory: category.slug 
    });

    if (productsInCategory > 0) {
      throw new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category.name}". –í –Ω–µ–π ${productsInCategory} —Ç–æ–≤–∞—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã.`);
    }

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await partner.removeMenuCategory(categoryId);

    return {
      remaining_categories: partner.menu_categories.length
    };

  } catch (error) {
    console.error('üö® DELETE MENU CATEGORY ERROR:', error);
    throw error;
  }
};

// ============ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê–ú–ò ============

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} filters - –§–∏–ª—å—Ç—Ä—ã
 * @returns {object} - –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const getPartnerProducts = async (partnerId, filters = {}) => {
  try {
    if (!partnerId) {
      throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ú–ï–¢–û–î –° –ü–û–î–î–ï–†–ñ–ö–û–ô –§–†–ê–ù–¶–£–ó–°–ö–ò–• –§–ò–õ–¨–¢–†–û–í
    let products;
    if (Object.keys(filters).some(key => 
      ['dietary_labels', 'allergen_free', 'cuisine_type', 'spice_level_max', 'availability_time'].includes(key)
    )) {
      // –ù–æ–≤—ã–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
      products = await Product.findWithFrenchFilters(partner._id, filters);
    } else {
      // –°—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
      const { category_slug, include_inactive } = filters;
      
      if (category_slug) {
        products = await Product.findByPartnerCategory(
          partner._id, 
          category_slug, 
          include_inactive === 'true'
        );
      } else {
        products = await Product.findByPartner(
          partner._id, 
          include_inactive === 'true'
        );
      }
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const productsByCategory = {};
    partner.menu_categories.forEach(category => {
      const categoryProducts = products.filter(p => p.subcategory === category.slug);
      
      productsByCategory[category.slug] = {
        category_info: category,
        products: categoryProducts.map(product => {
          const productObj = product.toObject();
          
          // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –§–†–ê–ù–¶–£–ó–°–ö–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–ï
          return {
            ...productObj,
            // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            localized_title: product.getLocalizedTitle ? 
              product.getLocalizedTitle(filters.language || 'ru') : product.title,
            display_spice_level: product.getSpiceLevelDisplay ? 
              product.getSpiceLevelDisplay(filters.language || 'ru') : product.dish_info?.spice_level,
            
            // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –Ω–∞–ª–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            tax_calculation: product.tax_info && product.calculateTaxes ? 
              product.calculateTaxes() : undefined,
            
            // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            french_metadata: {
              has_multilingual: !!product.multilingual,
              has_french_allergens: product.dish_info?.allergens?.some(a => 
                ['gluten', 'lait', '≈ìufs'].includes(a)
              ),
              dietary_labels_count: product.dietary_labels?.length || 0
            }
          };
        })
      };
    });

    return {
      products_by_category: productsByCategory,
      total_products: products.length,
      business_info: {
        business_name: partner.business_name,
        brand_name: partner.brand_name,
        category: partner.category
      },
      french_support: {
        multilingual_enabled: true,
        tax_calculation_available: true,
        dietary_filtering_enabled: true,
        language: filters.language || 'ru'
      }
    };

  } catch (error) {
    console.error('üö® GET PARTNER PRODUCTS ERROR:', error);
    throw error;
  }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} productData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @returns {object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
 */
const addPartnerProduct = async (partnerId, productData) => {
  try {
    if (!partnerId) {
      throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const {
      title, description, price, discount_price, image_url,
      subcategory, preparation_time, options_groups,
      dish_info, product_info, tags, tax_info
    } = productData;

    // ‚úÖ –ë–ê–ó–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø (–∫–∞–∫ –±—ã–ª–æ)
    if (!title || !price || !subcategory) {
      throw new Error('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: title, price, subcategory');
    }

    if (price <= 0) {
      throw new Error('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = partner.menu_categories.find(cat => cat.slug === subcategory);
    if (!category) {
      throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
    let finalOptionsGroups = [];
    let validationWarnings = [];

    if (partner.category === 'restaurant') {
      if (options_groups && Array.isArray(options_groups)) {
        finalOptionsGroups = validateAndProcessOptionsGroups(options_groups, validationWarnings);
      }
    } else if (partner.category === 'store') {
      if (options_groups && options_groups.length > 0) {
        throw new Error('–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø—Ü–∏–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º. –¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥–æ–±–∞–≤–∫–∏.');
      }
      finalOptionsGroups = [];
    }

    // –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    let finalPreparationTime = 0;
    if (partner.category === 'restaurant') {
      finalPreparationTime = preparation_time || 15;
    }

    // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø
    const normalizedDishInfo = normalizeDishInfoSafe(dish_info, partner.category);
    const multilingualData = detectMultilingualFields({ title, description });
    const frenchTaxInfo = calculateFrenchTaxes(price, partner.category, tax_info);

    // ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π)
    const productPayload = {
      partner_id: partner._id,
      title: title.trim(),
      description: description?.trim() || '',
      price: parseFloat(price),
      discount_price: discount_price ? parseFloat(discount_price) : null,
      image_url: image_url || '',
      category: partner.category,
      subcategory: subcategory,
      menu_category_id: category._id,
      preparation_time: finalPreparationTime,
      options_groups: finalOptionsGroups,
      
      // ‚úÖ –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ
      dish_info: normalizedDishInfo,
      
      // ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤)
      product_info: partner.category === 'store' ? {
        ...product_info,
        origin_country: product_info?.origin_country || 'France'
      } : (product_info || {}),
      
      // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
      ...(multilingualData && { multilingual: multilingualData }),
      ...(frenchTaxInfo && { tax_info: frenchTaxInfo }),
      
      // ‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤)
      ...(partner.category === 'restaurant' && productData.availability_schedule && {
        availability_schedule: productData.availability_schedule
      }),
      
      // ‚úÖ –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
      ...(normalizedDishInfo.dietary_labels && {
        dietary_labels: normalizedDishInfo.dietary_labels
      }),
      
      // ‚úÖ –¢–µ–≥–∏ (–∫–∞–∫ –±—ã–ª–æ)
      tags: tags || [],
      last_updated_by: partnerId
    };

    const newProduct = new Product(productPayload);

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø (–∫–∞–∫ –±—ã–ª–æ)
    await newProduct.validateCategory();
    await newProduct.save();

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–∫–∞–∫ –±—ã–ª–æ)
    await partner.updateProductStats();

    return {
      product: newProduct,
      category_info: {
        name: category.name,
        slug: category.slug
      },
      business_rules: {
        partner_category: partner.category,
        supports_options: partner.category === 'restaurant',
        supports_preparation_time: partner.category === 'restaurant',
        options_groups_count: finalOptionsGroups.length,
        preparation_time: finalPreparationTime
      },
      french_features: {
        multilingual_detected: !!multilingualData,
        tax_info_added: !!frenchTaxInfo,
        allergens_normalized: normalizedDishInfo.allergens?.length || 0,
        spice_level_normalized: normalizedDishInfo.spice_level !== undefined
      },
      warnings: validationWarnings.length > 0 ? validationWarnings : undefined
    };

  } catch (error) {
    console.error('üö® ADD PARTNER PRODUCT ERROR:', error);
    throw error;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ª–æ–≥–∏–∫–æ–π –¥–æ–±–∞–≤–æ–∫ –∏ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
 */
const updatePartnerProduct = async (partnerId, productId, updateData) => {
  try {
    if (!partnerId || !productId) {
      throw new Error('Partner ID –∏ Product ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π —ç—Ç–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
    const product = await Product.findOne({ 
      _id: productId, 
      partner_id: partner._id 
    });

    if (!product) {
      throw new Error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (updateData.subcategory && updateData.subcategory !== product.subcategory) {
      const category = partner.menu_categories.find(cat => cat.slug === updateData.subcategory);
      if (!category) {
        throw new Error('–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      updateData.menu_category_id = category._id;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
    if (updateData.price && updateData.price <= 0) {
      throw new Error('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
    }

    // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    let validationWarnings = [];

    if (updateData.options_groups !== undefined) {
      if (partner.category === 'restaurant') {
        // üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù: –†–∞–∑—Ä–µ—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ–∫
        if (Array.isArray(updateData.options_groups)) {
          updateData.options_groups = validateAndProcessOptionsGroups(updateData.options_groups, validationWarnings);
        }
      } else if (partner.category === 'store') {
        // üè™ –ú–ê–ì–ê–ó–ò–ù: –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ–∫
        throw new Error('–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥–æ–±–∞–≤–∫–∏.');
      }
    }

    // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    if (updateData.preparation_time !== undefined) {
      if (partner.category === 'store' && updateData.preparation_time > 0) {
        validationWarnings.push('–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ 0 –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤');
        updateData.preparation_time = 0;
      }
    }

    // ‚úÖ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –û –ë–õ–Æ–î–ï
    if (updateData.dish_info) {
      updateData.dish_info = normalizeDishInfoSafe(updateData.dish_info, partner.category);
    }

    // ‚úÖ –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–´–ï –ü–û–õ–Ø
    if (updateData.title || updateData.description) {
      const multilingualData = detectMultilingualFields(updateData);
      if (multilingualData) {
        updateData.multilingual = { ...product.multilingual, ...multilingualData };
      }
    }

    // ‚úÖ –§–†–ê–ù–¶–£–ó–°–ö–ò–ï –ù–ê–õ–û–ì–ò
    if (updateData.tax_info) {
      updateData.tax_info = calculateFrenchTaxes(
        updateData.price || product.price, 
        partner.category, 
        updateData.tax_info
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    const allowedFields = [
      'title', 'description', 'price', 'discount_price', 'image_url',
      'subcategory', 'menu_category_id', 'preparation_time', 'options_groups',
      'dish_info', 'product_info', 'tags', 'is_active', 'is_available',
      'sort_order', 'multilingual', 'tax_info', 'availability_schedule',
      'dietary_labels'
    ];

    allowedFields.forEach(field => {
      if (updateData[field] !== undefined) {
        product[field] = updateData[field];
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏–∑–º–µ–Ω–∏–ª
    product.last_updated_by = partnerId;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if (updateData.subcategory) {
      await product.validateCategory();
    }

    await product.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await partner.updateProductStats();

    return {
      product: product,
      business_rules: {
        partner_category: partner.category,
        supports_options: partner.category === 'restaurant',
        options_groups_count: product.options_groups.length
      },
      french_features: {
        multilingual_updated: !!updateData.multilingual,
        tax_info_updated: !!updateData.tax_info,
        allergens_normalized: product.dish_info?.allergens?.length || 0
      },
      warnings: validationWarnings.length > 0 ? validationWarnings : undefined
    };

  } catch (error) {
    console.error('üö® UPDATE PARTNER PRODUCT ERROR:', error);
    throw error;
  }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
 * @returns {object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
 */
const deletePartnerProduct = async (partnerId, productId) => {
  try {
    if (!partnerId || !productId) {
      throw new Error('Partner ID –∏ Product ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π —ç—Ç–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
    const product = await Product.findOneAndDelete({ 
      _id: productId, 
      partner_id: partner._id 
    });

    if (!product) {
      throw new Error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await partner.updateProductStats();

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã
    const remainingProducts = await Product.countDocuments({ partner_id: partner._id });

    return {
      deleted_product: {
        id: product._id,
        title: product.title,
        category_slug: product.subcategory
      },
      remaining_products: remainingProducts
    };

  } catch (error) {
    console.error('üö® DELETE PARTNER PRODUCT ERROR:', error);
    throw error;
  }
};

// ============ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–ù–Æ ============

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω—é
 */
const getPartnerMenuStats = async (partnerId) => {
  try {
    if (!partnerId) {
      throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await partner.updateProductStats();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    let fullStats;
    if (typeof partner.getFullMenuStats === 'function') {
      fullStats = await partner.getFullMenuStats();
    } else {
      // Fallback –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
      const allProducts = await Product.find({ partner_id: partner._id });
      const activeProducts = allProducts.filter(p => p.is_active && p.is_available);
      
      fullStats = {
        overview: {
          total_products: allProducts.length,
          active_products: activeProducts.length,
          total_categories: partner.menu_categories.length
        },
        categories: partner.menu_categories.map(category => ({
          category: {
            id: category._id,
            name: category.name,
            slug: category.slug
          },
          products: {
            total: category.products_count || 0,
            active: category.active_products_count || 0
          }
        }))
      };
    }

    // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –§–†–ê–ù–¶–£–ó–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò
    const frenchMetrics = await calculateFrenchMenuMetrics(partner._id);

    return {
      stats: fullStats,
      french_metrics: frenchMetrics,
      business_info: {
        business_name: partner.business_name,
        brand_name: partner.brand_name,
        category: partner.category
      }
    };

  } catch (error) {
    console.error('üö® GET PARTNER MENU STATS ERROR:', error);
    throw error;
  }
};

/**
 * –†–∞—Å—á–µ—Ç —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –º–µ–Ω—é
 * @param {string} partnerId - ID –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
 */
const calculateFrenchMenuMetrics = async (partnerId) => {
  try {
    const products = await Product.find({ partner_id: partnerId, is_active: true });
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–∫–∞–º
    const dietaryStats = {};
    const allergenStats = {};
    const spiceLevelStats = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    const cuisineStats = {};
    
    let multilingualCount = 0;
    let withTaxInfoCount = 0;
    let withNutritionCount = 0;
    
    products.forEach(product => {
      // –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏
      if (product.dietary_labels) {
        product.dietary_labels.forEach(label => {
          dietaryStats[label] = (dietaryStats[label] || 0) + 1;
        });
      }
      
      // –ê–ª–ª–µ—Ä–≥–µ–Ω—ã
      if (product.dish_info?.allergens) {
        product.dish_info.allergens.forEach(allergen => {
          allergenStats[allergen] = (allergenStats[allergen] || 0) + 1;
        });
      }
      
      // –£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç—Ä–æ—Å—Ç–∏
      const spiceLevel = product.dish_info?.spice_level;
      if (typeof spiceLevel === 'number' && spiceLevel >= 0 && spiceLevel <= 5) {
        spiceLevelStats[spiceLevel]++;
      }
      
      // –¢–∏–ø –∫—É—Ö–Ω–∏
      if (product.dish_info?.cuisine_type) {
        cuisineStats[product.dish_info.cuisine_type] = 
          (cuisineStats[product.dish_info.cuisine_type] || 0) + 1;
      }
      
      // –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å
      if (product.multilingual) {
        multilingualCount++;
      }
      
      // –ù–∞–ª–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      if (product.tax_info) {
        withTaxInfoCount++;
      }
      
      // –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
      if (product.dish_info?.nutrition?.calories_per_100g) {
        withNutritionCount++;
      }
    });
    
    const totalProducts = products.length;
    
    return {
      dietary_compliance: {
        vegetarian_count: dietaryStats['v√©g√©tarien'] || dietaryStats['vegetarian'] || 0,
        vegan_count: dietaryStats['v√©g√©talien'] || dietaryStats['vegan'] || 0,
        halal_count: dietaryStats['halal'] || 0,
        gluten_free_count: dietaryStats['sans_gluten'] || dietaryStats['gluten_free'] || 0,
        organic_count: dietaryStats['bio'] || dietaryStats['organic'] || 0
      },
      
      allergen_distribution: allergenStats,
      
      spice_level_distribution: spiceLevelStats,
      
      cuisine_distribution: cuisineStats,
      
      french_compliance: {
        multilingual_products: multilingualCount,
        multilingual_percentage: totalProducts > 0 ? 
          Math.round((multilingualCount / totalProducts) * 100) : 0,
        
        with_tax_info: withTaxInfoCount,
        tax_compliance_percentage: totalProducts > 0 ? 
          Math.round((withTaxInfoCount / totalProducts) * 100) : 0,
        
        with_nutrition_info: withNutritionCount,
        nutrition_compliance_percentage: totalProducts > 0 ? 
          Math.round((withNutritionCount / totalProducts) * 100) : 0
      },
      
      recommendations: generateFrenchRecommendations(totalProducts, {
        multilingualCount,
        withTaxInfoCount,
        withNutritionCount,
        allergenStats
      })
    };
    
  } catch (error) {
    console.error('üö® CALCULATE FRENCH MENU METRICS ERROR:', error);
    return {
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏',
      basic_stats_only: true
    };
  }
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
 * @param {number} totalProducts - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @param {object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @returns {array} - –ú–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
const generateFrenchRecommendations = (totalProducts, stats) => {
  const recommendations = [];
  
  if (totalProducts === 0) {
    recommendations.push({
      type: 'critical',
      priority: 'high',
      message: '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã',
      action: 'add_products'
    });
    return recommendations;
  }
  
  // –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å
  const multilingualPercentage = (stats.multilingualCount / totalProducts) * 100;
  if (multilingualPercentage < 50) {
    recommendations.push({
      type: 'localization',
      priority: 'medium',
      message: `–¢–æ–ª—å–∫–æ ${Math.round(multilingualPercentage)}% –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–º–µ—é—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è`,
      action: 'add_multilingual_titles',
      suggestion: '–î–æ–±–∞–≤—å—Ç–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ª—É—á—à–µ–≥–æ SEO'
    });
  }
  
  // –ù–∞–ª–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  const taxCompliancePercentage = (stats.withTaxInfoCount / totalProducts) * 100;
  if (taxCompliancePercentage < 100) {
    recommendations.push({
      type: 'compliance',
      priority: 'high',
      message: `${totalProducts - stats.withTaxInfoCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`,
      action: 'add_tax_info',
      suggestion: '–î–æ–±–∞–≤—å—Ç–µ –ù–î–° –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º'
    });
  }
  
  // –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
  const nutritionPercentage = (stats.withNutritionCount / totalProducts) * 100;
  if (nutritionPercentage < 30) {
    recommendations.push({
      type: 'nutrition',
      priority: 'medium',
      message: `–¢–æ–ª—å–∫–æ ${Math.round(nutritionPercentage)}% –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏`,
      action: 'add_nutrition_info',
      suggestion: '–î–æ–±–∞–≤—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤)'
    });
  }
  
  // –ê–ª–ª–µ—Ä–≥–µ–Ω—ã
  const hasAllergenInfo = Object.keys(stats.allergenStats).length > 0;
  if (!hasAllergenInfo) {
    recommendations.push({
      type: 'legal',
      priority: 'critical',
      message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö',
      action: 'add_allergen_info',
      suggestion: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É'
    });
  }
  
  return recommendations;
};

// ============ –£–¢–ò–õ–ò–¢–´ –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} searchQuery - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {object} options - –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
const searchPartnerProducts = async (partnerId, searchQuery, options = {}) => {
  try {
    if (!partnerId || !searchQuery) {
      throw new Error('Partner ID –∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const { language = 'ru', limit = 20 } = options;

    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
    const searchResults = await Product.find({
      partner_id: partner._id,
      is_active: true,
      $text: { $search: searchQuery }
    })
    .limit(limit)
    .sort({ score: { $meta: 'textScore' } });

    return {
      query: searchQuery,
      results: searchResults.map(product => ({
        ...product.toObject(),
        localized_title: product.getLocalizedTitle ? 
          product.getLocalizedTitle(language) : product.title,
        relevance_score: product.score || 0
      })),
      total_found: searchResults.length,
      search_options: {
        language,
        limit
      }
    };

  } catch (error) {
    console.error('üö® SEARCH PARTNER PRODUCTS ERROR:', error);
    throw error;
  }
};

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param {object} filters - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
const bulkUpdateProducts = async (partnerId, updateData, filters = {}) => {
  try {
    if (!partnerId) {
      throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const productFilter = { partner_id: partner._id };
    
    if (filters.subcategory) {
      productFilter.subcategory = filters.subcategory;
    }
    
    if (filters.is_active !== undefined) {
      productFilter.is_active = filters.is_active;
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const allowedFields = ['is_active', 'is_available', 'sort_order', 'tags'];
    const safeUpdateData = {};
    
    allowedFields.forEach(field => {
      if (updateData[field] !== undefined) {
        safeUpdateData[field] = updateData[field];
      }
    });

    if (Object.keys(safeUpdateData).length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    safeUpdateData.last_updated_by = partnerId;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const updateResult = await Product.updateMany(productFilter, safeUpdateData);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await partner.updateProductStats();

    return {
      matched_products: updateResult.matchedCount,
      modified_products: updateResult.modifiedCount,
      update_data: safeUpdateData,
      filters_applied: filters
    };

  } catch (error) {
    console.error('üö® BULK UPDATE PRODUCTS ERROR:', error);
    throw error;
  }
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –º–µ–Ω—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
 * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} format - –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (json, csv)
 * @param {object} options - –û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @returns {object} - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
const exportPartnerMenu = async (partnerId, format = 'json', options = {}) => {
  try {
    if (!partnerId) {
      throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const partner = await PartnerProfile.findOne({ user_id: partnerId });
    
    if (!partner) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const { include_inactive = false, language = 'ru' } = options;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const products = await Product.find({
      partner_id: partner._id,
      ...(include_inactive ? {} : { is_active: true, is_available: true })
    }).sort({ subcategory: 1, sort_order: 1, title: 1 });

    const exportData = {
      restaurant_info: {
        name: partner.business_name,
        brand_name: partner.brand_name,
        category: partner.category,
        total_products: products.length
      },
      categories: partner.menu_categories.map(category => ({
        id: category._id,
        name: category.name,
        slug: category.slug,
        description: category.description,
        products_count: products.filter(p => p.subcategory === category.slug).length
      })),
      products: products.map(product => {
        const baseData = {
          id: product._id,
          title: product.getLocalizedTitle ? 
            product.getLocalizedTitle(language) : product.title,
          description: product.description,
          price: product.price,
          discount_price: product.discount_price,
          final_price: product.final_price,
          category: product.subcategory,
          preparation_time: product.preparation_time,
          is_active: product.is_active,
          is_available: product.is_available
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if (product.dish_info) {
          baseData.allergens = product.dish_info.allergens;
          baseData.spice_level = product.getSpiceLevelDisplay ? 
            product.getSpiceLevelDisplay(language) : product.dish_info.spice_level;
          baseData.is_vegetarian = product.dish_info.is_vegetarian;
          baseData.is_vegan = product.dish_info.is_vegan;
          baseData.is_halal = product.dish_info.is_halal;
        }

        if (product.dietary_labels) {
          baseData.dietary_labels = product.dietary_labels;
        }

        if (product.tax_info && product.calculateTaxes) {
          baseData.tax_calculation = product.calculateTaxes();
        }

        return baseData;
      }),
      export_info: {
        exported_at: new Date(),
        format: format,
        language: language,
        include_inactive: include_inactive,
        total_items: products.length
      }
    };

    return {
      format: format,
      data: exportData,
      filename: `${partner.business_name.replace(/\s+/g, '_')}_menu_${format}_${new Date().toISOString().split('T')[0]}`
    };

  } catch (error) {
    console.error('üö® EXPORT PARTNER MENU ERROR:', error);
    throw error;
  }
};

// ============ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ============

export {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  getPartnerMenuCategories,
  addMenuCategoryService,
  updateMenuCategory,
  deleteMenuCategory,
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
  getPartnerProducts,
  addPartnerProduct,
  updatePartnerProduct,
  deletePartnerProduct,
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getPartnerMenuStats,
  calculateFrenchMenuMetrics,
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  searchPartnerProducts,
  bulkUpdateProducts,
  exportPartnerMenu,
  
  // –£—Ç–∏–ª–∏—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)
  normalizeSpiceLevel,
  normalizeAllergens,
  normalizeDishInfoSafe,
  detectMultilingualFields,
  calculateFrenchTaxes,
  validateAndProcessOptionsGroups
};