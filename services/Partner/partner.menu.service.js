// ================ services/Partner/partner.menu.service.js - –ü–û–õ–ù–´–ô –°–ï–†–í–ò–° ================
import { PartnerProfile, Product } from '../../models/index.js';
import mongoose from 'mongoose';

// ============ –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• ============

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø –¥–æ–±–∞–≤–æ–∫ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
 * ‚úÖ –¢–û–õ–¨–ö–û –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê, –ë–ï–ó –í–ê–õ–ò–î–ê–¶–ò–ò (—É–∂–µ –≤ middleware)
 * @param {Array} optionsGroups - –ú–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø –¥–æ–±–∞–≤–æ–∫
 * @returns {Array} - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–æ–∫
 */
const processRestaurantOptions = (optionsGroups) => {
    return optionsGroups.map(group => ({
        name: group.name.trim(),
        description: group.description?.trim() || '',
        required: group.required || false,
        multiple_choice: group.multiple_choice || false,
        max_selections: group.max_selections || 1,
        options: group.options.map(option => ({
            name: option.name.trim(),
            price: parseFloat(option.price),
            is_available: option.is_available !== false
        }))
    }));
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ø–∞–∫–æ–≤–∫–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
 * ‚úÖ –¢–û–õ–¨–ö–û –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê
 * @param {Object} productInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
 * @param {string} partnerCountry - –°—Ç—Ä–∞–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {Object} - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ
 */
const processStorePackaging = (productInfo, partnerCountry = 'France') => {
    const processed = { ...productInfo };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!processed.origin_country) {
        processed.origin_country = partnerCountry;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (processed.weight_grams) {
        processed.weight_grams = parseFloat(processed.weight_grams);
    }
    if (processed.volume_ml) {
        processed.volume_ml = parseFloat(processed.volume_ml);
    }
    if (processed.unit_count) {
        processed.unit_count = parseInt(processed.unit_count);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏
    processed.packaging_metadata = {
        has_weight: !!processed.weight_grams,
        has_volume: !!processed.volume_ml,
        has_barcode: !!(processed.barcode_ean13 || processed.barcode_ean8),
        unit_type: processed.weight_grams ? 'weight' : processed.volume_ml ? 'volume' : 'count'
    };
    
    return processed;
};

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª—é–¥–µ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
 * @param {Object} dishInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ
 * @returns {Object} - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 */
const processDishInfo = (dishInfo = {}) => {
    const processed = { ...dishInfo };
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
    if (processed.allergens && Array.isArray(processed.allergens)) {
        processed.allergens = processed.allergens.filter(allergen => 
            typeof allergen === 'string' && allergen.trim().length > 0
        );
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    if (processed.ingredients && Array.isArray(processed.ingredients)) {
        processed.ingredients = processed.ingredients
            .filter(ingredient => typeof ingredient === 'string' && ingredient.trim().length > 0)
            .map(ingredient => ingredient.trim());
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –æ—Å—Ç—Ä–æ—Å—Ç–∏
    if (processed.spice_level !== undefined) {
        if (typeof processed.spice_level === 'string') {
            const spiceLevelMap = {
                '–Ω–µ—Ç': 0, '—Å–ª–∞–±–æ': 1, '—Å—Ä–µ–¥–Ω–µ': 2, '–æ—Å—Ç—Ä–æ': 3, '–æ—á–µ–Ω—å –æ—Å—Ç—Ä–æ': 4, '—ç–∫—Å—Ç—Ä–∏–º': 5,
                'none': 0, 'mild': 1, 'medium': 2, 'hot': 3, 'very hot': 4, 'extreme': 5,
                'aucun': 0, 'doux': 1, 'moyen': 2, 'piquant': 3, 'tr√®s piquant': 4, 'extr√™me': 5
            };
            processed.spice_level = spiceLevelMap[processed.spice_level.toLowerCase()] || 0;
        }
    }
    
    return processed;
};

// ============ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò –ú–ï–ù–Æ ============

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
const getPartnerMenuCategories = async (partnerId) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        console.log('üîç GET PARTNER MENU CATEGORIES:', { partnerId });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ user_id
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await partner.updateProductStats();

        console.log('‚úÖ CATEGORIES FOUND:', {
            total_categories: partner.menu_categories.length,
            business_name: partner.business_name,
            category: partner.category
        });

        return {
            categories: partner.menu_categories,
            total_categories: partner.menu_categories.length,
            business_info: {
                business_name: partner.business_name,
                brand_name: partner.brand_name,
                category: partner.category,
                supports_options: partner.category === 'restaurant',
                supports_packaging: partner.category === 'store'
            }
        };

    } catch (error) {
        console.error('üö® GET PARTNER MENU CATEGORIES ERROR:', error);
        throw error;
    }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ menu_categories
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} categoryData - –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {object} - –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
const addMenuCategoryService = async (partnerId, categoryData) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        console.log('üîç ADD MENU CATEGORY:', { 
            partnerId, 
            categoryName: categoryData.name 
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ user_id
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existingCategory = partner.menu_categories.find(
            cat => cat.name.toLowerCase() === categoryData.name.toLowerCase().trim()
        );

        if (existingCategory) {
            throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º slug —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        const createSlug = (name) => {
            // –°–ª–æ–≤–∞—Ä—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
            const cyrillicToLatin = {
                '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
                '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
                '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
                '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch',
                '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
            };

            return name
                .toLowerCase()
                .trim()
                .split('')
                .map(char => cyrillicToLatin[char] || char)  // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
                .join('')
                .replace(/[^a-z0-9\s-]/g, '')               // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
                .replace(/\s+/g, '-')                       // –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
                .replace(/-+/g, '-')                        // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ—Ñ–∏—Å—ã
                .replace(/^-+|-+$/g, '');                   // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        };

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ menu_categories
        const categoryName = categoryData.name.trim();
        const categorySlug = createSlug(categoryName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ slug –Ω–µ –ø—É—Å—Ç–æ–π
        if (!categorySlug) {
            throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
        const existingSlug = partner.menu_categories.find(cat => cat.slug === categorySlug);
        if (existingSlug) {
            throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (slug: ${categorySlug})`);
        }

        const newCategory = {
            name: categoryName,
            slug: categorySlug,
            description: categoryData.description?.trim() || '',
            image_url: categoryData.image_url || '',
            sort_order: categoryData.sort_order !== undefined ? 
                categoryData.sort_order : partner.menu_categories.length,
            is_active: true,
            products_count: 0,
            created_at: new Date(),
            updated_at: new Date()
        };

        console.log('üîç CREATING CATEGORY:', {
            name: newCategory.name,
            slug: newCategory.slug,
            slug_length: newCategory.slug.length
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
        partner.menu_categories.push(newCategory);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await partner.save();

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        const addedCategory = partner.menu_categories[partner.menu_categories.length - 1];

        console.log('‚úÖ CATEGORY ADDED:', {
            category_id: addedCategory._id,
            category_name: addedCategory.name,
            category_slug: addedCategory.slug,
            total_categories: partner.menu_categories.length
        });

        return {
            category: {
                id: addedCategory._id,
                name: addedCategory.name,
                slug: addedCategory.slug,
                description: addedCategory.description,
                image_url: addedCategory.image_url,
                sort_order: addedCategory.sort_order,
                is_active: addedCategory.is_active,
                products_count: addedCategory.products_count,
                created_at: addedCategory.created_at
            },
            total_categories: partner.menu_categories.length
        };

    } catch (error) {
        console.error('üö® ADD MENU CATEGORY ERROR:', error);
        throw error;
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * ‚úÖ –£–ë–†–ê–ù–ê –í–ê–õ–ò–î–ê–¶–ò–Ø - –¢–û–õ–¨–ö–û –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
const updateMenuCategory = async (partnerId, categoryId, updateData) => {
    try {
        if (!partnerId || !categoryId) {
            throw new Error('Partner ID –∏ Category ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        console.log('üîç UPDATE MENU CATEGORY:', { 
            partnerId, 
            categoryId,
            updateData: Object.keys(updateData)
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ user_id
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const processedUpdateData = {};
        if (updateData.name) processedUpdateData.name = updateData.name.trim();
        if (updateData.description !== undefined) processedUpdateData.description = updateData.description.trim();
        if (updateData.image_url !== undefined) processedUpdateData.image_url = updateData.image_url;
        if (updateData.sort_order !== undefined) processedUpdateData.sort_order = updateData.sort_order;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
        await partner.updateMenuCategory(categoryId, processedUpdateData);

        // –ù–∞—Ö–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const updatedCategory = partner.menu_categories.id(categoryId);
        
        if (!updatedCategory) {
            throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }

        console.log('‚úÖ CATEGORY UPDATED:', {
            category_id: updatedCategory._id,
            category_name: updatedCategory.name
        });

        return {
            category: updatedCategory
        };

    } catch (error) {
        console.error('üö® UPDATE MENU CATEGORY ERROR:', error);
        throw error;
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
 */
const deleteMenuCategory = async (partnerId, categoryId) => {
    try {
        if (!partnerId || !categoryId) {
            throw new Error('Partner ID –∏ Category ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        console.log('üîç DELETE MENU CATEGORY:', { partnerId, categoryId });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ user_id
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const category = partner.menu_categories.id(categoryId);
        if (!category) {
            throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        const productsInCategory = await Product.countDocuments({ 
            partner_id: partner._id, 
            subcategory: category.slug 
        });

        if (productsInCategory > 0) {
            throw new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category.name}". –í –Ω–µ–π ${productsInCategory} —Ç–æ–≤–∞—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã.`);
        }

        // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await partner.removeMenuCategory(categoryId);

        console.log('‚úÖ CATEGORY DELETED:', {
            deleted_category: category.name,
            remaining_categories: partner.menu_categories.length
        });

        return {
            remaining_categories: partner.menu_categories.length
        };

    } catch (error) {
        console.error('üö® DELETE MENU CATEGORY ERROR:', error);
        throw error;
    }
};

// ============ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê–ú–ò ============

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} filters - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {object} - –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
const getPartnerProducts = async (partnerId, filters = {}) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        console.log('üîç GET PARTNER PRODUCTS:', { 
            partnerId, 
            filters: Object.keys(filters) 
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ user_id
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        const { category_slug, include_inactive } = filters;
        let products;
        
        if (category_slug) {
            products = await Product.findByPartnerCategory(
                partner._id, 
                category_slug, 
                include_inactive === 'true'
            );
        } else {
            products = await Product.findByPartner(
                partner._id, 
                include_inactive === 'true'
            );
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const productsByCategory = {};
        partner.menu_categories.forEach(category => {
            const categoryProducts = products.filter(p => p.subcategory === category.slug);
            
            productsByCategory[category.slug] = {
                category_info: {
                    id: category._id,
                    name: category.name,
                    slug: category.slug,
                    description: category.description,
                    image_url: category.image_url,
                    sort_order: category.sort_order,
                    products_count: categoryProducts.length
                },
                products: categoryProducts.map(product => ({
                    ...product.getDisplayInfo(),
                    business_type: partner.category,
                    supports_options: partner.category === 'restaurant' && product.options_groups.length > 0,
                    has_packaging_info: partner.category === 'store' && !!product.product_info
                }))
            };
        });

        console.log('‚úÖ PRODUCTS FOUND:', {
            total_products: products.length,
            categories_with_products: Object.keys(productsByCategory).filter(
                key => productsByCategory[key].products.length > 0
            ).length
        });

        return {
            products_by_category: productsByCategory,
            total_products: products.length,
            active_products: products.filter(p => p.is_active && p.is_available).length,
            business_info: {
                business_name: partner.business_name,
                brand_name: partner.brand_name,
                category: partner.category,
                supports_options: partner.category === 'restaurant',
                supports_packaging: partner.category === 'store'
            }
        };

    } catch (error) {
        console.error('üö® GET PARTNER PRODUCTS ERROR:', error);
        throw error;
    }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
 * ‚úÖ –£–ë–†–ê–ù–ê –í–ê–õ–ò–î–ê–¶–ò–Ø - –¢–û–õ–¨–ö–û –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {object} productData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @returns {object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
const addPartnerProduct = async (partnerId, productData) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        const {
            title, description, price, discount_price, image_url,
            subcategory, preparation_time, options_groups,
            dish_info, product_info, tags
        } = productData;

        console.log('üîç ADD PARTNER PRODUCT:', { 
            partnerId, 
            title,
            partner_type: 'detecting...'
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ user_id
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        console.log('üîç PARTNER TYPE DETECTED:', { 
            partner_category: partner.category,
            business_name: partner.business_name
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const category = partner.menu_categories.find(cat => cat.slug === subcategory);
        if (!category) {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üîç CATEGORY SEARCH DEBUG:', {
        looking_for_slug: subcategory,
        available_categories: partner.menu_categories.map(cat => ({
            name: cat.name,
            slug: cat.slug || 'NO_SLUG',
            id: cat._id
        }))
    });
    throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å slug "${subcategory}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–∏–ø—É –∑–∞–≤–µ–¥–µ–Ω–∏—è
        let finalOptionsGroups = [];
        let finalProductInfo = {};
        let finalDishInfo = {};
        let finalPreparationTime = 0;

        if (partner.category === 'restaurant') {
            // üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ
            console.log('üçΩÔ∏è PROCESSING RESTAURANT PRODUCT');
            
            if (options_groups && Array.isArray(options_groups) && options_groups.length > 0) {
                finalOptionsGroups = processRestaurantOptions(options_groups);
                console.log('‚úÖ OPTIONS PROCESSED:', { groups_count: finalOptionsGroups.length });
            }
            
            finalPreparationTime = preparation_time || 15;
            finalDishInfo = processDishInfo(dish_info);
            
        } else if (partner.category === 'store') {
            // üè™ –ú–ê–ì–ê–ó–ò–ù: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É
            console.log('üè™ PROCESSING STORE PRODUCT');
            
            finalOptionsGroups = []; // –ù–∏–∫–∞–∫–∏—Ö –¥–æ–±–∞–≤–æ–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
            finalPreparationTime = 0; // –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            finalProductInfo = processStorePackaging(
                product_info || {}, 
                partner.address || 'France'
            );
            
            console.log('‚úÖ PACKAGING PROCESSED:', finalProductInfo.packaging_metadata);
        }

        // ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê
        const productPayload = {
            partner_id: partner._id,
            title: title.trim(),
            description: description?.trim() || '',
            price: parseFloat(price),
            discount_price: discount_price ? parseFloat(discount_price) : null,
            image_url: image_url || '',
            category: partner.category,
            subcategory: subcategory,
            menu_category_id: category._id,
            preparation_time: finalPreparationTime,
            options_groups: finalOptionsGroups,
            tags: tags || [],
            last_updated_by: new mongoose.Types.ObjectId(partnerId)
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
        if (partner.category === 'restaurant') {
            productPayload.dish_info = finalDishInfo;
        } else if (partner.category === 'store') {
            productPayload.product_info = finalProductInfo;
        }

        const newProduct = new Product(productPayload);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await newProduct.validateCategory();
        await newProduct.save();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await partner.updateProductStats();

        console.log('‚úÖ PRODUCT CREATED:', {
            product_id: newProduct._id,
            title: newProduct.title,
            category: newProduct.category,
            subcategory: newProduct.subcategory,
            has_options: finalOptionsGroups.length > 0,
            preparation_time: finalPreparationTime
        });

        return {
            product: newProduct.getDisplayInfo(),
            category_info: {
                id: category._id,
                name: category.name,
                slug: category.slug
            },
            business_rules: {
                partner_category: partner.category,
                supports_options: partner.category === 'restaurant',
                supports_packaging: partner.category === 'store',
                options_groups_count: finalOptionsGroups.length,
                preparation_time: finalPreparationTime,
                has_packaging_info: partner.category === 'store' && !!finalProductInfo.packaging_metadata
            }
        };

    } catch (error) {
        console.error('üö® ADD PARTNER PRODUCT ERROR:', error);
        throw error;
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
 * ‚úÖ –£–ë–†–ê–ù–ê –í–ê–õ–ò–î–ê–¶–ò–Ø - –¢–û–õ–¨–ö–û –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
 */
const updatePartnerProduct = async (partnerId, productId, updateData) => {
    try {
        if (!partnerId || !productId) {
            throw new Error('Partner ID –∏ Product ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        console.log('üîç UPDATE PARTNER PRODUCT:', { 
            partnerId, 
            productId,
            fields_to_update: Object.keys(updateData)
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ user_id
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π —ç—Ç–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
        const product = await Product.findOne({ 
            _id: new mongoose.Types.ObjectId(productId), 
            partner_id: partner._id 
        });

        if (!product) {
            throw new Error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        console.log('üîç CURRENT PRODUCT:', {
            title: product.title,
            category: product.category,
            current_options: product.options_groups.length
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (updateData.subcategory && updateData.subcategory !== product.subcategory) {
            const category = partner.menu_categories.find(cat => cat.slug === updateData.subcategory);
            if (!category) {
                throw new Error('–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            updateData.menu_category_id = category._id;
        }

        // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–∏–ø—É –∑–∞–≤–µ–¥–µ–Ω–∏—è
        if (updateData.options_groups !== undefined) {
            if (partner.category === 'restaurant') {
                // üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù: –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–±–∞–≤–∫–∏
                console.log('üçΩÔ∏è UPDATING RESTAURANT OPTIONS');
                if (Array.isArray(updateData.options_groups)) {
                    updateData.options_groups = processRestaurantOptions(updateData.options_groups);
                    console.log('‚úÖ OPTIONS UPDATED:', { groups_count: updateData.options_groups.length });
                }
            } else if (partner.category === 'store') {
                // üè™ –ú–ê–ì–ê–ó–ò–ù: –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ–±–∞–≤–∫–∏
                throw new Error('–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥–æ–±–∞–≤–∫–∏.');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ/–±–ª—é–¥–µ
        if (partner.category === 'restaurant' && updateData.dish_info) {
            console.log('üçΩÔ∏è UPDATING DISH INFO');
            updateData.dish_info = processDishInfo({
                ...product.dish_info,
                ...updateData.dish_info
            });
        }

        if (partner.category === 'store' && updateData.product_info) {
            console.log('üè™ UPDATING PRODUCT INFO');
            updateData.product_info = processStorePackaging(
                { ...product.product_info, ...updateData.product_info },
                partner.address || 'France'
            );
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if (updateData.title) updateData.title = updateData.title.trim();
        if (updateData.description !== undefined) updateData.description = updateData.description.trim();
        if (updateData.price) updateData.price = parseFloat(updateData.price);
        if (updateData.discount_price) updateData.discount_price = parseFloat(updateData.discount_price);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
        updateData.last_updated_by = new mongoose.Types.ObjectId(partnerId);
        
        Object.assign(product, updateData);
        await product.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await partner.updateProductStats();

        console.log('‚úÖ PRODUCT UPDATED:', {
            product_id: product._id,
            title: product.title,
            has_options: product.options_groups.length > 0
        });

        return {
            product: product.getDisplayInfo(),
            business_rules: {
                partner_category: partner.category,
                supports_options: partner.category === 'restaurant',
                supports_packaging: partner.category === 'store',
                options_groups_count: product.options_groups.length,
                has_packaging_info: partner.category === 'store' && !!product.product_info
            }
        };

    } catch (error) {
        console.error('üö® UPDATE PARTNER PRODUCT ERROR:', error);
        throw error;
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
 * @returns {object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
 */
const deletePartnerProduct = async (partnerId, productId) => {
    try {
        if (!partnerId || !productId) {
            throw new Error('Partner ID –∏ Product ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        console.log('üîç DELETE PARTNER PRODUCT:', { partnerId, productId });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ user_id
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π —ç—Ç–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
        const product = await Product.findOneAndDelete({ 
            _id: new mongoose.Types.ObjectId(productId), 
            partner_id: partner._id 
        });

        if (!product) {
            throw new Error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await partner.updateProductStats();

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã
        const remainingProducts = await Product.countDocuments({ 
            partner_id: partner._id 
        });

        console.log('‚úÖ PRODUCT DELETED:', {
            deleted_title: product.title,
            deleted_category: product.subcategory,
            remaining_products: remainingProducts
        });

        return {
            deleted_product: {
                id: product._id,
                title: product.title,
                category_slug: product.subcategory,
                business_type: product.category
            },
            remaining_products: remainingProducts
        };

    } catch (error) {
        console.error('üö® DELETE PARTNER PRODUCT ERROR:', error);
        throw error;
    }
};

// ============ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–ù–Æ ============

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω—é
 */
const getPartnerMenuStats = async (partnerId) => {
    try {
        if (!partnerId) {
            throw new Error('Partner ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        console.log('üîç GET PARTNER MENU STATS:', { partnerId });

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const allProducts = await Product.find({ 
            partner_id: partner._id 
        });

        const activeProducts = allProducts.filter(p => p.is_active && p.is_available);
        const inactiveProducts = allProducts.filter(p => !p.is_active || !p.is_available);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const categoryStats = partner.menu_categories.map(category => {
            const categoryProducts = allProducts.filter(p => p.subcategory === category.slug);
            const activeCategoryProducts = activeProducts.filter(p => p.subcategory === category.slug);

            return {
                category: {
                    id: category._id,
                    name: category.name,
                    slug: category.slug,
                    description: category.description
                },
                products: {
                    total: categoryProducts.length,
                    active: activeCategoryProducts.length,
                    inactive: categoryProducts.length - activeCategoryProducts.length
                },
                pricing: {
                    avg_price: activeCategoryProducts.length > 0 
                        ? (activeCategoryProducts.reduce((sum, p) => sum + p.final_price, 0) / activeCategoryProducts.length).toFixed(2) 
                        : 0,
                    min_price: activeCategoryProducts.length > 0 
                        ? Math.min(...activeCategoryProducts.map(p => p.final_price)).toFixed(2) 
                        : 0,
                    max_price: activeCategoryProducts.length > 0 
                        ? Math.max(...activeCategoryProducts.map(p => p.final_price)).toFixed(2) 
                        : 0
                },
                features: {
                    has_discounts: categoryProducts.some(p => p.discount_price && p.discount_price > 0),
                    has_options: categoryProducts.some(p => p.options_groups && p.options_groups.length > 0),
                    avg_preparation_time: partner.category === 'restaurant' && categoryProducts.length > 0 
                        ? Math.round(categoryProducts.reduce((sum, p) => sum + (p.preparation_time || 0), 0) / categoryProducts.length) 
                        : 0
                }
            };
        });

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const avgPrice = activeProducts.length > 0 
            ? activeProducts.reduce((sum, p) => sum + p.final_price, 0) / activeProducts.length 
            : 0;

        const minPrice = activeProducts.length > 0 
            ? Math.min(...activeProducts.map(p => p.final_price)) 
            : 0;

        const maxPrice = activeProducts.length > 0 
            ? Math.max(...activeProducts.map(p => p.final_price)) 
            : 0;

        const statsResult = {
            overview: {
                total_categories: partner.menu_categories.length,
                total_products: allProducts.length,
                active_products: activeProducts.length,
                inactive_products: inactiveProducts.length,
                completion_percentage: partner.menu_categories.length > 0 
                    ? Math.round((partner.menu_categories.filter(cat => 
                        allProducts.some(p => p.subcategory === cat.slug)
                      ).length / partner.menu_categories.length) * 100)
                    : 0
            },
            pricing: {
                avg_price: avgPrice.toFixed(2),
                min_price: minPrice.toFixed(2),
                max_price: maxPrice.toFixed(2),
                products_with_discounts: allProducts.filter(p => p.discount_price && p.discount_price > 0).length,
                discount_percentage: allProducts.length > 0 
                    ? Math.round((allProducts.filter(p => p.discount_price && p.discount_price > 0).length / allProducts.length) * 100)
                    : 0
            },
            categories: categoryStats,
            business_info: {
                business_name: partner.business_name,
                category: partner.category,
                is_approved: partner.is_approved,
                is_active: partner.is_active,
                content_status: partner.content_status
            },
            last_updated: new Date()
        };

        console.log('‚úÖ STATS GENERATED:', {
            total_categories: statsResult.overview.total_categories,
            total_products: statsResult.overview.total_products,
            completion_percentage: statsResult.overview.completion_percentage
        });

        return statsResult;

    } catch (error) {
        console.error('üö® GET PARTNER MENU STATS ERROR:', error);
        throw error;
    }
};

// ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ============

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {string} partnerCategory - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (restaurant/store)
 * @param {object} productData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
 */
const validateProductCompatibility = (partnerCategory, productData) => {
    const warnings = [];
    const recommendations = [];

    if (partnerCategory === 'restaurant') {
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        if (!productData.preparation_time || productData.preparation_time < 5) {
            recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç)');
        }

        if (!productData.options_groups || productData.options_groups.length === 0) {
            recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ü–∏–π (—Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏, —Å–æ—É—Å—ã, –≥–∞—Ä–Ω–∏—Ä—ã)');
        }

        if (productData.product_info && Object.keys(productData.product_info).length > 0) {
            warnings.push('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥');
        }

    } else if (partnerCategory === 'store') {
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
        if (productData.preparation_time && productData.preparation_time > 0) {
            warnings.push('–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞');
        }

        if (productData.options_groups && productData.options_groups.length > 0) {
            warnings.push('–û–ø—Ü–∏–∏ (–¥–æ–±–∞–≤–∫–∏) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞');
        }

        if (!productData.product_info || !productData.product_info.weight_grams && !productData.product_info.volume_ml) {
            recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –≤–µ—Å –∏–ª–∏ –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞');
        }

        if (productData.product_info && !productData.product_info.origin_country) {
            recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
        }
    }

    return {
        is_compatible: warnings.length === 0,
        warnings,
        recommendations,
        partner_category: partnerCategory
    };
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–µ–Ω—é
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @returns {object} - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
 */
const getMenuRecommendations = async (partnerId) => {
    try {
        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const products = await Product.findByPartner(partner._id, true);
        const recommendations = [];

        // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (partner.menu_categories.length < 3) {
            recommendations.push({
                type: 'categories',
                priority: 'high',
                message: `–£ –≤–∞—Å ${partner.menu_categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º 3-4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é.`
            });
        }

        if (products.length < 5) {
            recommendations.push({
                type: 'products',
                priority: 'high',
                message: `–£ –≤–∞—Å ${products.length} —Ç–æ–≤–∞—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.`
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∑–∞–≤–µ–¥–µ–Ω–∏—è
        if (partner.category === 'restaurant') {
            const productsWithoutOptions = products.filter(p => !p.options_groups || p.options_groups.length === 0);
            if (productsWithoutOptions.length > products.length * 0.7) {
                recommendations.push({
                    type: 'options',
                    priority: 'medium',
                    message: '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –±–ª—é–¥ –Ω–µ –∏–º–µ—é—Ç –æ–ø—Ü–∏–π. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤, —Å–æ—É—Å–æ–≤ –∏–ª–∏ –≥–∞—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞.'
                });
            }

            const productsWithoutPreparationTime = products.filter(p => !p.preparation_time || p.preparation_time === 0);
            if (productsWithoutPreparationTime.length > 0) {
                recommendations.push({
                    type: 'preparation_time',
                    priority: 'low',
                    message: `${productsWithoutPreparationTime.length} –±–ª—é–¥ –Ω–µ –∏–º–µ—é—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.`
                });
            }

        } else if (partner.category === 'store') {
            const productsWithoutPackaging = products.filter(p => 
                !p.product_info || 
                (!p.product_info.weight_grams && !p.product_info.volume_ml && !p.product_info.unit_count)
            );
            
            if (productsWithoutPackaging.length > 0) {
                recommendations.push({
                    type: 'packaging',
                    priority: 'medium',
                    message: `${productsWithoutPackaging.length} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –∏–º–µ—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ø–∞–∫–æ–≤–∫–µ. –î–æ–±–∞–≤—å—Ç–µ –≤–µ—Å, –æ–±—ä—ë–º –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.`
                });
            }

            const productsWithoutBarcode = products.filter(p => 
                !p.product_info || 
                (!p.product_info.barcode_ean13 && !p.product_info.barcode_ean8)
            );
            
            if (productsWithoutBarcode.length > products.length * 0.5) {
                recommendations.push({
                    type: 'barcodes',
                    priority: 'low',
                    message: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤. –≠—Ç–æ —É–ø—Ä–æ—Å—Ç–∏—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é.'
                });
            }
        }

        // –¶–µ–Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (products.length > 0) {
            const productsWithDiscounts = products.filter(p => p.discount_price && p.discount_price > 0);
            if (productsWithDiscounts.length === 0) {
                recommendations.push({
                    type: 'pricing',
                    priority: 'low',
                    message: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.'
                });
            }
        }

        return {
            total_recommendations: recommendations.length,
            recommendations: recommendations.sort((a, b) => {
                const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };
                return priorityOrder[b.priority] - priorityOrder[a.priority];
            }),
            menu_completeness: {
                categories: partner.menu_categories.length,
                products: products.length,
                active_products: products.filter(p => p.is_active && p.is_available).length,
                completion_score: Math.min(100, 
                    (partner.menu_categories.length * 10) + 
                    (products.length * 5) + 
                    (products.filter(p => p.is_active && p.is_available).length * 2)
                )
            }
        };

    } catch (error) {
        console.error('üö® GET MENU RECOMMENDATIONS ERROR:', error);
        throw error;
    }
};

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @param {string} partnerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * @param {Array} productIds - –ú–∞—Å—Å–∏–≤ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @param {object} statusUpdate - –°—Ç–∞—Ç—É—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
const bulkUpdateProductStatus = async (partnerId, productIds, statusUpdate) => {
    try {
        if (!partnerId || !productIds || !Array.isArray(productIds)) {
            throw new Error('Partner ID –∏ –º–∞—Å—Å–∏–≤ Product IDs –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }

        console.log('üîç BULK UPDATE PRODUCT STATUS:', { 
            partnerId, 
            products_count: productIds.length,
            status_update: statusUpdate 
        });

        const partner = await PartnerProfile.findOne({ 
            user_id: new mongoose.Types.ObjectId(partnerId) 
        });
        
        if (!partner) {
            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ID –≤ ObjectId
        const objectIds = productIds.map(id => new mongoose.Types.ObjectId(id));

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —ç—Ç–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
        const updateResult = await Product.updateMany(
            { 
                _id: { $in: objectIds },
                partner_id: partner._id 
            },
            { 
                ...statusUpdate,
                last_updated_by: new mongoose.Types.ObjectId(partnerId)
            }
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await partner.updateProductStats();

        console.log('‚úÖ BULK UPDATE COMPLETED:', {
            matched: updateResult.matchedCount,
            modified: updateResult.modifiedCount
        });

        return {
            matched_products: updateResult.matchedCount,
            updated_products: updateResult.modifiedCount,
            status_update: statusUpdate
        };

    } catch (error) {
        console.error('üö® BULK UPDATE PRODUCT STATUS ERROR:', error);
        throw error;
    }
};

// ============ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ============

export {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    getPartnerMenuCategories,
    addMenuCategoryService,
    updateMenuCategory,
    deleteMenuCategory,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    getPartnerProducts,
    addPartnerProduct,
    updatePartnerProduct,
    deletePartnerProduct,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    getPartnerMenuStats,
    getMenuRecommendations,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    validateProductCompatibility,
    bulkUpdateProductStatus,
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    processRestaurantOptions,
    processStorePackaging,
    processDishInfo
};