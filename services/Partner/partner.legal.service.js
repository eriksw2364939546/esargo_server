// services/Partner/partner.legal.service.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ï–†–í–ò–° –î–õ–Ø –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í
import { InitialPartnerRequest, PartnerLegalInfo } from '../../models/index.js';
import { cryptoString } from '../../utils/crypto.js';
import mongoose from 'mongoose';

/**
 * ================== –ü–û–î–ê–ß–ê –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í ==================
 */
export const submitPartnerLegalInfo = async (partnerId, requestId, legalData) => {
    const session = await mongoose.startSession();

    try {
        let result = null;

        await session.withTransaction(async () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            const request = await InitialPartnerRequest.findOne({
                _id: requestId,
                user_id: partnerId,
                status: 'approved'
            });

            if (!request) {
                throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–Ω—ã –ª–∏ —É–∂–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            const existingLegal = await PartnerLegalInfo.findOne({
                user_id: partnerId,
                partner_request_id: requestId
            });

            if (existingLegal) {
                throw new Error('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –ø–æ–¥–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏');
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
            if (!legalData.legal_data?.legal_name || 
                !legalData.legal_data?.siret_number ||
                !legalData.bank_details?.iban ||
                !legalData.legal_contact?.email) {
                throw new Error('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: legal_name, siret_number, iban, email');
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –®–∏—Ñ—Ä—É–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π
            const encryptedLegalData = {
                legal_name: cryptoString(legalData.legal_data.legal_name),
                siret_number: cryptoString(legalData.legal_data.siret_number),
                tva_number: legalData.legal_data.tva_number ? 
                    cryptoString(legalData.legal_data.tva_number) : null,
                legal_address: cryptoString(legalData.legal_data.legal_address),
                legal_representative: cryptoString(legalData.legal_data.legal_representative),
                legal_form: legalData.legal_data.legal_form || 'Auto-entrepreneur'
            };

            const encryptedBankDetails = {
                iban: cryptoString(legalData.bank_details.iban),
                bic: legalData.bank_details.bic ? 
                    cryptoString(legalData.bank_details.bic) : null
            };

            const encryptedContactInfo = {
                email: cryptoString(legalData.legal_contact.email),
                phone: legalData.legal_contact.phone ? 
                    cryptoString(legalData.legal_contact.phone) : null
            };

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            let encryptedDocuments = {};
            if (legalData.documents) {
                if (legalData.documents.kbis_document) {
                    encryptedDocuments.kbis_document = cryptoString(legalData.documents.kbis_document);
                }
                if (legalData.documents.id_document) {
                    encryptedDocuments.id_document = cryptoString(legalData.documents.id_document);
                }
                if (legalData.documents.additional_documents) {
                    encryptedDocuments.additional_documents = legalData.documents.additional_documents.map(doc => ({
                        name: doc.name,
                        url: cryptoString(doc.url),
                        uploaded_at: doc.uploaded_at || new Date()
                    }));
                }
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ PartnerLegalInfo
            const newLegalInfo = new PartnerLegalInfo({
                user_id: partnerId,
                partner_request_id: requestId,
                legal_data: encryptedLegalData,
                bank_details: encryptedBankDetails,
                legal_contact: encryptedContactInfo,
                documents: encryptedDocuments,
                verification_status: 'pending',
                submitted_at: new Date()
            });

            await newLegalInfo.save({ session });

            // –û–±–Ω–æ–≤–ª—è–µ–º workflow_stage –∑–∞—è–≤–∫–∏
            await InitialPartnerRequest.findByIdAndUpdate(requestId, {
                workflow_stage: 3,
                updated_at: new Date()
            }, { session });

            result = {
                legal_info_id: newLegalInfo._id,
                verification_status: newLegalInfo.verification_status,
                workflow_stage: 3
            };
        });

        return result;

    } catch (error) {
        console.error('üö® SUBMIT PARTNER LEGAL INFO ERROR:', error);
        throw error;
    } finally {
        await session.endSession();
    }
};

/**
 * ================== –ü–û–õ–£–ß–ï–ù–ò–ï –Æ–†–ò–î–ò–ß–ï–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ==================
 */
export const getPartnerLegalInfo = async (partnerId) => {
    try {
        const legalInfo = await PartnerLegalInfo.findOne({ 
            user_id: partnerId 
        });
        
        return legalInfo;
        
    } catch (error) {
        console.error('üö® GET PARTNER LEGAL INFO ERROR:', error);
        throw error;
    }
};

/**
 * ================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í ==================
 */
export const updateLegalInfoStatus = async (legalInfoId, statusData) => {
    try {
        const legalInfo = await PartnerLegalInfo.findByIdAndUpdate(
            legalInfoId,
            statusData,
            { new: true }
        );
        
        if (!legalInfo) {
            throw new Error('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        return legalInfo;
        
    } catch (error) {
        console.error('üö® UPDATE LEGAL INFO STATUS ERROR:', error);
        throw error;
    }
};