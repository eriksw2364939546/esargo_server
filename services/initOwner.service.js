// services/initOwner.service.js - –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–í–û–ì–û OWNER –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï üéØ
import { AdminUser } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { hashString, hashMeta } from '../utils/hash.js';

/**
 * üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø OWNER –ê–ö–ö–ê–£–ù–¢–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –°–ï–†–í–ï–†–ê
 * –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É –ø—Ä–∏–º–µ—Ä—É –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
const initOwnerAccount = async () => {
  try {
    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ owner
    const existingOwner = await AdminUser.findOne({ role: "owner" });

    if (existingOwner) {
      console.log("üéØ Owner already exists:", {
        id: existingOwner._id,
        email: existingOwner.email,
        full_name: existingOwner.full_name,
        created_at: existingOwner.createdAt
      });
      return;
    }

    // üìã –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ owner'–∞
    const defaultOwnerData = {
      password: "admin",
      email: "admin@admin.com",
      full_name: "System Owner",
      department: "administration"
    };

    console.log("üöÄ Creating first Owner account...", {
      email: defaultOwnerData.email,
      password: defaultOwnerData.password,
      full_name: defaultOwnerData.full_name
    });

    // üîê –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await hashString(defaultOwnerData.password);

    // üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–æ–ª—å—é owner
    const newOwner = new AdminUser({
      full_name: defaultOwnerData.full_name,
      email: defaultOwnerData.email,
      password_hash: hashedPassword,
      role: "owner", // üéØ –û–°–ù–û–í–ù–û–ï: —Ç–æ–ª—å–∫–æ —Ä–æ–ª—å, –±–µ–∑ permissions
      contact_info: {
        department: defaultOwnerData.department,
        position: "System Administrator",
        phone: null
      },
      is_active: true,
      created_by: null // –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ —Å—Å—ã–ª–∫–∏
      // üóëÔ∏è –£–î–ê–õ–ï–ù–û: permissions - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è role-based –ø–æ–¥—Ö–æ–¥
    });

    await newOwner.save();

    // üîó –°–æ–∑–¥–∞–µ–º Meta –∑–∞–ø–∏—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const newMetaInfo = await Meta.createForAdmin(newOwner._id, hashMeta(defaultOwnerData.email));

    console.log("üéâ Owner was created successfully!", {
      id: newOwner._id,
      email: defaultOwnerData.email,
      password: defaultOwnerData.password,
      full_name: newOwner.full_name,
      role: newOwner.role,
      meta_id: newMetaInfo._id
    });

    console.log("üîë Owner Login Credentials:");
    console.log(`   üìß Email: ${defaultOwnerData.email}`);
    console.log(`   üîí Password: ${defaultOwnerData.password}`);
    console.log(`   üåê Login URL: POST /api/admin/login`);
    console.log("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!");

  } catch (error) {
    console.error("üö® Error initializing Owner account:", error);
    
    // üîç –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (error.code === 11000) {
      console.error("‚ùå Duplicate key error - –≤–æ–∑–º–æ–∂–Ω–æ email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è");
    } else if (error.name === 'ValidationError') {
      console.error("‚ùå Validation error:", error.message);
    } else {
      console.error("‚ùå Unknown error:", error.message);
    }
  }
};

export default initOwnerAccount;