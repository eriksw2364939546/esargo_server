// services/Order/order.service.js - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ò–ô —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤
import { Order, Cart, User, PartnerProfile, CourierProfile, Product } from '../../models/index.js';
import mongoose from 'mongoose';

// ================ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üì¶ –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –ö–û–†–ó–ò–ù–´
 */
export const createOrderFromCart = async (customerId, sessionId, orderData) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();
    
    const {
      delivery_address,
      customer_contact,
      payment_method,
      special_requests
    } = orderData;

    console.log('üì¶ CREATE ORDER FROM CART:', {
      customerId,
      sessionId,
      payment_method,
      has_address: !!delivery_address
    });

    // 1. –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findOne({
      customer_id: customerId,
      session_id: sessionId,
      status: 'active'
    }).session(session);

    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (cart.items.length === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    const minOrderAmount = cart.restaurant_info.min_order_amount || 0;
    if (cart.pricing.subtotal < minOrderAmount) {
      throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${minOrderAmount}‚ÇΩ`);
    }

    // 3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
    const restaurant = await PartnerProfile.findById(cart.restaurant_id).session(session);
    if (!restaurant || !restaurant.is_active || !restaurant.is_approved) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const productIds = cart.items.map(item => item.product_id);
    const products = await Product.find({
      _id: { $in: productIds },
      is_active: true,
      is_available: true
    }).session(session);

    if (products.length !== cart.items.length) {
      throw new Error('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // 5. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = await Order.generateOrderNumber();

    // 6. –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    const estimatedDeliveryTime = calculateEstimatedDeliveryTime(
      delivery_address,
      restaurant.location,
      restaurant.delivery_info
    );

    // 7. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    const orderItems = cart.items.map(cartItem => {
      const product = products.find(p => p._id.toString() === cartItem.product_id.toString());
      return {
        product_id: cartItem.product_id,
        title: product.title,
        price: cartItem.product_snapshot.price,
        quantity: cartItem.quantity,
        selected_options: cartItem.selected_options || [],
        item_total: cartItem.quantity * cartItem.product_snapshot.price,
        special_requests: cartItem.special_requests || ''
      };
    });

    const newOrder = new Order({
      order_number: orderNumber,
      customer_id: customerId,
      partner_id: cart.restaurant_id,
      
      // –¢–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      items: orderItems,
      
      // –°—Ç–æ–∏–º–æ—Å—Ç—å
      subtotal: cart.pricing.subtotal,
      delivery_fee: cart.pricing.delivery_fee,
      service_fee: cart.pricing.service_fee,
      discount_amount: cart.pricing.discount_amount || 0,
      tax_amount: cart.pricing.tax_amount || 0,
      total_price: cart.pricing.total_price,
      
      // –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
      delivery_address,
      customer_contact,
      
      // –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è
      status: 'pending',
      estimated_delivery_time: estimatedDeliveryTime,
      
      // –ü–ª–∞—Ç–µ–∂
      payment_method,
      payment_status: payment_method === 'cash' ? 'pending' : 'processing',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      special_requests,
      source: 'web',
      user_agent: 'ESARGO Web App',
      
      // –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
      status_history: [{
        status: 'pending',
        timestamp: new Date(),
        updated_by: customerId,
        user_role: 'customer',
        notes: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç–æ–º'
      }]
    });

    await newOrder.save({ session });

    // 8. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂
    let paymentResult;
    if (payment_method === 'card') {
      paymentResult = await processPayment(newOrder, { session });
      newOrder.payment_status = paymentResult.success ? 'completed' : 'failed';
      newOrder.payment_details = paymentResult.details;
      await newOrder.save({ session });
    } else {
      paymentResult = {
        success: true,
        method: 'cash',
        message: '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'
      };
    }

    // 9. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ –∑–∞–∫–∞–∑
    await cart.convertToOrder();
    await cart.save({ session });

    // 10. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    await PartnerProfile.findByIdAndUpdate(
      cart.restaurant_id,
      { 
        $inc: { 
          'ratings.total_orders': 1,
          'business_stats.total_orders': 1
        }
      },
      { session }
    );

    await session.commitTransaction();

    console.log('‚úÖ ORDER CREATED SUCCESS:', {
      order_id: newOrder._id,
      order_number: orderNumber,
      total_price: newOrder.total_price,
      payment_status: newOrder.payment_status
    });

    return {
      order: newOrder,
      payment: paymentResult,
      estimatedDelivery: estimatedDeliveryTime
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® CREATE ORDER ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –ö–õ–ò–ï–ù–¢–ê
 */
export const getCustomerOrders = async (customerId, filters = {}) => {
  try {
    const {
      status = null,
      limit = 20,
      offset = 0,
      date_from = null,
      date_to = null
    } = filters;

    console.log('üìã GET CUSTOMER ORDERS:', {
      customerId,
      status,
      limit,
      offset
    });

    // –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
    let mongoFilter = { customer_id: customerId };

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status && status !== 'all') {
      mongoFilter.status = status;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    if (date_from || date_to) {
      mongoFilter.createdAt = {};
      if (date_from) mongoFilter.createdAt.$gte = new Date(date_from);
      if (date_to) mongoFilter.createdAt.$lte = new Date(date_to);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    const orders = await Order.find(mongoFilter)
      .populate('partner_id', 'business_name avatar_image category ratings')
      .populate('courier_id', 'user_id first_name last_name phone')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip(parseInt(offset))
      .lean();

    const total = await Order.countDocuments(mongoFilter);

    const processedOrders = orders.map(order => ({
      id: order._id,
      order_number: order.order_number,
      status: order.status,
      total_price: order.total_price,
      items_count: order.items.length,
      created_at: order.createdAt,
      estimated_delivery_time: order.estimated_delivery_time,
      actual_delivery_time: order.actual_delivery_time,
      
      restaurant: {
        id: order.partner_id._id,
        name: order.partner_id.business_name,
        avatar_image: order.partner_id.avatar_image,
        category: order.partner_id.category,
        rating: order.partner_id.ratings?.average_rating || 0
      },
      
      courier: order.courier_id ? {
        name: `${order.courier_id.first_name} ${order.courier_id.last_name}`,
        phone: order.courier_id.phone
      } : null,
      
      payment: {
        method: order.payment_method,
        status: order.payment_status
      },
      
      can_cancel: order.canBeCancelled(),
      can_rate: order.status === 'delivered' && !order.ratings.partner_rating,
      is_overdue: order.isOverdue(),
      time_to_delivery: order.getTimeToDelivery()
    }));

    console.log('‚úÖ GET CUSTOMER ORDERS SUCCESS:', {
      orders_found: orders.length,
      total_available: total
    });

    return {
      orders: processedOrders,
      pagination: {
        total,
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: (parseInt(offset) + orders.length) < total
      }
    };

  } catch (error) {
    console.error('üö® GET CUSTOMER ORDERS ERROR:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞');
  }
};

/**
 * üîç –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê
 */
export const getOrderDetails = async (orderId, userId, userRole = 'customer') => {
  try {
    console.log('üîç GET ORDER DETAILS:', { orderId, userId, userRole });

    if (!mongoose.isValidObjectId(orderId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞');
    }

    const order = await Order.findById(orderId)
      .populate('customer_id', 'username email profile_image')
      .populate('partner_id', 'business_name avatar_image category contact_info location')
      .populate('courier_id', 'user_id first_name last_name phone vehicle_info')
      .lean();

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
    const hasAccess = checkOrderAccess(order, userId, userRole);
    if (!hasAccess) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    const enrichedOrder = {
      id: order._id,
      order_number: order.order_number,
      status: order.status,
      created_at: order.createdAt,
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      estimated_delivery_time: order.estimated_delivery_time,
      actual_delivery_time: order.actual_delivery_time,
      accepted_at: order.accepted_at,
      ready_at: order.ready_at,
      picked_up_at: order.picked_up_at,
      delivered_at: order.delivered_at,
      cancelled_at: order.cancelled_at,
      
      // –¢–æ–≤–∞—Ä—ã
      items: order.items.map(item => ({
        id: item._id,
        title: item.title,
        price: item.price,
        quantity: item.quantity,
        item_total: item.item_total,
        selected_options: item.selected_options || [],
        special_requests: item.special_requests || ''
      })),
      
      // –°—Ç–æ–∏–º–æ—Å—Ç—å
      pricing: {
        subtotal: order.subtotal,
        delivery_fee: order.delivery_fee,
        service_fee: order.service_fee,
        discount_amount: order.discount_amount,
        tax_amount: order.tax_amount,
        total_price: order.total_price
      },
      
      // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
      delivery_address: order.delivery_address,
      
      // –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
      customer_contact: order.customer_contact,
      
      // –ö–ª–∏–µ–Ω—Ç
      customer: {
        id: order.customer_id._id,
        name: order.customer_contact.name,
        username: order.customer_id.username,
        profile_image: order.customer_id.profile_image
      },
      
      // –†–µ—Å—Ç–æ—Ä–∞–Ω
      restaurant: {
        id: order.partner_id._id,
        name: order.partner_id.business_name,
        avatar_image: order.partner_id.avatar_image,
        category: order.partner_id.category,
        phone: order.partner_id.contact_info?.phone,
        address: order.partner_id.location?.address
      },
      
      // –ö—É—Ä—å–µ—Ä
      courier: order.courier_id ? {
        id: order.courier_id._id,
        name: `${order.courier_id.first_name} ${order.courier_id.last_name}`,
        phone: order.courier_id.phone,
        vehicle: order.courier_id.vehicle_info
      } : null,
      
      // –ü–ª–∞—Ç–µ–∂
      payment: {
        method: order.payment_method,
        status: order.payment_status,
        details: order.payment_details
      },
      
      // –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
      status_history: order.status_history.map(history => ({
        status: history.status,
        timestamp: history.timestamp,
        notes: history.notes,
        updated_by_role: history.user_role
      })),
      
      // –†–µ–π—Ç–∏–Ω–≥–∏
      ratings: order.ratings,
      
      // –û—Ç–º–µ–Ω–∞
      cancellation_info: order.cancellation_info,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      special_requests: order.special_requests,
      
      // –§–ª–∞–≥–∏ —Å—Ç–∞—Ç—É—Å–∞
      can_cancel: order.canBeCancelled(),
      can_rate: order.status === 'delivered' && userRole === 'customer' && !order.ratings.partner_rating,
      is_overdue: order.isOverdue(),
      time_to_delivery: order.getTimeToDelivery()
    };

    console.log('‚úÖ GET ORDER DETAILS SUCCESS:', {
      order_number: order.order_number,
      status: order.status,
      user_role: userRole
    });

    return enrichedOrder;

  } catch (error) {
    console.error('üö® GET ORDER DETAILS ERROR:', error);
    
    if (error.message.includes('–Ω–∞–π–¥–µ–Ω') || error.message.includes('–¥–æ—Å—Ç—É–ø–∞') || error.message.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π')) {
      throw error;
    }
    
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞');
  }
};

/**
 * ‚ùå –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–û–ú
 */
export const cancelCustomerOrder = async (orderId, customerId, cancellationData) => {
  try {
    const { reason, details = '' } = cancellationData;

    console.log('‚ùå CANCEL CUSTOMER ORDER:', {
      orderId,
      customerId,
      reason
    });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (!order.canBeCancelled()) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ');
    }

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await order.cancelOrder(reason, customerId, 'customer', details);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    if (order.payment_status === 'completed' && order.payment_method === 'card') {
      await processRefund(order);
    }

    console.log('‚úÖ ORDER CANCELLED SUCCESS:', {
      order_number: order.order_number,
      reason
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      cancelled_at: order.cancelled_at,
      refund_info: order.payment_method === 'card' ? '–í–æ–∑–≤—Ä–∞—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π' : null
    };

  } catch (error) {
    console.error('üö® CANCEL ORDER ERROR:', error);
    throw error;
  }
};

/**
 * ‚≠ê –û–¶–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 */
export const rateCompletedOrder = async (orderId, customerId, ratingData) => {
  try {
    const {
      partner_rating,
      courier_rating,
      comment = ''
    } = ratingData;

    console.log('‚≠ê RATE ORDER:', {
      orderId,
      customerId,
      partner_rating,
      courier_rating
    });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'delivered') {
      throw new Error('–ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
    }

    if (order.ratings.partner_rating) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ—Ü–µ–Ω–µ–Ω');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    if (partner_rating && (partner_rating < 1 || partner_rating > 5)) {
      throw new Error('–†–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
    }

    if (courier_rating && (courier_rating < 1 || courier_rating > 5)) {
      throw new Error('–†–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ –∑–∞–∫–∞–∑–µ
    order.ratings = {
      partner_rating: partner_rating || null,
      courier_rating: courier_rating || null,
      comment: comment.trim(),
      rated_at: new Date()
    };

    await order.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    if (partner_rating) {
      await updatePartnerRating(order.partner_id, partner_rating);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞
    if (courier_rating && order.courier_id) {
      await updateCourierRating(order.courier_id, courier_rating);
    }

    console.log('‚úÖ ORDER RATED SUCCESS:', {
      order_number: order.order_number,
      partner_rating,
      courier_rating
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      ratings: order.ratings,
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.'
    };

  } catch (error) {
    console.error('üö® RATE ORDER ERROR:', error);
    throw error;
  }
};

// ================ –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üè™ –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –†–ï–°–¢–û–†–ê–ù–ê
 */
export const getRestaurantOrders = async (partnerId, filters = {}) => {
  try {
    const {
      status = null,
      limit = 20,
      offset = 0,
      date_from = null,
      date_to = null
    } = filters;

    console.log('üè™ GET RESTAURANT ORDERS:', {
      partnerId,
      status,
      limit,
      offset
    });

    // –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
    let mongoFilter = { partner_id: partnerId };

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status && status !== 'all') {
      mongoFilter.status = status;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    if (date_from || date_to) {
      mongoFilter.createdAt = {};
      if (date_from) mongoFilter.createdAt.$gte = new Date(date_from);
      if (date_to) mongoFilter.createdAt.$lte = new Date(date_to);
    }

    const orders = await Order.find(mongoFilter)
      .populate('customer_id', 'username profile_image')
      .populate('courier_id', 'first_name last_name phone')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip(parseInt(offset))
      .lean();

    const total = await Order.countDocuments(mongoFilter);

    const processedOrders = orders.map(order => ({
      id: order._id,
      order_number: order.order_number,
      status: order.status,
      total_price: order.total_price,
      items_count: order.items.length,
      created_at: order.createdAt,
      estimated_delivery_time: order.estimated_delivery_time,
      
      customer: {
        name: order.customer_contact.name,
        phone: order.customer_contact.phone,
        username: order.customer_id.username,
        profile_image: order.customer_id.profile_image
      },
      
      delivery_address: {
        address: order.delivery_address.address,
        apartment: order.delivery_address.apartment,
        delivery_notes: order.delivery_address.delivery_notes
      },
      
      items: order.items.map(item => ({
        title: item.title,
        quantity: item.quantity,
        special_requests: item.special_requests
      })),
      
      courier: order.courier_id ? {
        name: `${order.courier_id.first_name} ${order.courier_id.last_name}`,
        phone: order.courier_id.phone
      } : null,
      
      payment_method: order.payment_method,
      special_requests: order.special_requests,
      
      // –î–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
      can_accept: order.status === 'pending',
      can_reject: order.status === 'pending',
      can_mark_ready: order.status === 'accepted' || order.status === 'preparing',
      
      is_overdue: order.isOverdue()
    }));

    console.log('‚úÖ GET RESTAURANT ORDERS SUCCESS:', {
      orders_found: orders.length,
      total_available: total
    });

    return {
      orders: processedOrders,
      pagination: {
        total,
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: (parseInt(offset) + orders.length) < total
      }
    };

  } catch (error) {
    console.error('üö® GET RESTAURANT ORDERS ERROR:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞');
  }
};

/**
 * ‚úÖ –ü–†–ò–ù–Ø–¢–¨ –ó–ê–ö–ê–ó –†–ï–°–¢–û–†–ê–ù–û–ú
 */
export const acceptRestaurantOrder = async (orderId, partnerId, acceptanceData) => {
  try {
    const { estimated_preparation_time = 25 } = acceptanceData;

    console.log('‚úÖ ACCEPT RESTAURANT ORDER:', {
      orderId,
      partnerId,
      estimated_preparation_time
    });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'pending') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è
    await order.addStatusHistory('accepted', partnerId, 'partner', 
      `–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${estimated_preparation_time} –º–∏–Ω`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
    const newEstimatedTime = new Date(Date.now() + (estimated_preparation_time + 20) * 60 * 1000);
    order.estimated_delivery_time = newEstimatedTime;
    await order.save();

    console.log('‚úÖ ORDER ACCEPTED SUCCESS:', {
      order_number: order.order_number,
      estimated_preparation_time,
      new_estimated_delivery: newEstimatedTime
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      estimated_delivery_time: newEstimatedTime,
      message: `–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${estimated_preparation_time} –º–∏–Ω—É—Ç`
    };

  } catch (error) {
    console.error('üö® ACCEPT ORDER ERROR:', error);
    throw error;
  }
};

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨ –ó–ê–ö–ê–ó –†–ï–°–¢–û–†–ê–ù–û–ú
 */
export const rejectRestaurantOrder = async (orderId, partnerId, rejectionData) => {
  try {
    const { reason, details = '' } = rejectionData;

    console.log('‚ùå REJECT RESTAURANT ORDER:', {
      orderId,
      partnerId,
      reason
    });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'pending') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await order.cancelOrder(reason, partnerId, 'partner', details);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç—É –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    if (order.payment_status === 'completed' && order.payment_method === 'card') {
      await processRefund(order);
    }

    console.log('‚úÖ ORDER REJECTED SUCCESS:', {
      order_number: order.order_number,
      reason
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      cancelled_at: order.cancelled_at,
      message: '–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.'
    };

  } catch (error) {
    console.error('üö® REJECT ORDER ERROR:', error);
    throw error;
  }
};

/**
 * üç≥ –ó–ê–ö–ê–ó –ì–û–¢–û–í –ö –í–´–î–ê–ß–ï
 */
export const markRestaurantOrderReady = async (orderId, partnerId) => {
  try {
    console.log('üç≥ MARK ORDER READY:', { orderId, partnerId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (!['accepted', 'preparing'].includes(order.status)) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤—ã–º - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≥–æ—Ç–æ–≤
    await order.addStatusHistory('ready', partnerId, 'partner', '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ –∫—É—Ä—å–µ—Ä—É');

    console.log('‚úÖ ORDER READY SUCCESS:', {
      order_number: order.order_number,
      ready_at: order.ready_at
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      ready_at: order.ready_at,
      message: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.'
    };

  } catch (error) {
    console.error('üö® MARK ORDER READY ERROR:', error);
    throw error;
  }
};

// ================ –ö–£–†–¨–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üö¥ –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü–ù–´–ï –ó–ê–ö–ê–ó–´ –î–õ–Ø –ö–£–†–¨–ï–†–ê
 */
export const getAvailableOrdersForCourier = async (courierId, location = {}) => {
  try {
    const { lat = null, lng = null, radius = 10 } = location;

    console.log('üö¥ GET AVAILABLE ORDERS FOR COURIER:', {
      courierId,
      has_location: !!(lat && lng),
      radius
    });

    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    let availableOrders;

    if (lat && lng) {
      // –ü–æ–∏—Å–∫ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
      availableOrders = await Order.findAvailableOrders(lat, lng, radius);
    } else {
      // –ü–æ–∏—Å–∫ –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      availableOrders = await Order.find({
        status: 'ready',
        courier_id: null
      }).sort({ createdAt: 1 }).limit(20);
    }

    // –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    const enrichedOrders = await Promise.all(
      availableOrders.map(async (order) => {
        const restaurant = await PartnerProfile.findById(order.partner_id)
          .select('business_name avatar_image location contact_info')
          .lean();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞
        let distanceToRestaurant = null;
        let distanceToCustomer = null;

        if (lat && lng && restaurant?.location?.coordinates) {
          distanceToRestaurant = calculateDistance(
            lat, lng,
            restaurant.location.coordinates[1],
            restaurant.location.coordinates[0]
          );
        }

        if (lat && lng && order.delivery_address?.lat && order.delivery_address?.lng) {
          distanceToCustomer = calculateDistance(
            lat, lng,
            order.delivery_address.lat,
            order.delivery_address.lng
          );
        }

        return {
          id: order._id,
          order_number: order.order_number,
          total_price: order.total_price,
          delivery_fee: order.delivery_fee,
          items_count: order.items.length,
          created_at: order.createdAt,
          ready_at: order.ready_at,
          estimated_delivery_time: order.estimated_delivery_time,
          
          restaurant: {
            id: restaurant._id,
            name: restaurant.business_name,
            avatar_image: restaurant.avatar_image,
            address: restaurant.location?.address,
            phone: restaurant.contact_info?.phone,
            distance: distanceToRestaurant ? `${distanceToRestaurant.toFixed(1)} –∫–º` : null
          },
          
          delivery_address: {
            address: order.delivery_address.address,
            apartment: order.delivery_address.apartment,
            distance: distanceToCustomer ? `${distanceToCustomer.toFixed(1)} –∫–º` : null
          },
          
          customer_contact: {
            name: order.customer_contact.name,
            phone: order.customer_contact.phone
          },
          
          payment_method: order.payment_method,
          special_requests: order.special_requests,
          
          // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –∫—É—Ä—å–µ—Ä–∞
          estimated_earnings: calculateCourierEarnings(order.delivery_fee, distanceToCustomer)
        };
      })
    );

    console.log('‚úÖ GET AVAILABLE ORDERS SUCCESS:', {
      orders_found: enrichedOrders.length,
      with_geolocation: !!(lat && lng)
    });

    return {
      available_orders: enrichedOrders,
      total: enrichedOrders.length,
      location_filter: lat && lng ? { lat, lng, radius } : null
    };

  } catch (error) {
    console.error('üö® GET AVAILABLE ORDERS ERROR:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
  }
};

/**
 * üì¶ –í–ó–Ø–¢–¨ –ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£
 */
export const acceptOrderForDelivery = async (orderId, courierId) => {
  try {
    console.log('üì¶ ACCEPT ORDER FOR DELIVERY:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.status !== 'ready') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∑—è—Ç–∏—è - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    if (order.courier_id) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—å–µ—Ä –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∑–∞–∫–∞–∑–æ–º
    const activeOrder = await Order.findOne({
      courier_id: courierId,
      status: { $in: ['picked_up', 'on_the_way'] }
    });

    if (activeOrder) {
      throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏');
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞
    order.courier_id = courierId;
    await order.addStatusHistory('picked_up', courierId, 'courier', '–ö—É—Ä—å–µ—Ä –≤–∑—è–ª –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É');

    console.log('‚úÖ ORDER ACCEPTED FOR DELIVERY SUCCESS:', {
      order_number: order.order_number,
      courier_id: courierId
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      message: '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω.'
    };

  } catch (error) {
    console.error('üö® ACCEPT ORDER FOR DELIVERY ERROR:', error);
    throw error;
  }
};

/**
 * üè™ –ó–ê–ë–†–ê–¢–¨ –ó–ê–ö–ê–ó –£ –†–ï–°–¢–û–†–ê–ù–ê
 */
export const markOrderPickedUpByCourier = async (orderId, courierId) => {
  try {
    console.log('üè™ MARK ORDER PICKED UP:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.courier_id.toString() !== courierId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'picked_up') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await order.addStatusHistory('on_the_way', courierId, 'courier', '–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É');

    console.log('‚úÖ ORDER PICKED UP SUCCESS:', {
      order_number: order.order_number,
      picked_up_at: order.picked_up_at
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      picked_up_at: order.picked_up_at,
      message: '–ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω! –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É.'
    };

  } catch (error) {
    console.error('üö® MARK ORDER PICKED UP ERROR:', error);
    throw error;
  }
};

/**
 * üè† –î–û–°–¢–ê–í–ò–¢–¨ –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–£
 */
export const markOrderDeliveredByCourier = async (orderId, courierId, deliveryData) => {
  try {
    const { delivery_notes = '' } = deliveryData;

    console.log('üè† MARK ORDER DELIVERED:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.courier_id.toString() !== courierId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'on_the_way') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –¥–æ—Å—Ç–∞–≤–∏—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
    await order.addStatusHistory('delivered', courierId, 'courier', 
      delivery_notes ? `–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${delivery_notes}` : '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É—Ä—å–µ—Ä–∞
    await CourierProfile.findOneAndUpdate(
      { user_id: courierId },
      { 
        $inc: { 
          'delivery_stats.completed_deliveries': 1,
          'delivery_stats.total_earnings': calculateCourierEarnings(order.delivery_fee)
        }
      }
    );

    console.log('‚úÖ ORDER DELIVERED SUCCESS:', {
      order_number: order.order_number,
      delivered_at: order.delivered_at,
      actual_delivery_time: order.actual_delivery_time
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      delivered_at: order.delivered_at,
      actual_delivery_time: order.actual_delivery_time,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É.'
    };

  } catch (error) {
    console.error('üö® MARK ORDER DELIVERED ERROR:', error);
    throw error;
  }
};

/**
 * üö¥ –ü–û–õ–£–ß–ò–¢–¨ –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´ –ö–£–†–¨–ï–†–ê
 */
export const getCourierActiveOrders = async (courierId, filters = {}) => {
  try {
    const { status = 'active', limit = 20, offset = 0 } = filters;

    console.log('üö¥ GET COURIER ACTIVE ORDERS:', { courierId, status });

    let mongoFilter = { courier_id: courierId };

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status === 'active') {
      mongoFilter.status = { $in: ['picked_up', 'on_the_way'] };
    } else if (status === 'completed') {
      mongoFilter.status = 'delivered';
    } else if (status !== 'all') {
      mongoFilter.status = status;
    }

    const orders = await Order.find(mongoFilter)
      .populate('partner_id', 'business_name avatar_image location contact_info')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip(parseInt(offset))
      .lean();

    const total = await Order.countDocuments(mongoFilter);

    const processedOrders = orders.map(order => ({
      id: order._id,
      order_number: order.order_number,
      status: order.status,
      total_price: order.total_price,
      delivery_fee: order.delivery_fee,
      created_at: order.createdAt,
      picked_up_at: order.picked_up_at,
      delivered_at: order.delivered_at,
      
      restaurant: {
        id: order.partner_id._id,
        name: order.partner_id.business_name,
        avatar_image: order.partner_id.avatar_image,
        address: order.partner_id.location?.address,
        phone: order.partner_id.contact_info?.phone
      },
      
      delivery_address: {
        address: order.delivery_address.address,
        apartment: order.delivery_address.apartment,
        delivery_notes: order.delivery_address.delivery_notes
      },
      
      customer_contact: {
        name: order.customer_contact.name,
        phone: order.customer_contact.phone
      },
      
      payment_method: order.payment_method,
      estimated_earnings: calculateCourierEarnings(order.delivery_fee),
      
      // –î–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—å–µ—Ä—É
      can_pickup: order.status === 'picked_up',
      can_deliver: order.status === 'on_the_way'
    }));

    console.log('‚úÖ GET COURIER ORDERS SUCCESS:', {
      orders_found: orders.length,
      total_available: total
    });

    return {
      orders: processedOrders,
      pagination: {
        total,
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: (parseInt(offset) + orders.length) < total
      }
    };

  } catch (error) {
    console.error('üö® GET COURIER ORDERS ERROR:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞');
  }
};

// ================ –û–ë–©–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üìç –û–¢–°–õ–ï–î–ò–¢–¨ –ó–ê–ö–ê–ó
 */
export const trackOrderStatus = async (orderId) => {
  try {
    console.log('üìç TRACK ORDER:', { orderId });

    const order = await Order.findById(orderId)
      .populate('partner_id', 'business_name contact_info location')
      .populate('courier_id', 'first_name last_name phone')
      .lean();

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const trackingInfo = {
      order_id: order._id,
      order_number: order.order_number,
      current_status: order.status,
      created_at: order.createdAt,
      estimated_delivery_time: order.estimated_delivery_time,
      actual_delivery_time: order.actual_delivery_time,
      
      restaurant: {
        name: order.partner_id.business_name,
        phone: order.partner_id.contact_info?.phone,
        address: order.partner_id.location?.address
      },
      
      courier: order.courier_id ? {
        name: `${order.courier_id.first_name} ${order.courier_id.last_name}`,
        phone: order.courier_id.phone
      } : null,
      
      delivery_address: order.delivery_address,
      
      timeline: order.status_history.map(history => ({
        status: history.status,
        timestamp: history.timestamp,
        description: getStatusDescription(history.status),
        notes: history.notes
      })),
      
      progress_percentage: getOrderProgress(order.status),
      estimated_time_remaining: order.getTimeToDelivery(),
      is_overdue: order.isOverdue(),
      
      next_step: getNextStep(order.status)
    };

    console.log('‚úÖ TRACK ORDER SUCCESS:', {
      order_number: order.order_number,
      current_status: order.status
    });

    return trackingInfo;

  } catch (error) {
    console.error('üö® TRACK ORDER ERROR:', error);
    throw new Error('–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
  }
};

/**
 * ‚ö° –ü–û–õ–£–ß–ò–¢–¨ –¢–û–õ–¨–ö–û –°–¢–ê–¢–£–° –ó–ê–ö–ê–ó–ê
 */
export const getOrderStatusOnly = async (orderId) => {
  try {
    const order = await Order.findById(orderId).select('order_number status estimated_delivery_time').lean();
    
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      order_number: order.order_number,
      status: order.status,
      estimated_delivery_time: order.estimated_delivery_time,
      time_remaining: order.getTimeToDelivery?.() || null
    };

  } catch (error) {
    console.error('üö® GET ORDER STATUS ERROR:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
  }
};

// ================ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * üïí –†–ê–°–ß–ï–¢ –í–†–ï–ú–ï–ù–ò –î–û–°–¢–ê–í–ö–ò
 */
const calculateEstimatedDeliveryTime = (deliveryAddress, restaurantLocation, deliveryInfo) => {
  let totalMinutes = 30; // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  if (deliveryAddress.lat && deliveryAddress.lng && 
      restaurantLocation?.coordinates?.[0] && restaurantLocation?.coordinates?.[1]) {
    
    const distance = calculateDistance(
      deliveryAddress.lat, deliveryAddress.lng,
      restaurantLocation.coordinates[1], restaurantLocation.coordinates[0]
    );
    
    totalMinutes += Math.ceil(distance * 3); // 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–º
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
  if (deliveryInfo?.estimated_delivery_time) {
    const avgTime = parseInt(deliveryInfo.estimated_delivery_time.split('-')[0]) || 30;
    totalMinutes = Math.max(totalMinutes, avgTime);
  }

  return new Date(Date.now() + totalMinutes * 60 * 1000);
};

/**
 * üí≥ –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ê (–ó–ê–ì–õ–£–®–ö–ê)
 */
const processPayment = async (order, options = {}) => {
  try {
    console.log('üí≥ PROCESSING PAYMENT:', {
      order_id: order._id,
      amount: order.total_price,
      method: order.payment_method
    });

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    const paymentResult = {
      success: true,
      transaction_id: `txn_${Date.now()}`,
      method: order.payment_method,
      amount: order.total_price,
      status: 'completed',
      processed_at: new Date(),
      details: {
        gateway: 'stripe_mock',
        currency: 'RUB',
        fee: Math.ceil(order.total_price * 0.029) // 2.9% –∫–æ–º–∏—Å—Å–∏—è
      }
    };

    console.log('‚úÖ PAYMENT PROCESSED SUCCESS:', {
      transaction_id: paymentResult.transaction_id,
      amount: paymentResult.amount
    });

    return paymentResult;

  } catch (error) {
    console.error('üö® PAYMENT PROCESSING ERROR:', error);
    
    return {
      success: false,
      error: error.message,
      method: order.payment_method,
      amount: order.total_price,
      processed_at: new Date()
    };
  }
};

/**
 * üí∞ –í–û–ó–í–†–ê–¢ –°–†–ï–î–°–¢–í (–ó–ê–ì–õ–£–®–ö–ê)
 */
const processRefund = async (order) => {
  try {
    console.log('üí∞ PROCESSING REFUND:', {
      order_id: order._id,
      amount: order.total_price
    });

    // –ò–º–∏—Ç–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
    await new Promise(resolve => setTimeout(resolve, 500));

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    order.payment_status = 'refunded';
    order.refund_info = {
      refunded_at: new Date(),
      refund_amount: order.total_price,
      refund_transaction_id: `refund_${Date.now()}`,
      status: 'completed'
    };

    await order.save();

    console.log('‚úÖ REFUND PROCESSED SUCCESS:', {
      order_number: order.order_number,
      refund_amount: order.total_price
    });

    return true;

  } catch (error) {
    console.error('üö® REFUND PROCESSING ERROR:', error);
    return false;
  }
};

/**
 * üîê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ó–ê–ö–ê–ó–£
 */
const checkOrderAccess = (order, userId, userRole) => {
  switch (userRole) {
    case 'customer':
      return order.customer_id.toString() === userId.toString();
    case 'partner':
      return order.partner_id.toString() === userId.toString();
    case 'courier':
      return order.courier_id?.toString() === userId.toString();
    case 'admin':
      return true;
    default:
      return false;
  }
};

/**
 * ‚≠ê –û–ë–ù–û–í–ò–¢–¨ –†–ï–ô–¢–ò–ù–ì –†–ï–°–¢–û–†–ê–ù–ê
 */
const updatePartnerRating = async (partnerId, newRating) => {
  try {
    const partner = await PartnerProfile.findById(partnerId);
    if (!partner) return;

    const currentRating = partner.ratings?.average_rating || 0;
    const currentReviews = partner.ratings?.total_reviews || 0;
    
    const totalPoints = (currentRating * currentReviews) + newRating;
    const newTotalReviews = currentReviews + 1;
    const newAverageRating = totalPoints / newTotalReviews;

    await PartnerProfile.findByIdAndUpdate(partnerId, {
      'ratings.average_rating': parseFloat(newAverageRating.toFixed(1)),
      'ratings.total_reviews': newTotalReviews
    });

    console.log('‚úÖ PARTNER RATING UPDATED:', {
      partner_id: partnerId,
      new_rating: newAverageRating.toFixed(1),
      total_reviews: newTotalReviews
    });

  } catch (error) {
    console.error('üö® UPDATE PARTNER RATING ERROR:', error);
  }
};

/**
 * ‚≠ê –û–ë–ù–û–í–ò–¢–¨ –†–ï–ô–¢–ò–ù–ì –ö–£–†–¨–ï–†–ê
 */
const updateCourierRating = async (courierId, newRating) => {
  try {
    const courier = await CourierProfile.findOne({ user_id: courierId });
    if (!courier) return;

    const currentRating = courier.ratings?.average_rating || 0;
    const currentReviews = courier.ratings?.total_reviews || 0;
    
    const totalPoints = (currentRating * currentReviews) + newRating;
    const newTotalReviews = currentReviews + 1;
    const newAverageRating = totalPoints / newTotalReviews;

    await CourierProfile.findOneAndUpdate(
      { user_id: courierId },
      {
        'ratings.average_rating': parseFloat(newAverageRating.toFixed(1)),
        'ratings.total_reviews': newTotalReviews
      }
    );

    console.log('‚úÖ COURIER RATING UPDATED:', {
      courier_id: courierId,
      new_rating: newAverageRating.toFixed(1),
      total_reviews: newTotalReviews
    });

  } catch (error) {
    console.error('üö® UPDATE COURIER RATING ERROR:', error);
  }
};

/**
 * üíµ –†–ê–°–ß–ï–¢ –ó–ê–†–ê–ë–û–¢–ö–ê –ö–£–†–¨–ï–†–ê
 */
const calculateCourierEarnings = (deliveryFee, distance = null) => {
  const baseEarnings = deliveryFee * 0.8; // 80% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  const distanceBonus = distance > 5 ? (distance - 5) * 10 : 0; // –ë–æ–Ω—É—Å –∑–∞ –¥–∞–ª—å–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  return Math.ceil(baseEarnings + distanceBonus);
};

/**
 * üìä –ü–û–õ–£–ß–ò–¢–¨ –ü–†–û–ì–†–ï–°–° –ó–ê–ö–ê–ó–ê –í –ü–†–û–¶–ï–ù–¢–ê–•
 */
const getOrderProgress = (status) => {
  const progressMap = {
    'pending': 10,
    'accepted': 25,
    'preparing': 40,
    'ready': 60,
    'picked_up': 80,
    'on_the_way': 90,
    'delivered': 100,
    'cancelled': 0
  };
  
  return progressMap[status] || 0;
};

/**
 * üìù –ü–û–õ–£–ß–ò–¢–¨ –û–ü–ò–°–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê
 */
const getStatusDescription = (status) => {
  const descriptions = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    'accepted': '–†–µ—Å—Ç–æ—Ä–∞–Ω –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑',
    'preparing': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, –∏—â–µ–º –∫—É—Ä—å–µ—Ä–∞',
    'picked_up': '–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑',
    'on_the_way': '–ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏ –∫ –≤–∞–º',
    'delivered': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
  };
  
  return descriptions[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
};

/**
 * ‚û°Ô∏è –ü–û–õ–£–ß–ò–¢–¨ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì
 */
const getNextStep = (status) => {
  const nextSteps = {
    'pending': '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    'accepted': '–†–µ—Å—Ç–æ—Ä–∞–Ω –≥–æ—Ç–æ–≤–∏—Ç –≤–∞—à –∑–∞–∫–∞–∑',
    'preparing': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
    'ready': '–ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏',
    'picked_up': '–ö—É—Ä—å–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
    'on_the_way': '–ö—É—Ä—å–µ—Ä –≤–µ–∑–µ—Ç –∑–∞–∫–∞–∑ –∫ –≤–∞–º',
    'delivered': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!',
    'cancelled': null
  };
  
  return nextSteps[status];
};

/**
 * üìç –†–ê–°–ß–ï–¢ –†–ê–°–°–¢–û–Ø–ù–ò–Ø –ú–ï–ñ–î–£ –î–í–£–ú–Ø –¢–û–ß–ö–ê–ú–ò
 */
const calculateDistance = (lat1, lng1, lat2, lng2) => {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLng = (lng2 - lng1) * Math.PI / 180;
  const a = 
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLng / 2) * Math.sin(dLng / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};

// ================ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ================

export {
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  createOrderFromCart,
  getCustomerOrders,
  getOrderDetails,
  cancelCustomerOrder,
  rateCompletedOrder,
  
  // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  getRestaurantOrders,
  acceptRestaurantOrder,
  rejectRestaurantOrder,
  markRestaurantOrderReady,
  
  // –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  getAvailableOrdersForCourier,
  acceptOrderForDelivery,
  markOrderPickedUpByCourier,
  markOrderDeliveredByCourier,
  getCourierActiveOrders,
  
  // –û–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  trackOrderStatus,
  getOrderStatusOnly,
  
  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  calculateEstimatedDeliveryTime,
  processPayment,
  processRefund,
  checkOrderAccess,
  calculateCourierEarnings,
  getOrderProgress,
  getStatusDescription,
  getNextStep
};