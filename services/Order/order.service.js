// services/Order/order.service.js - –ü–û–õ–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º
import { Order, Cart, User, PartnerProfile, CourierProfile, Product } from '../../models/index.js';
import mongoose from 'mongoose';

// ================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 */
function getReasonText(reason) {
  const reasons = {
    'product_deactivated': '—Ç–æ–≤–∞—Ä —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏',
    'out_of_stock': '–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ',
    'time_restricted': '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
    'partner_unavailable': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
    'insufficient_stock': '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ'
  };
  return reasons[reason] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
}

/**
 * –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
 */
function calculateEstimatedDeliveryTime(delivery_address, restaurant_location, restaurant_delivery_info) {
  let baseTime = 30; // –º–∏–Ω—É—Ç
  
  if (restaurant_delivery_info && restaurant_delivery_info.base_delivery_time) {
    baseTime = restaurant_delivery_info.base_delivery_time;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  const distance = calculateDistance(
    restaurant_location?.coordinates?.[1] || 48.8566,
    restaurant_location?.coordinates?.[0] || 2.3522,
    delivery_address.lat,
    delivery_address.lng
  );
  
  const extraTime = Math.round(distance * 2); // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–º
  return baseTime + extraTime;
}

/**
 * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (Haversine formula)
 */
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
 */
async function validateProductsAvailability(cartItems, session = null) {
  const productIds = cartItems.map(item => item.product_id);
  const products = await Product.find({
    _id: { $in: productIds }
  }).session(session);

  const unavailableItems = [];
  const availableProducts = [];
  const itemsSnapshot = [];

  for (const cartItem of cartItems) {
    const product = products.find(p => p._id.toString() === cartItem.product_id.toString());
    
    if (!product) {
      unavailableItems.push({
        product_id: cartItem.product_id,
        title: cartItem.product_snapshot?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
        reason: 'product_deactivated',
        requested_quantity: cartItem.quantity
      });
      continue;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
    itemsSnapshot.push({
      product_id: product._id,
      availability_at_order: {
        is_active: product.is_active,
        is_available: product.is_available,
        stock_quantity: product.stock_quantity,
        availability_schedule: product.availability_schedule,
        captured_at: new Date()
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if (!product.is_active || !product.is_available) {
      unavailableItems.push({
        product_id: product._id,
        title: product.title,
        reason: 'product_deactivated',
        requested_quantity: cartItem.quantity
      });
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
    if (product.category === 'store' && typeof product.stock_quantity === 'number') {
      if (product.stock_quantity < cartItem.quantity) {
        if (product.stock_quantity > 0) {
          // –ß–∞—Å—Ç–∏—á–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
          unavailableItems.push({
            product_id: product._id,
            title: product.title,
            reason: 'insufficient_stock',
            requested_quantity: cartItem.quantity,
            available_quantity: product.stock_quantity
          });
        } else {
          // –ü–æ–ª–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
          unavailableItems.push({
            product_id: product._id,
            title: product.title,
            reason: 'out_of_stock',
            requested_quantity: cartItem.quantity,
            available_quantity: 0
          });
        }
        continue;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if (product.isAvailableNow && !product.isAvailableNow()) {
      unavailableItems.push({
        product_id: product._id,
        title: product.title,
        reason: 'time_restricted',
        requested_quantity: cartItem.quantity
      });
      continue;
    }

    availableProducts.push(product);
  }

  return {
    unavailableItems,
    availableProducts,
    itemsSnapshot,
    validationStatus: unavailableItems.length === 0 ? 'valid' : 
                     unavailableItems.length < cartItems.length ? 'has_issues' : 'critical_issues'
  };
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
 */
async function reserveProductsStock(orderItems, availableProducts, session = null) {
  const reservationResults = [];

  for (const product of availableProducts) {
    if (product.category === 'store' && typeof product.stock_quantity === 'number') {
      const orderItem = orderItems.find(item => 
        item.product_id.toString() === product._id.toString()
      );
      
      if (orderItem) {
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä (—Å–Ω–∏–º–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞)
        const updatedProduct = await Product.findByIdAndUpdate(
          product._id,
          { 
            $inc: { stock_quantity: -orderItem.quantity },
            $push: {
              reservation_history: {
                order_id: null, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                quantity_reserved: orderItem.quantity,
                reserved_at: new Date(),
                type: 'order_creation'
              }
            }
          },
          { session, new: true }
        );

        reservationResults.push({
          product_id: product._id,
          title: product.title,
          quantity_reserved: orderItem.quantity,
          remaining_stock: updatedProduct.stock_quantity,
          reserved_at: new Date()
        });

        console.log(`üì¶ RESERVED: ${orderItem.quantity}x "${product.title}", –æ—Å—Ç–∞–ª–æ—Å—å: ${updatedProduct.stock_quantity}`);
      }
    }
  }

  return reservationResults;
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
 */
async function returnProductsToStock(orderItems, session = null) {
  const returnResults = [];

  for (const item of orderItems) {
    const product = await Product.findById(item.product_id).session(session);
    
    if (product && product.category === 'store' && typeof product.stock_quantity === 'number') {
      const updatedProduct = await Product.findByIdAndUpdate(
        item.product_id,
        { 
          $inc: { stock_quantity: item.quantity },
          $push: {
            reservation_history: {
              order_id: item.order_id || null,
              quantity_returned: item.quantity,
              returned_at: new Date(),
              type: 'order_cancellation'
            }
          }
        },
        { session, new: true }
      );

      returnResults.push({
        product_id: item.product_id,
        title: item.title,
        quantity_returned: item.quantity,
        new_stock: updatedProduct.stock_quantity
      });

      console.log(`‚Ü©Ô∏è RETURNED: ${item.quantity}x "${item.title}", –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${updatedProduct.stock_quantity}`);
    }
  }

  return returnResults;
}

/**
 * –ó–∞–≥–ª—É—à–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ê
 */
async function processPayment(order, options = {}) {
  // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ - —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –¥–ª—è card
  const isSuccess = Math.random() > 0.08; // 92% —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  
  if (isSuccess) {
    return {
      success: true,
      transaction_id: `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      method: 'card',
      amount: order.total_price,
      processed_at: new Date(),
      details: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
    };
  } else {
    return {
      success: false,
      error_code: 'PAYMENT_DECLINED',
      method: 'card',
      amount: order.total_price,
      details: '–ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º'
    };
  }
}

/**
 * –ó–∞–≥–ª—É—à–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
 */
async function processRefund(order, options = {}) {
  return {
    success: true,
    refund_id: `ref_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    amount: order.total_price,
    processed_at: new Date(),
    details: '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
  };
}

// ================ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üõí –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –ö–û–†–ó–ò–ù–´ - —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export const createOrderFromCart = async (customerId, orderData) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();

    const { delivery_address, customer_contact, payment_method = 'cash', special_requests = '' } = orderData;

    console.log('üÜï CREATE ORDER FROM CART:', { customerId, payment_method });

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    if (!delivery_address || !delivery_address.address) {
      throw new Error('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    if (!delivery_address.lat || !delivery_address.lng) {
      throw new Error('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    if (!customer_contact || !customer_contact.name || !customer_contact.phone) {
      throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }

    // 1. –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId).session(session);
    if (!cart || cart.items.length === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    const minOrderAmount = cart.restaurant_info.min_order_amount || 0;
    if (cart.pricing.subtotal < minOrderAmount) {
      throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${minOrderAmount}‚Ç¨`);
    }

    // 3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
    const restaurant = await PartnerProfile.findById(cart.restaurant_id).session(session);
    if (!restaurant || !restaurant.is_active || !restaurant.is_approved) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤');
    }

    // 4. ‚úÖ –ù–û–í–ê–Ø –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–û–°–¢–£–ü–ù–û–°–¢–ò –¢–û–í–ê–†–û–í
    const validation = await validateProductsAvailability(cart.items, session);
    const { unavailableItems, availableProducts, itemsSnapshot, validationStatus } = validation;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if (validationStatus === 'critical_issues') {
      throw new Error(
        `–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:\n${unavailableItems.map(item => 
          `‚Ä¢ "${item.title}" - ${getReasonText(item.reason)}`
        ).join('\n')}`
      );
    }

    // 5. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    const orderItems = cart.items
      .filter(cartItem => 
        availableProducts.some(p => p._id.toString() === cartItem.product_id.toString())
      )
      .map(cartItem => {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        const basePrice = parseFloat(cartItem.product_snapshot?.price || cartItem.item_price || 0);
        const quantity = parseInt(cartItem.quantity || 1);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Å—É–º–º—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        let itemTotal = parseFloat(cartItem.total_item_price || cartItem.item_total || 0);
        
        if (!itemTotal || isNaN(itemTotal)) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π —Å—É–º–º—ã, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
          const optionsPrice = parseFloat(cartItem.options_price || 0);
          itemTotal = (basePrice + optionsPrice) * quantity;
        }

        console.log(`üí∞ ITEM CALCULATION:`, {
          title: cartItem.product_snapshot?.title,
          base_price: basePrice,
          quantity: quantity,
          item_total: itemTotal,
          from_field: cartItem.total_item_price ? 'total_item_price' : 'calculated'
        });

        return {
          product_id: cartItem.product_id,
          title: cartItem.product_snapshot?.title || 'Unknown Product',
          price: basePrice,
          quantity: quantity,
          selected_options: cartItem.selected_options || [],
          item_total: itemTotal,
          special_requests: cartItem.special_requests || ''
        };
      });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù –†–ê–°–ß–ï–¢ –û–ë–©–ò–• –°–£–ú - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    let subtotal = parseFloat(cart.pricing?.subtotal || 0);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç subtotal –≤ –∫–æ—Ä–∑–∏–Ω–µ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
    if (!subtotal || isNaN(subtotal)) {
      subtotal = orderItems.reduce((sum, item) => {
        const itemTotal = parseFloat(item.item_total || 0);
        return sum + (isNaN(itemTotal) ? 0 : itemTotal);
      }, 0);
    }
    
    const delivery_fee = parseFloat(cart.pricing?.delivery_fee || cart.restaurant_info?.delivery_fee || 3.50);
    const service_fee = parseFloat(cart.pricing?.service_fee || Math.round(subtotal * 0.05 * 100) / 100);
    const total_price = parseFloat(cart.pricing?.total_price || (subtotal + delivery_fee + service_fee));

    console.log('üí∞ FINAL PRICING:', {
      subtotal,
      delivery_fee,
      service_fee,
      total_price,
      cart_pricing: cart.pricing,
      all_numbers_valid: !isNaN(subtotal) && !isNaN(delivery_fee) && !isNaN(service_fee) && !isNaN(total_price)
    });

    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê NaN
    if (isNaN(subtotal) || isNaN(delivery_fee) || isNaN(service_fee) || isNaN(total_price)) {
      throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã.');
    }

    // 6. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = await Order.generateOrderNumber();

    // 7. –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    const estimatedDeliveryTime = calculateEstimatedDeliveryTime(
      delivery_address,
      restaurant.location,
      restaurant.delivery_info
    );

    // 8. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    const newOrder = new Order({
      order_number: orderNumber,
      customer_id: customerId,
      partner_id: restaurant._id,
      items: orderItems,
      
      // ‚úÖ –°–ù–ò–ú–û–ö –¢–û–í–ê–†–û–í –ù–ê –ú–û–ú–ï–ù–¢ –ó–ê–ö–ê–ó–ê
      items_snapshot: itemsSnapshot,
      
      // ‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ê–õ–ò–î–ê–¶–ò–ò
      availability_validation: {
        validated_at: new Date(),
        unavailable_items: unavailableItems,
        validation_status: validationStatus
      },

      subtotal,
      delivery_fee,
      service_fee,
      total_price,
      
      delivery_address,
      customer_contact,
      payment_method,
      special_requests,
      
      estimated_delivery_time: estimatedDeliveryTime,
      
      status: 'pending',
      payment_status: payment_method === 'cash' ? 'pending' : 'pending'
    });

    await newOrder.save({ session });

    // 9. ‚úÖ –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–û–í –ù–ê –°–ö–õ–ê–î–ï
    const reservationResults = await reserveProductsStock(orderItems, availableProducts, session);

    // 10. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂
let paymentResult;
if (payment_method !== 'card') {
  throw new Error('–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π');
}

try {
  paymentResult = await processPayment(newOrder, { session });
  
  if (!paymentResult.success) {
    throw new Error(paymentResult.details || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
  }
  
  newOrder.payment_status = 'completed';
  newOrder.payment_details = {
    transaction_id: paymentResult.transaction_id,
    payment_processor: 'stub',
    gateway_response: {
      method: paymentResult.method,
      amount: paymentResult.amount,
      processed_at: paymentResult.processed_at,
      details: paymentResult.details
    }
  };
  
  console.log('üí≥ PAYMENT SUCCESS:', {
    payment_id: paymentResult.transaction_id,
    amount: paymentResult.amount
  });
  
} catch (paymentError) {
  console.error('üí≥ PAYMENT FAILED:', paymentError.message);
  await returnProductsToStock(orderItems, session);
  throw new Error(`–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: ${paymentError.message}`);
}

await newOrder.save({ session });

    // 11. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ –∑–∞–∫–∞–∑
    await cart.convertToOrder();
    await cart.save({ session });

    // 12. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    await PartnerProfile.findByIdAndUpdate(
      cart.restaurant_id,
      { 
        $inc: { 
          'ratings.total_orders': 1,
          'business_stats.total_orders': 1
        }
      },
      { session }
    );

    await session.commitTransaction();

    console.log('‚úÖ ORDER CREATED SUCCESS:', {
      order_id: newOrder._id,
      order_number: orderNumber,
      total_price: newOrder.total_price,
      payment_status: newOrder.payment_status,
      unavailable_items_count: unavailableItems.length,
      reserved_items: reservationResults.length
    });

    // ‚úÖ –§–û–†–ú–ò–†–£–ï–ú –û–¢–í–ï–¢ –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò –û –ü–†–û–ë–õ–ï–ú–ê–•
    const response = {
      order: newOrder,
      payment: paymentResult,
      estimatedDelivery: estimatedDeliveryTime,
      reservation_info: reservationResults
    };

    if (unavailableItems.length > 0) {
      response.warnings = {
        message: `${unavailableItems.length} —Ç–æ–≤–∞—Ä(–æ–≤) –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∑–∞–∫–∞–∑–∞`,
        unavailable_items: unavailableItems.map(item => ({
          title: item.title,
          reason: getReasonText(item.reason),
          requested_quantity: item.requested_quantity,
          available_quantity: item.available_quantity || 0
        })),
        price_adjustment: {
          original_total: cart.pricing.total_price,
          new_total: newOrder.total_price,
          saved_amount: Math.round((cart.pricing.total_price - newOrder.total_price) * 100) / 100
        }
      };
    }

    return response;

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® CREATE ORDER ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –ö–õ–ò–ï–ù–¢–ê
 */
export const getCustomerOrders = async (customerId, filters = {}) => {
  try {
    const { status, limit = 10, offset = 0 } = filters;

    console.log('üìã GET CUSTOMER ORDERS:', { customerId, status, limit, offset });

    const query = { customer_id: customerId };
    if (status) {
      query.status = status;
    }

    const orders = await Order.find(query)
      .populate('partner_id', 'business_name category location phone')
      .populate('courier_id', 'user_id vehicle_info phone')
      .sort({ createdAt: -1 })
      .limit(limit)
      .skip(offset);

    const totalCount = await Order.countDocuments(query);

    return {
      orders,
      pagination: {
        total: totalCount,
        limit,
        offset,
        hasMore: offset + limit < totalCount
      }
    };

  } catch (error) {
    console.error('üö® GET CUSTOMER ORDERS ERROR:', error);
    throw error;
  }
};

/**
 * üìÑ –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê
 */
export const getOrderDetails = async (orderId, userId, userRole = 'customer') => {
  try {
    console.log('üìÑ GET ORDER DETAILS:', { orderId, userId, userRole });

    const order = await Order.findById(orderId)
      .populate('customer_id', 'first_name last_name phone email')
      .populate('partner_id', 'business_name category phone location')
      .populate('courier_id', 'user_id vehicle_info phone');

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    await checkOrderAccess(order, userId, userRole);

    // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –¢–û–í–ê–†–û–í –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç
    if (order.status === 'pending') {
      await order.validateItemsAvailability();
    }

    const canCancel = ['pending', 'accepted'].includes(order.status);
    const canRate = order.status === 'delivered' && !order.ratings?.partner_rating;

    return {
      order,
      canCancel,
      canRate,
      estimatedDelivery: order.estimated_delivery_time,
      availability_info: order.availability_validation
    };

  } catch (error) {
    console.error('üö® GET ORDER DETAILS ERROR:', error);
    throw error;
  }
};

/**
 * ‚ùå –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–û–ú - —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥
 */
export const cancelCustomerOrder = async (orderId, customerId, cancellationData) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();
    
    const { reason = '–û—Ç–º–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º', details = '' } = cancellationData;

    console.log('‚ùå CANCEL CUSTOMER ORDER:', { orderId, customerId, reason });

    const order = await Order.findById(orderId).session(session);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (!['pending', 'accepted'].includes(order.status)) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å - –æ–Ω —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è');
    }

    // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –¢–û–í–ê–†–´ –ù–ê –°–ö–õ–ê–î
    const returnResults = await returnProductsToStock(order.items, session);

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await order.cancelOrder(reason, customerId, 'customer', details);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –∫–∞—Ä—Ç–æ–π
    if (order.payment_status === 'completed' && order.payment_method === 'card') {
      try {
        const { processOrderRefund } = await import('../payment.service.js');
        
        const refundResult = await processOrderRefund({
          original_payment_id: order.payment_details?.payment_id,
          amount: order.total_price,
          order_id: order._id,
          reason: `–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: ${reason}`
        });
        
        order.payment_status = 'refunded';
        order.refund_details = {
          refund_id: refundResult.refund_id,
          amount: refundResult.amount,
          processed_at: refundResult.processed_at,
          estimated_arrival: refundResult.estimated_arrival
        };
        
        console.log('üí∏ REFUND SUCCESS:', {
          refund_id: refundResult.refund_id,
          amount: refundResult.amount
        });
        
      } catch (refundError) {
        console.error('üí∏ REFUND ERROR:', refundError.message);
        order.payment_status = 'refund_pending';
        order.refund_error = refundError.message;
      }
      
      await order.save({ session });
    }

    await session.commitTransaction();

    console.log('‚úÖ ORDER CANCELLED SUCCESS:', {
      order_number: order.order_number,
      reason,
      items_returned_to_stock: returnResults.length
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      cancelled_at: order.cancelled_at,
      message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      stock_return_info: returnResults,
      refund_info: order.payment_method === 'card' ? 
        '–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π' : null
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® CANCEL CUSTOMER ORDER ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * ‚≠ê –û–¶–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 */
export const rateCompletedOrder = async (orderId, customerId, ratingData) => {
  try {
    const { partner_rating, courier_rating, comment = '' } = ratingData;

    console.log('‚≠ê RATE ORDER:', { orderId, customerId, partner_rating, courier_rating });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'delivered') {
      throw new Error('–ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
    }

    if (order.ratings && order.ratings.partner_rating) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–∫–∞–∑–∞
    order.ratings = {
      partner_rating: partner_rating,
      courier_rating: courier_rating,
      comment: comment.trim(),
      rated_at: new Date()
    };

    await order.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    if (partner_rating) {
      await PartnerProfile.findByIdAndUpdate(order.partner_id, {
        $inc: {
          'ratings.total_reviews': 1,
          'ratings.total_points': partner_rating
        }
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞
    if (courier_rating && order.courier_id) {
      await CourierProfile.findByIdAndUpdate(order.courier_id, {
        $inc: {
          'ratings.total_reviews': 1,
          'ratings.total_points': courier_rating
        }
      });
    }

    console.log('‚úÖ ORDER RATED SUCCESS:', {
      order_number: order.order_number,
      partner_rating,
      courier_rating
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      ratings: order.ratings,
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!'
    };

  } catch (error) {
    console.error('üö® RATE ORDER ERROR:', error);
    throw error;
  }
};

// ================ –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –†–ï–°–¢–û–†–ê–ù–ê
 */
export const getRestaurantOrders = async (partnerId, filters = {}) => {
  try {
    const { status, date, limit = 20, offset = 0 } = filters;

    console.log('üìã GET RESTAURANT ORDERS:', { partnerId, status, date });

    const query = { partner_id: partnerId };
    
    if (status) {
      query.status = status;
    }
    
    if (date) {
      const startOfDay = new Date(date);
      startOfDay.setHours(0, 0, 0, 0);
      const endOfDay = new Date(date);
      endOfDay.setHours(23, 59, 59, 999);
      query.createdAt = { $gte: startOfDay, $lte: endOfDay };
    }

    const orders = await Order.find(query)
      .populate('customer_id', 'first_name last_name phone')
      .populate('courier_id', 'user_id vehicle_info phone')
      .sort({ createdAt: -1 })
      .limit(limit)
      .skip(offset);

    const totalCount = await Order.countDocuments(query);

    return {
      orders,
      pagination: {
        total: totalCount,
        limit,
        offset,
        hasMore: offset + limit < totalCount
      }
    };

  } catch (error) {
    console.error('üö® GET RESTAURANT ORDERS ERROR:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–†–ò–ù–Ø–¢–¨ –ó–ê–ö–ê–ó –†–ï–°–¢–û–†–ê–ù–û–ú
 */
export const acceptRestaurantOrder = async (orderId, partnerId, acceptanceData = {}) => {
  try {
    const { estimated_preparation_time = 20 } = acceptanceData;

    console.log('‚úÖ ACCEPT RESTAURANT ORDER:', { orderId, partnerId, estimated_preparation_time });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'pending') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // ‚úÖ –ü–û–í–¢–û–†–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–û–í–ê–†–û–í –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º
    const currentValidation = await validateProductsAvailability(order.items);
    if (currentValidation.validationStatus === 'critical_issues') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å - —Ç–æ–≤–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑
    await order.addStatusHistory('accepted', partnerId, 'partner', 
      `–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${estimated_preparation_time} –º–∏–Ω—É—Ç`);

    console.log('‚úÖ ORDER ACCEPTED SUCCESS:', {
      order_number: order.order_number,
      estimated_preparation_time
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      accepted_at: order.accepted_at,
      message: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ',
      next_step: `–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${estimated_preparation_time} –º–∏–Ω—É—Ç`
    };

  } catch (error) {
    console.error('üö® ACCEPT ORDER ERROR:', error);
    throw error;
  }
};

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨ –ó–ê–ö–ê–ó –†–ï–°–¢–û–†–ê–ù–û–ú - —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤
 */
export const rejectRestaurantOrder = async (orderId, partnerId, rejectionData) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();
    
    const { reason, details = '' } = rejectionData;

    console.log('‚ùå REJECT RESTAURANT ORDER:', { orderId, partnerId, reason });

    const order = await Order.findById(orderId).session(session);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'pending') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –¢–û–í–ê–†–´ –ù–ê –°–ö–õ–ê–î
    const returnResults = await returnProductsToStock(order.items, session);

    // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await order.cancelOrder(reason, partnerId, 'partner', details);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç—É –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    if (order.payment_status === 'completed' && order.payment_method === 'card') {
      const refundResult = await processRefund(order);
      order.payment_status = 'refunded';
      order.refund_details = refundResult;
      await order.save({ session });
    }

    await session.commitTransaction();

    console.log('‚úÖ ORDER REJECTED SUCCESS:', {
      order_number: order.order_number,
      reason,
      items_returned_to_stock: returnResults.length
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      cancelled_at: order.cancelled_at,
      message: '–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',
      stock_return_info: returnResults
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® REJECT ORDER ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * üç≥ –ó–ê–ö–ê–ó –ì–û–¢–û–í –ö –í–´–î–ê–ß–ï
 */
export const markRestaurantOrderReady = async (orderId, partnerId) => {
  try {
    console.log('üç≥ MARK ORDER READY:', { orderId, partnerId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'accepted') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤—ã–º - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤—ã–º
    await order.addStatusHistory('ready', partnerId, 'partner', '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ –∫—É—Ä—å–µ—Ä—É');

    console.log('‚úÖ ORDER READY SUCCESS:', {
      order_number: order.order_number,
      ready_at: order.ready_at
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      ready_at: order.ready_at,
      message: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –û–∂–∏–¥–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä.',
      next_step: '–î–æ–∂–¥–∏—Ç–µ—Å—å –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞'
    };

  } catch (error) {
    console.error('üö® MARK ORDER READY ERROR:', error);
    throw error;
  }
};

// ================ –ö–£–†–¨–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü–ù–´–ï –ó–ê–ö–ê–ó–´ –î–õ–Ø –ö–£–†–¨–ï–†–ê
 */
export const getAvailableOrdersForCourier = async (courierId, location = {}) => {
  try {
    const { lat, lng, radius = 10 } = location; // —Ä–∞–¥–∏—É—Å –≤ –∫–º

    console.log('üìã GET AVAILABLE ORDERS FOR COURIER:', { courierId, lat, lng, radius });

    let query = {
      status: 'ready',
      courier_id: { $exists: false }
    };

    // –§–∏–ª—å—Ç—Ä –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (lat && lng) {
      query['delivery_address.lat'] = {
        $gte: lat - (radius * 0.009), // –ü—Ä–∏–º–µ—Ä–Ω–æ 1–∫–º = 0.009 –≥—Ä–∞–¥—É—Å–∞
        $lte: lat + (radius * 0.009)
      };
      query['delivery_address.lng'] = {
        $gte: lng - (radius * 0.009),
        $lte: lng + (radius * 0.009)
      };
    }

    const orders = await Order.find(query)
      .populate('partner_id', 'business_name phone location')
      .populate('customer_id', 'first_name last_name phone')
      .sort({ ready_at: 1 }) // –°—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–≤—ã–º–∏
      .limit(20);

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ
    const enrichedOrders = orders.map(order => {
      const distance = lat && lng ? calculateDistance(
        lat, lng,
        order.delivery_address.lat,
        order.delivery_address.lng
      ) : null;

      const estimatedEarnings = calculateCourierEarnings(order, distance);

      return {
        ...order.toObject(),
        distance_km: distance ? Math.round(distance * 10) / 10 : null,
        estimated_earnings: estimatedEarnings,
        delivery_time_estimate: distance ? Math.round(distance * 3) + 10 : 15 // 3 –º–∏–Ω/–∫–º + 10 –º–∏–Ω –±–∞–∑–æ–≤—ã—Ö
      };
    });

    return {
      available_orders: enrichedOrders,
      total: enrichedOrders.length,
      location_filter: lat && lng ? { lat, lng, radius } : null
    };

  } catch (error) {
    console.error('üö® GET AVAILABLE ORDERS ERROR:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
  }
};

/**
 * üì¶ –í–ó–Ø–¢–¨ –ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£
 */
export const acceptOrderForDelivery = async (orderId, courierId) => {
  try {
    console.log('üì¶ ACCEPT ORDER FOR DELIVERY:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.status !== 'ready') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∑—è—Ç–∏—è - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    if (order.courier_id) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—å–µ—Ä –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∑–∞–∫–∞–∑–æ–º
    const activeOrder = await Order.findOne({
      courier_id: courierId,
      status: { $in: ['picked_up', 'on_the_way'] }
    });

    if (activeOrder) {
      throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏');
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞
    order.courier_id = courierId;
    await order.addStatusHistory('picked_up', courierId, 'courier', '–ö—É—Ä—å–µ—Ä –≤–∑—è–ª –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É');

    console.log('‚úÖ ORDER ACCEPTED FOR DELIVERY SUCCESS:', {
      order_number: order.order_number,
      courier_id: courierId
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      message: '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω.',
      partner_info: {
        name: order.partner_id?.business_name,
        phone: order.partner_id?.phone,
        address: order.partner_id?.location?.address
      }
    };

  } catch (error) {
    console.error('üö® ACCEPT ORDER FOR DELIVERY ERROR:', error);
    throw error;
  }
};

/**
 * üè™ –ó–ê–ë–†–ê–¢–¨ –ó–ê–ö–ê–ó –£ –†–ï–°–¢–û–†–ê–ù–ê
 */
export const markOrderPickedUpByCourier = async (orderId, courierId) => {
  try {
    console.log('üè™ MARK ORDER PICKED UP:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.courier_id.toString() !== courierId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'picked_up') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await order.addStatusHistory('on_the_way', courierId, 'courier', '–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É');

    console.log('‚úÖ ORDER PICKED UP SUCCESS:', {
      order_number: order.order_number,
      picked_up_at: order.picked_up_at
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      picked_up_at: order.picked_up_at,
      message: '–ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω! –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É.',
      customer_info: {
        name: `${order.customer_contact?.name || '–ö–ª–∏–µ–Ω—Ç'}`,
        phone: order.customer_contact?.phone,
        address: order.delivery_address?.address
      }
    };

  } catch (error) {
    console.error('üö® MARK ORDER PICKED UP ERROR:', error);
    throw error;
  }
};

/**
 * üöö –î–û–°–¢–ê–í–ò–¢–¨ –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–£
 */
export const markOrderDeliveredByCourier = async (orderId, courierId) => {
  try {
    console.log('üöö MARK ORDER DELIVERED:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.courier_id.toString() !== courierId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'on_the_way') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await order.addStatusHistory('delivered', courierId, 'courier', '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É—Ä—å–µ—Ä–∞
    await CourierProfile.findByIdAndUpdate(courierId, {
      $inc: {
        'delivery_stats.total_deliveries': 1,
        'delivery_stats.total_earnings': calculateCourierEarnings(order)
      }
    });

    console.log('‚úÖ ORDER DELIVERED SUCCESS:', {
      order_number: order.order_number,
      delivered_at: order.delivered_at,
      actual_delivery_time: order.actual_delivery_time
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      delivered_at: order.delivered_at,
      actual_delivery_time: order.actual_delivery_time,
      message: '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É.'
    };

  } catch (error) {
    console.error('üö® MARK ORDER DELIVERED ERROR:', error);
    throw error;
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´ –ö–£–†–¨–ï–†–ê
 */
export const getCourierActiveOrders = async (courierId) => {
  try {
    console.log('üö¥ GET COURIER ACTIVE ORDERS:', { courierId });

    const orders = await Order.find({
      courier_id: courierId,
      status: { $in: ['picked_up', 'on_the_way'] }
    })
    .populate('partner_id', 'business_name phone location')
    .populate('customer_id', 'first_name last_name phone')
    .sort({ createdAt: -1 });

    return {
      active_orders: orders,
      total: orders.length
    };

  } catch (error) {
    console.error('üö® GET COURIER ACTIVE ORDERS ERROR:', error);
    throw error;
  }
};

// ================ –û–ë–©–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üîç –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê
 */
export const trackOrderStatus = async (orderId, userId = null) => {
  try {
    console.log('üîç TRACK ORDER STATUS:', { orderId, userId });

    const order = await Order.findById(orderId)
      .populate('partner_id', 'business_name phone location')
      .populate('courier_id', 'user_id vehicle_info phone')
      .populate('customer_id', 'first_name last_name phone');

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω userId, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if (userId) {
      const hasAccess = await checkOrderAccess(order, userId);
      if (!hasAccess) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
      }
    }

    const progress = getOrderProgress(order.status);
    const statusDescription = getStatusDescription(order.status);
    const nextStep = getNextStep(order.status);

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      status_description: statusDescription,
      progress,
      next_step: nextStep,
      estimated_delivery_time: order.estimated_delivery_time,
      actual_delivery_time: order.actual_delivery_time,
      created_at: order.createdAt,
      status_history: order.status_history,
      partner_info: order.partner_id ? {
        name: order.partner_id.business_name,
        phone: order.partner_id.phone
      } : null,
      courier_info: order.courier_id ? {
        phone: order.courier_id.phone,
        vehicle: order.courier_id.vehicle_info?.vehicle_type
      } : null
    };

  } catch (error) {
    console.error('üö® TRACK ORDER ERROR:', error);
    throw error;
  }
};

/**
 * üìä –ü–û–õ–£–ß–ò–¢–¨ –¢–û–õ–¨–ö–û –°–¢–ê–¢–£–° –ó–ê–ö–ê–ó–ê (–±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥)
 */
export const getOrderStatusOnly = async (orderId) => {
  try {
    const order = await Order.findById(orderId).select('status order_number estimated_delivery_time actual_delivery_time');
    
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      order_id: orderId,
      order_number: order.order_number,
      status: order.status,
      status_description: getStatusDescription(order.status),
      progress: getOrderProgress(order.status),
      estimated_delivery_time: order.estimated_delivery_time,
      actual_delivery_time: order.actual_delivery_time
    };

  } catch (error) {
    console.error('üö® GET ORDER STATUS ERROR:', error);
    throw error;
  }
};

// ================ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ó–ê–ö–ê–ó–£
 */
export const checkOrderAccess = async (order, userId, userRole = null) => {
  try {
    // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (!userRole) {
      const Meta = mongoose.model('Meta');
      const meta = await Meta.findOne({ 
        $or: [
          { customer: userId },
          { partner: userId }, 
          { courier: userId }
        ]
      });
      
      if (meta) {
        userRole = meta.role;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º
    let hasAccess = false;
    
    if (userRole === 'customer' && order.customer_id._id.toString() === userId.toString()) {
      hasAccess = true;
    } else if (userRole === 'partner' && order.partner_id.user_id?.toString() === userId.toString()) {
      hasAccess = true;
    } else if (userRole === 'courier' && order.courier_id?.user_id?.toString() === userId.toString()) {
      hasAccess = true;
    }

    if (!hasAccess) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    return true;

  } catch (error) {
    console.error('üö® CHECK ORDER ACCESS ERROR:', error);
    throw error;
  }
};

/**
 * üí∞ –†–ê–°–ß–ï–¢ –ó–ê–†–ê–ë–û–¢–ö–ê –ö–£–†–¨–ï–†–ê
 */
export const calculateCourierEarnings = (order, distance = null) => {
  const baseEarning = 4.50; // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É
  const distanceBonus = distance ? Math.round(distance * 0.50 * 100) / 100 : 1.50; // 0.50‚Ç¨ –∑–∞ –∫–º
  const orderSizeBonus = order.total_price > 30 ? 1.00 : 0; // –ë–æ–Ω—É—Å –∑–∞ –∫—Ä—É–ø–Ω—ã–π –∑–∞–∫–∞–∑
  
  return Math.round((baseEarning + distanceBonus + orderSizeBonus) * 100) / 100;
};

/**
 * üìä –ü–û–õ–£–ß–ò–¢–¨ –ü–†–û–ì–†–ï–°–° –ó–ê–ö–ê–ó–ê (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
 */
export const getOrderProgress = (status) => {
  const progressMap = {
    'pending': 10,
    'accepted': 30,
    'ready': 60,
    'picked_up': 70,
    'on_the_way': 90,
    'delivered': 100,
    'cancelled': 0
  };
  
  return progressMap[status] || 0;
};

/**
 * üìù –ü–û–õ–£–ß–ò–¢–¨ –û–ü–ò–°–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê
 */
export const getStatusDescription = (status) => {
  const descriptions = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    'accepted': '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ, –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä',
    'picked_up': '–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑',
    'on_the_way': '–ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏ –∫ –≤–∞–º',
    'delivered': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
  };
  
  return descriptions[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
};

/**
 * ‚û°Ô∏è –ü–û–õ–£–ß–ò–¢–¨ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì
 */
export const getNextStep = (status) => {
  const nextSteps = {
    'pending': '–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    'accepted': '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏',
    'picked_up': '–ö—É—Ä—å–µ—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –∑–∞–∫–∞–∑ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    'on_the_way': '–ö—É—Ä—å–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º',
    'delivered': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ú–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–∏—Å',
    'cancelled': '–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω'
  };
  
  return nextSteps[status] || '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É';
};

// ================ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–û–ß–ò–°–¢–ö–ò ================

/**
 * üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –ö–û–†–ó–ò–ù –ò –ó–ê–ö–ê–ó–û–í
 */
export const cleanupExpiredData = async () => {
  try {
    console.log('üßπ STARTING CLEANUP OF EXPIRED DATA...');
    
    const now = new Date();
    const results = {
      expired_carts_cleaned: 0,
      expired_orders_cleaned: 0,
      stock_returned: 0,
      start_time: now
    };

    // 1. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    const expiredCarts = await Cart.find({
      status: { $in: ['active', 'abandoned'] },
      expires_at: { $lt: now }
    });

    for (const cart of expiredCarts) {
      await cart.clear();
      results.expired_carts_cleaned++;
    }

    // 2. –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ (pending –¥–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç)
    const expiredOrders = await Order.find({
      status: 'pending',
      createdAt: { $lt: new Date(now - 30 * 60 * 1000) } // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    });

    const session = await mongoose.startSession();
    await session.startTransaction();

    try {
      for (const order of expiredOrders) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
        const returnResults = await returnProductsToStock(order.items, session);
        results.stock_returned += returnResults.length;

        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        await order.cancelOrder('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ - –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è', null, 'system', '–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç');
        results.expired_orders_cleaned++;
      }

      await session.commitTransaction();
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }

    // 3. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π –≤ —Ç–æ–≤–∞—Ä–∞—Ö (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    await Product.updateMany(
      {},
      {
        $pull: {
          reservation_history: {
            $or: [
              { reserved_at: { $lt: new Date(now - 30 * 24 * 60 * 60 * 1000) } },
              { returned_at: { $lt: new Date(now - 30 * 24 * 60 * 60 * 1000) } }
            ]
          }
        }
      }
    );

    results.end_time = new Date();
    results.duration_ms = results.end_time - results.start_time;

    console.log('‚úÖ CLEANUP COMPLETED:', results);
    return results;

  } catch (error) {
    console.error('üö® CLEANUP ERROR:', error);
    throw error;
  }
};

/**
 * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–û–í–ê–†–û–í –í –ö–û–ù–ö–†–ï–¢–ù–û–ú –ó–ê–ö–ê–ó–ï
 */
export const validateOrderItems = async (orderId) => {
  try {
    console.log('üîç VALIDATE ORDER ITEMS:', { orderId });

    const order = await Order.findById(orderId);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    const validationResult = await order.validateItemsAvailability();

    return {
      order_id: orderId,
      order_number: order.order_number,
      validation_status: order.availability_validation.validation_status,
      unavailable_items: order.availability_validation.unavailable_items,
      validated_at: order.availability_validation.validated_at,
      is_valid: order.availability_validation.validation_status === 'valid'
    };

  } catch (error) {
    console.error('üö® VALIDATE ORDER ITEMS ERROR:', error);
    throw error;
  }
};

/**
 * üìä –ü–û–õ–£–ß–ò–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ó–ê–ö–ê–ó–û–í
 */
export const getOrdersStatistics = async (filters = {}) => {
  try {
    const { partnerId, courierId, customerId, period = 30 } = filters;
    
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - period);

    let matchQuery = {
      createdAt: { $gte: startDate }
    };

    if (partnerId) matchQuery.partner_id = new mongoose.Types.ObjectId(partnerId);
    if (courierId) matchQuery.courier_id = new mongoose.Types.ObjectId(courierId);
    if (customerId) matchQuery.customer_id = new mongoose.Types.ObjectId(customerId);

    const stats = await Order.aggregate([
      { $match: matchQuery },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          total_amount: { $sum: '$total_price' },
          avg_amount: { $avg: '$total_price' },
          avg_delivery_time: { $avg: '$actual_delivery_time' }
        }
      }
    ]);

    const totalOrders = await Order.countDocuments(matchQuery);
    const totalRevenue = await Order.aggregate([
      { $match: matchQuery },
      { $group: { _id: null, total: { $sum: '$total_price' } } }
    ]);

    return {
      period_days: period,
      total_orders: totalOrders,
      total_revenue: totalRevenue[0]?.total || 0,
      by_status: stats,
      generated_at: new Date()
    };

  } catch (error) {
    console.error('üö® GET ORDERS STATISTICS ERROR:', error);
    throw error;
  }
};

/**
 * üîÑ –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í –ó–ê–ö–ê–ó–û–í (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
 */
export const bulkUpdateOrderStatus = async (orderIds, newStatus, adminId, reason = '') => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();
    
    console.log('üîÑ BULK UPDATE ORDER STATUS:', { orderIds, newStatus, adminId });

    const orders = await Order.find({
      _id: { $in: orderIds }
    }).session(session);

    const results = [];

    for (const order of orders) {
      try {
        // –ï—Å–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
        if (newStatus === 'cancelled') {
          await returnProductsToStock(order.items, session);
        }

        await order.addStatusHistory(newStatus, adminId, 'admin', reason || `–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞`);
        
        results.push({
          order_id: order._id,
          order_number: order.order_number,
          old_status: order.status,
          new_status: newStatus,
          success: true
        });

      } catch (error) {
        results.push({
          order_id: order._id,
          order_number: order.order_number,
          success: false,
          error: error.message
        });
      }
    }

    await session.commitTransaction();

    console.log('‚úÖ BULK UPDATE COMPLETED:', {
      total_processed: results.length,
      successful: results.filter(r => r.success).length,
      failed: results.filter(r => !r.success).length
    });

    return {
      results,
      summary: {
        total_processed: results.length,
        successful: results.filter(r => r.success).length,
        failed: results.filter(r => !r.success).length
      }
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® BULK UPDATE ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

// ================ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ================

export default {
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  createOrderFromCart,
  getCustomerOrders,
  getOrderDetails,
  cancelCustomerOrder,
  rateCompletedOrder,
  
  // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  getRestaurantOrders,
  acceptRestaurantOrder,
  rejectRestaurantOrder,
  markRestaurantOrderReady,
  
  // –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  getAvailableOrdersForCourier,
  acceptOrderForDelivery,
  markOrderPickedUpByCourier,
  markOrderDeliveredByCourier,
  getCourierActiveOrders,
  
  // –û–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  trackOrderStatus,
  getOrderStatusOnly,
  
  // ‚úÖ –ù–û–í–´–ï –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò
  validateOrderItems,
  cleanupExpiredData,
  getOrdersStatistics,
  bulkUpdateOrderStatus,
  
  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  calculateEstimatedDeliveryTime,
  processPayment,
  processRefund,
  checkOrderAccess,
  calculateCourierEarnings,
  getOrderProgress,
  getStatusDescription,
  getNextStep,
  
  // ‚úÖ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò –ò –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–Ø
  validateProductsAvailability,
  reserveProductsStock,
  returnProductsToStock
};