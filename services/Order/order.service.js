d.toString())
      )
      .map(cartItem => {
        const product = availableProducts.find(p => p._id.toString() === cartItem.product_id.toString());
        return {
          product_id: cartItem.product_id,
          title: product.title,
          price: cartItem.product_snapshot.price,
          quantity: cartItem.quantity,
          selected_options: cartItem.selected_options || [],
          item_total: cartItem.quantity * cartItem.product_snapshot.price,
          special_requests: cartItem.special_requests || ''
        };
      });

    // –ù–û–í–û–ï: –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã
    let adjustedSubtotal = cart.pricing.subtotal;
    let adjustedServiceFee = cart.pricing.service_fee;
    let adjustedTotalPrice = cart.pricing.total_price;

    if (unavailableItems.length > 0) {
      adjustedSubtotal = orderItems.reduce((sum, item) => sum + item.item_total, 0);
      adjustedServiceFee = Math.round(adjustedSubtotal * 0.02 * 100) / 100;
      adjustedTotalPrice = adjustedSubtotal + cart.pricing.delivery_fee + adjustedServiceFee;
    }

    const newOrder = new Order({
      order_number: orderNumber,
      customer_id: customerId,
      partner_id: cart.restaurant_id,
      
      // –¢–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      items: orderItems,
      
      // –ù–û–í–´–ï –ü–û–õ–Ø: –°–Ω–∏–º–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
      items_snapshot: itemsSnapshot,
      availability_validation: {
        validated_at: new Date(),
        unavailable_items: unavailableItems,
        validation_status: unavailableItems.length === 0 ? 'valid' : 'has_issues'
      },
      
      // –°—Ç–æ–∏–º–æ—Å—Ç—å (–ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–∞—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
      subtotal: adjustedSubtotal,
      delivery_fee: cart.pricing.delivery_fee,
      service_fee: adjustedServiceFee,
      discount_amount: cart.pricing.discount_amount || 0,
      tax_amount: cart.pricing.tax_amount || 0,
      total_price: adjustedTotalPrice,
      
      // –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
      delivery_address,
      customer_contact,
      
      // –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è
      status: 'pending',
      estimated_delivery_time: estimatedDeliveryTime,
      
      // –ü–ª–∞—Ç–µ–∂
      payment_method,
      payment_status: payment_method === 'cash' ? 'pending' : 'processing',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      special_requests,
      source: 'web',
      user_agent: 'ESARGO Web App',
      
      // –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
      status_history: [{
        status: 'pending',
        timestamp: new Date(),
        updated_by: customerId,
        user_role: 'customer',
        notes: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç–æ–º'
      }]
    });

    await newOrder.save({ session });

    // 8. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂
    let paymentResult;
    if (payment_method === 'card') {
      paymentResult = await processPayment(newOrder, { session });
      newOrder.payment_status = paymentResult.success ? 'completed' : 'failed';
      newOrder.payment_details = paymentResult.details;
      await newOrder.save({ session });
    } else {
      paymentResult = {
        success: true,
        method: 'cash',
        message: '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'
      };
    }

    // –ù–û–í–û–ï: –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
    for (const product of availableProducts) {
      if (product.category === 'store' && product.stock_quantity !== undefined) {
        const orderItem = orderItems.find(item => item.product_id.toString() === product._id.toString());
        if (orderItem) {
          await Product.findByIdAndUpdate(
            product._id,
            { $inc: { stock_quantity: -orderItem.quantity } },
            { session }
          );
        }
      }
    }

    // 9. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ –∑–∞–∫–∞–∑
    await cart.convertToOrder();
    await cart.save({ session });

    // 10. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    await PartnerProfile.findByIdAndUpdate(
      cart.restaurant_id,
      { 
        $inc: { 
          'ratings.total_orders': 1,
          'business_stats.total_orders': 1
        }
      },
      { session }
    );

    await session.commitTransaction();

    console.log('‚úÖ ORDER CREATED SUCCESS:', {
      order_id: newOrder._id,
      order_number: orderNumber,
      total_price: newOrder.total_price,
      payment_status: newOrder.payment_status,
      unavailable_items_count: unavailableItems.length
    });

    // –ù–û–í–û–ï: –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
    const response = {
      order: newOrder,
      payment: paymentResult,
      estimatedDelivery: estimatedDeliveryTime
    };

    if (unavailableItems.length > 0) {
      response.warnings = {
        message: `${unavailableItems.length} —Ç–æ–≤–∞—Ä(–æ–≤) –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∑–∞–∫–∞–∑–∞`,
        unavailable_items: unavailableItems.map(item => ({
          title: item.title,
          reason: getReasonText(item.reason)
        })),
        price_adjustment: {
          original_total: cart.pricing.total_price,
          new_total: newOrder.total_price,
          saved_amount: Math.round((cart.pricing.total_price - newOrder.total_price) * 100) / 100
        }
      };
    }

    return response;

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® CREATE ORDER ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –ö–õ–ò–ï–ù–¢–ê
 */
export const getCustomerOrders = async (customerId, filters = {}) => {
  try {
    const {
      status,
      limit = 20,
      offset = 0
    } = filters;

    console.log('üìã GET CUSTOMER ORDERS:', {
      customerId,
      status,
      limit,
      offset
    });

    const query = { customer_id: customerId };
    if (status) {
      query.status = status;
    }

    const orders = await Order.find(query)
      .populate('partner_id', 'business_name brand_name category')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip(parseInt(offset));

    const total = await Order.countDocuments(query);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = await Order.aggregate([
      { $match: { customer_id: new mongoose.Types.ObjectId(customerId) } },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    const summary = {
      total_orders: total,
      by_status: statusStats.reduce((acc, stat) => {
        acc[stat._id] = stat.count;
        return acc;
      }, {})
    };

    return {
      orders,
      total,
      summary
    };

  } catch (error) {
    console.error('üö® GET CUSTOMER ORDERS ERROR:', error);
    throw error;
  }
};

/**
 * –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê
 */
export const getOrderDetails = async (orderId, userId, userRole) => {
  try {
    console.log('üîç GET ORDER DETAILS:', { orderId, userId, userRole });

    const order = await Order.findById(orderId)
      .populate('customer_id', 'email')
      .populate('partner_id', 'business_name brand_name phone email')
      .populate('courier_id', 'user_id');

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    let hasAccess = false;
    if (userRole === 'customer' && order.customer_id._id.toString() === userId.toString()) {
      hasAccess = true;
    } else if (userRole === 'partner' && order.partner_id.user_id?.toString() === userId.toString()) {
      hasAccess = true;
    } else if (userRole === 'courier' && order.courier_id?.user_id?.toString() === userId.toString()) {
      hasAccess = true;
    }

    if (!hasAccess) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç
    if (order.status === 'pending') {
      await order.validateItemsAvailability();
    }

    const canCancel = ['pending', 'accepted'].includes(order.status);
    const canRate = order.status === 'delivered' && !order.ratings?.partner_rating;

    return {
      order,
      canCancel,
      canRate,
      estimatedDelivery: order.estimated_delivery_time
    };

  } catch (error) {
    console.error('üö® GET ORDER DETAILS ERROR:', error);
    throw error;
  }
};

/**
 * –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–û–ú
 */
export const cancelCustomerOrder = async (orderId, customerId, cancellationData) => {
  try {
    const { reason = '–û—Ç–º–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º', details = '' } = cancellationData;

    console.log('‚ùå CANCEL CUSTOMER ORDER:', { orderId, customerId, reason });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (!['pending', 'accepted'].includes(order.status)) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å - –æ–Ω —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è');
    }

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await order.cancelOrder(reason, customerId, 'customer', details);

    // –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    for (const item of order.items) {
      const product = await Product.findById(item.product_id);
      if (product && product.category === 'store' && product.stock_quantity !== undefined) {
        await Product.findByIdAndUpdate(
          item.product_id,
          { $inc: { stock_quantity: item.quantity } }
        );
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    if (order.payment_status === 'completed' && order.payment_method === 'card') {
      order.payment_status = 'refunded';
      await order.save();
    }

    console.log('‚úÖ ORDER CANCELLED SUCCESS:', {
      order_number: order.order_number,
      reason
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      cancelled_at: order.cancelled_at,
      message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      refund_info: order.payment_method === 'card' ? 
        '–í–æ–∑–≤—Ä–∞—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π' : null
    };

  } catch (error) {
    console.error('üö® CANCEL ORDER ERROR:', error);
    throw error;
  }
};

/**
 * –û–¶–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 */
export const rateCompletedOrder = async (orderId, customerId, ratingData) => {
  try {
    const {
      partner_rating,
      courier_rating,
      comment = ''
    } = ratingData;

    console.log('‚≠ê RATE ORDER:', {
      orderId,
      customerId,
      partner_rating,
      courier_rating
    });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'delivered') {
      throw new Error('–ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
    }

    if (order.ratings.partner_rating) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ—Ü–µ–Ω–µ–Ω');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    if (partner_rating && (partner_rating < 1 || partner_rating > 5)) {
      throw new Error('–†–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
    }

    if (courier_rating && (courier_rating < 1 || courier_rating > 5)) {
      throw new Error('–†–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ –∑–∞–∫–∞–∑–µ
    order.ratings = {
      partner_rating: partner_rating || null,
      courier_rating: courier_rating || null,
      comment: comment.trim(),
      rated_at: new Date()
    };

    await order.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    if (partner_rating) {
      await updatePartnerRating(order.partner_id, partner_rating);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞
    if (courier_rating && order.courier_id) {
      await updateCourierRating(order.courier_id, courier_rating);
    }

    console.log('‚úÖ ORDER RATED SUCCESS:', {
      order_number: order.order_number,
      partner_rating,
      courier_rating
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      ratings: order.ratings,
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.'
    };

  } catch (error) {
    console.error('üö® RATE ORDER ERROR:', error);
    throw error;
  }
};

// ================ –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –†–ï–°–¢–û–†–ê–ù–ê
 */
export const getRestaurantOrders = async (partnerId, filters = {}) => {
  try {
    const {
      status,
      limit = 20,
      offset = 0
    } = filters;

    console.log('üè™ GET RESTAURANT ORDERS:', {
      partnerId,
      status,
      limit,
      offset
    });

    const query = { partner_id: partnerId };
    if (status) {
      query.status = status;
    }

    const orders = await Order.find(query)
      .populate('customer_id', 'email')
      .populate('courier_id', 'user_id')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip(parseInt(offset));

    const total = await Order.countDocuments(query);

    return {
      orders,
      total
    };

  } catch (error) {
    console.error('üö® GET RESTAURANT ORDERS ERROR:', error);
    throw error;
  }
};

/**
 * –ü–†–ò–ù–Ø–¢–¨ –ó–ê–ö–ê–ó –†–ï–°–¢–û–†–ê–ù–û–ú
 */
export const acceptRestaurantOrder = async (orderId, partnerId, acceptanceData) => {
  try {
    const { estimated_preparation_time = 30 } = acceptanceData;

    console.log('‚úÖ ACCEPT RESTAURANT ORDER:', {
      orderId,
      partnerId,
      estimated_preparation_time
    });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'pending') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑
    await order.addStatusHistory('accepted', partnerId, 'partner', 
      `–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${estimated_preparation_time} –º–∏–Ω—É—Ç`);

    console.log('‚úÖ ORDER ACCEPTED SUCCESS:', {
      order_number: order.order_number,
      estimated_preparation_time
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      accepted_at: order.accepted_at,
      message: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ',
      next_step: `–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${estimated_preparation_time} –º–∏–Ω—É—Ç`
    };

  } catch (error) {
    console.error('üö® ACCEPT ORDER ERROR:', error);
    throw error;
  }
};

/**
 * –û–¢–ö–õ–û–ù–ò–¢–¨ –ó–ê–ö–ê–ó –†–ï–°–¢–û–†–ê–ù–û–ú
 */
export const rejectRestaurantOrder = async (orderId, partnerId, rejectionData) => {
  try {
    const { reason, details = '' } = rejectionData;

    console.log('‚ùå REJECT RESTAURANT ORDER:', {
      orderId,
      partnerId,
      reason
    });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'pending') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await order.cancelOrder(reason, partnerId, 'partner', details);

    // –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    for (const item of order.items) {
      const product = await Product.findById(item.product_id);
      if (product && product.category === 'store' && product.stock_quantity !== undefined) {
        await Product.findByIdAndUpdate(
          item.product_id,
          { $inc: { stock_quantity: item.quantity } }
        );
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç—É –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    if (order.payment_status === 'completed' && order.payment_method === 'card') {
      order.payment_status = 'refunded';
      await order.save();
    }

    console.log('‚úÖ ORDER REJECTED SUCCESS:', {
      order_number: order.order_number,
      reason
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      cancelled_at: order.cancelled_at,
      message: '–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.'
    };

  } catch (error) {
    console.error('üö® REJECT ORDER ERROR:', error);
    throw error;
  }
};

/**
 * –ó–ê–ö–ê–ó –ì–û–¢–û–í –ö –í–´–î–ê–ß–ï
 */
export const markRestaurantOrderReady = async (orderId, partnerId) => {
  try {
    console.log('üç≥ MARK ORDER READY:', { orderId, partnerId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (!['accepted', 'preparing'].includes(order.status)) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤—ã–º - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≥–æ—Ç–æ–≤
    await order.addStatusHistory('ready', partnerId, 'partner', '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ –∫—É—Ä—å–µ—Ä—É');

    console.log('‚úÖ ORDER READY SUCCESS:', {
      order_number: order.order_number,
      ready_at: order.ready_at
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      ready_at: order.ready_at,
      message: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.'
    };

  } catch (error) {
    console.error('üö® MARK ORDER READY ERROR:', error);
    throw error;
  }
};

// ================ –ö–£–†–¨–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü–ù–´–ï –ó–ê–ö–ê–ó–´ –î–õ–Ø –ö–£–†–¨–ï–†–ê
 */
export const getAvailableOrdersForCourier = async (courierId, location = {}) => {
  try {
    const { lat = null, lng = null, radius = 10 } = location;

    console.log('üö¥ GET AVAILABLE ORDERS FOR COURIER:', {
      courierId,
      has_location: !!(lat && lng),
      radius
    });

    let orders;
    if (lat && lng) {
      orders = await Order.findAvailableOrders(lat, lng, radius);
    } else {
      orders = await Order.find({
        status: 'ready',
        courier_id: null
      }).sort({ createdAt: 1 }).limit(50);
    }

    const enrichedOrders = await Promise.all(
      orders.map(async (order) => {
        const restaurant = await PartnerProfile.findById(order.partner_id).select('business_name location');
        
        let distanceToRestaurant = null;
        let distanceToCustomer = null;
        
        if (lat && lng) {
          if (restaurant.location?.coordinates) {
            distanceToRestaurant = calculateDistance(
              lat, lng,
              restaurant.location.coordinates[1],
              restaurant.location.coordinates[0]
            );
          }
          
          distanceToCustomer = calculateDistance(
            lat, lng,
            order.delivery_address.lat,
            order.delivery_address.lng
          );
        }

        return {
          order_id: order._id,
          order_number: order.order_number,
          total_price: order.total_price,
          created_at: order.createdAt,
          estimated_delivery_time: order.estimated_delivery_time,
          
          restaurant: {
            name: restaurant.business_name,
            distance: distanceToRestaurant ? `${distanceToRestaurant.toFixed(1)} –∫–º` : null
          },
          
          delivery_address: {
            address: order.delivery_address.address,
            apartment: order.delivery_address.apartment,
            distance: distanceToCustomer ? `${distanceToCustomer.toFixed(1)} –∫–º` : null
          },
          
          customer_contact: {
            name: order.customer_contact.name,
            phone: order.customer_contact.phone
          },
          
          payment_method: order.payment_method,
          special_requests: order.special_requests,
          
          // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –∫—É—Ä—å–µ—Ä–∞
          estimated_earnings: calculateCourierEarnings(order.delivery_fee, distanceToCustomer)
        };
      })
    );

    console.log('‚úÖ GET AVAILABLE ORDERS SUCCESS:', {
      orders_found: enrichedOrders.length,
      with_geolocation: !!(lat && lng)
    });

    return {
      available_orders: enrichedOrders,
      total: enrichedOrders.length,
      location_filter: lat && lng ? { lat, lng, radius } : null
    };

  } catch (error) {
    console.error('üö® GET AVAILABLE ORDERS ERROR:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
  }
};

/**
 * –í–ó–Ø–¢–¨ –ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£
 */
export const acceptOrderForDelivery = async (orderId, courierId) => {
  try {
    console.log('üì¶ ACCEPT ORDER FOR DELIVERY:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.status !== 'ready') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∑—è—Ç–∏—è - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    if (order.courier_id) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—å–µ—Ä –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∑–∞–∫–∞–∑–æ–º
    const activeOrder = await Order.findOne({
      courier_id: courierId,
      status: { $in: ['picked_up', 'on_the_way'] }
    });

    if (activeOrder) {
      throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏');
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞
    order.courier_id = courierId;
    await order.addStatusHistory('picked_up', courierId, 'courier', '–ö—É—Ä—å–µ—Ä –≤–∑—è–ª –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É');

    console.log('‚úÖ ORDER ACCEPTED FOR DELIVERY SUCCESS:', {
      order_number: order.order_number,
      courier_id: courierId
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      message: '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω.'
    };

  } catch (error) {
    console.error('üö® ACCEPT ORDER FOR DELIVERY ERROR:', error);
    throw error;
  }
};

/**
 * –ó–ê–ë–†–ê–¢–¨ –ó–ê–ö–ê–ó –£ –†–ï–°–¢–û–†–ê–ù–ê
 */
export const markOrderPickedUpByCourier = async (orderId, courierId) => {
  try {
    console.log('üè™ MARK ORDER PICKED UP:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.courier_id.toString() !== courierId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'picked_up') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await order.addStatusHistory('on_the_way', courierId, 'courier', '–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É');

    console.log('‚úÖ ORDER PICKED UP SUCCESS:', {
      order_number: order.order_number,
      picked_up_at: order.picked_up_at
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      picked_up_at: order.picked_up_at,
      message: '–ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω! –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É.'
    };

  } catch (error) {
    console.error('üö® MARK ORDER PICKED UP ERROR:', error);
    throw error;
  }
};

/**
 * –î–û–°–¢–ê–í–ò–¢–¨ –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–£
 */
export const markOrderDeliveredByCourier = async (orderId, courierId, deliveryData) => {
  try {
    const { delivery_notes = '' } = deliveryData;

    console.log('üè† MARK ORDER DELIVERED:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.courier_id.toString() !== courierId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'on_the_way') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –¥–æ—Å—Ç–∞–≤–∏—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
    await order.addStatusHistory('delivered', courierId, 'courier', 
      delivery_notes ? `–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${delivery_notes}` : '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É—Ä—å–µ—Ä–∞
    await CourierProfile.findOneAndUpdate(
      { user_id: courierId },
      { 
        $inc: { 
          'delivery_stats.completed_deliveries': 1,
          'delivery_stats.total_earnings': calculateCourierEarnings(order.delivery_fee)
        }
      }
    );

    console.log('‚úÖ ORDER DELIVERED SUCCESS:', {
      order_number: order.order_number,
      delivered_at: order.delivered_at,
      actual_delivery_time: order.actual_delivery_time
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      delivered_at: order.delivered_at,
      actual_delivery_time: order.actual_delivery_time,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É.'
    };

  } catch (error) {
    console.error('üö® MARK ORDER DELIVERED ERROR:', error);
    throw error;
  }
};

/**
 * –ü–û–õ–£–ß–ò–¢–¨ –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´ –ö–£–†–¨–ï–†–ê
 */
export const getCourierActiveOrders = async (courierId) => {
  try {
    console.log('üö¥ GET COURIER ACTIVE ORDERS:', { courierId });

    const orders = await Order.find({
      courier_id: courierId,
      status: { $in: ['picked_up', 'on_the_way'] }
    })
    .populate('partner_id', 'business_name phone')
    .sort({ createdAt: -1 });

    return {
      active_orders: orders,
      total: orders.length
    };

  } catch (error) {
    console.error('üö® GET COURIER ACTIVE ORDERS ERROR:', error);
    throw error;
  }
};

// ================ –û–ë–©–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê
 */
export const trackOrderStatus = async (orderId, userId = null)// services/Order/order.service.js - –ü–û–õ–ù–´–ô —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
import { Order, Cart, User, PartnerProfile, CourierProfile, Product } from '../../models/index.js';
import mongoose from 'mongoose';

// ================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 */
function getReasonText(reason) {
  const reasons = {
    'product_deactivated': '—Ç–æ–≤–∞—Ä —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏',
    'out_of_stock': '–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ',
    'time_restricted': '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
    'partner_unavailable': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
  };
  return reasons[reason] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
}

function calculateEstimatedDeliveryTime(delivery_address, restaurant_location, restaurant_delivery_info) {
  // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
  let baseTime = 30; // –º–∏–Ω—É—Ç
  
  if (restaurant_delivery_info && restaurant_delivery_info.base_delivery_time) {
    baseTime = restaurant_delivery_info.base_delivery_time;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)
  const distance = calculateDistance(
    restaurant_location?.coordinates?.[1] || 48.8566,
    restaurant_location?.coordinates?.[0] || 2.3522,
    delivery_address.lat,
    delivery_address.lng
  );
  
  const additionalTime = Math.round(distance * 2); // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–º
  const totalTime = baseTime + additionalTime;
  
  return new Date(Date.now() + totalTime * 60 * 1000);
}

function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const d = R * c;
  return d;
}

function deg2rad(deg) {
  return deg * (Math.PI/180);
}

function processPayment(order, options = {}) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
  return {
    success: true,
    details: {
      transaction_id: `tx_${Date.now()}`,
      payment_processor: 'stripe',
      gateway_response: { status: 'approved' }
    }
  };
}

function calculateCourierEarnings(deliveryFee, distance) {
  // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞
  const basePay = deliveryFee * 0.8; // 80% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  const distanceBonus = distance > 5 ? (distance - 5) * 0.5 : 0;
  return Math.round((basePay + distanceBonus) * 100) / 100;
}

// ================ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –ö–û–†–ó–ò–ù–´ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 */
export const createOrderFromCart = async (customerId, sessionId, orderData) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();
    
    const {
      delivery_address,
      customer_contact,
      payment_method,
      special_requests
    } = orderData;

    console.log('üì¶ CREATE ORDER FROM CART:', {
      customerId,
      sessionId,
      payment_method,
      has_address: !!delivery_address
    });

    // 1. –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);

    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (cart.items.length === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    const minOrderAmount = cart.restaurant_info.min_order_amount || 0;
    if (cart.pricing.subtotal < minOrderAmount) {
      throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${minOrderAmount}‚Ç¨`);
    }

    // 3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
    const restaurant = await PartnerProfile.findById(cart.restaurant_id).session(session);
    if (!restaurant || !restaurant.is_active || !restaurant.is_approved) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤');
    }

    // 4. –ù–û–í–ê–Ø –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –¢–û–í–ê–†–û–í
    const productIds = cart.items.map(item => item.product_id);
    const products = await Product.find({
      _id: { $in: productIds }
    }).session(session);

    const unavailableItems = [];
    const availableProducts = [];
    const itemsSnapshot = []; // –ù–û–í–û–ï: —Å–Ω–∏–º–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞

    for (const cartItem of cart.items) {
      const product = products.find(p => p._id.toString() === cartItem.product_id.toString());
      
      if (!product) {
        unavailableItems.push({
          product_id: cartItem.product_id,
          title: cartItem.product_snapshot.title,
          reason: 'product_deactivated'
        });
        continue;
      }

      // –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
      itemsSnapshot.push({
        product_id: product._id,
        availability_at_order: {
          is_active: product.is_active,
          is_available: product.is_available,
          stock_quantity: product.stock_quantity,
          availability_schedule: product.availability_schedule
        }
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      if (!product.is_active || !product.is_available) {
        unavailableItems.push({
          product_id: product._id,
          title: product.title,
          reason: 'product_deactivated'
        });
        continue;
      }

      // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
      if (product.category === 'store' && product.stock_quantity !== undefined) {
        if (product.stock_quantity < cartItem.quantity) {
          unavailableItems.push({
            product_id: product._id,
            title: product.title,
            reason: 'out_of_stock'
          });
          continue;
        }
      }

      // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      if (product.isAvailableNow && !product.isAvailableNow()) {
        unavailableItems.push({
          product_id: product._id,
          title: product.title,
          reason: 'time_restricted'
        });
        continue;
      }

      availableProducts.push(product);
    }

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if (unavailableItems.length > 0) {
      const criticalIssues = unavailableItems.length === cart.items.length;
      
      if (criticalIssues) {
        // –í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –æ—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        throw new Error(
          `–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:\n${unavailableItems.map(item => 
            `‚Ä¢ "${item.title}" - ${getReasonText(item.reason)}`
          ).join('\n')}`
        );
      } else {
        // –ß–∞—Å—Ç–∏—á–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        console.warn('‚ö†Ô∏è PARTIAL AVAILABILITY ISSUES:', unavailableItems);
      }
    }

    // 5. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = await Order.generateOrderNumber();

    // 6. –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    const estimatedDeliveryTime = calculateEstimatedDeliveryTime(
      delivery_address,
      restaurant.location,
      restaurant.delivery_info
    );

    // 7. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    const orderItems = cart.items
      .filter(cartItem => 
        availableProducts.some(p => p._id.toString() === cartItem.product_i