// services/Order/order.service.js - –ü–û–õ–ù–´–ô —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤ –ë–ï–ó –∑–∞–≥–ª—É—à–µ–∫
import { Order, Cart, PartnerProfile, CourierProfile, User, Message } from '../../models/index.js';
import { convertCartToOrder } from '../Cart/cart.service.js';
import { createPaymentIntent, confirmPayment, refundPayment } from '../payment.stub.service.js';
import mongoose from 'mongoose';

/**
 * üì¶ –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –ö–û–†–ó–ò–ù–´
 */
export const createOrderFromCart = async (customerId, sessionId, orderData) => {
  try {
    const { delivery_address, customer_contact, payment_method, special_requests } = orderData;

    console.log('üì¶ CREATE ORDER FROM CART:', { customerId, payment_method });

    // 1. –ù–∞–π—Ç–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    const { cart } = await convertCartToOrder(customerId, sessionId);

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = await Order.generateOrderNumber();

    // 3. –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    const paymentIntent = await createPaymentIntent({
      amount: Math.round(cart.pricing.total_price * 100), // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      currency: 'EUR',
      customer_id: customerId,
      order_id: orderNumber,
      payment_method
    });

    if (paymentIntent.status === 'failed') {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: ${paymentIntent.error.message}`);
    }

    // 4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
    const paymentConfirmation = await confirmPayment(
      paymentIntent.payment_id, 
      paymentIntent.client_secret
    );

    if (paymentConfirmation.status !== 'succeeded') {
      throw new Error(`–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª: ${paymentConfirmation.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }

    // 5. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    const order = new Order({
      order_number: orderNumber,
      customer_id: customerId,
      partner_id: cart.restaurant_id,
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
      items: cart.items.map(item => ({
        product_id: item.product_id,
        title: item.product_snapshot.title,
        price: item.product_snapshot.price,
        quantity: item.quantity,
        selected_options: item.selected_options,
        item_total: item.total_item_price,
        special_requests: item.special_requests
      })),

      // –°—Ç–æ–∏–º–æ—Å—Ç—å
      subtotal: cart.pricing.subtotal,
      delivery_fee: cart.pricing.delivery_fee,
      service_fee: cart.pricing.service_fee,
      total_price: cart.pricing.total_price,

      // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
      delivery_address,

      // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      customer_contact,

      // –ü–ª–∞—Ç–µ–∂
      payment_info: {
        method: payment_method,
        status: 'completed',
        payment_id: paymentConfirmation.payment_id,
        transaction_id: paymentConfirmation.transaction_id,
        paid_at: new Date()
      },

      // –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
      estimated_delivery_time: new Date(Date.now() + 45 * 60 * 1000), // +45 –º–∏–Ω—É—Ç

      special_requests,
      source: 'web'
    });

    await order.save();

    // 6. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    await order.addStatusHistory('pending', customerId, 'customer', '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç–æ–º');

    // 7. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    await Message.createOrderUpdateMessage(
      order._id,
      cart.restaurant_id,
      'partner',
      'pending',
      'pending'
    );

    console.log('‚úÖ Order created:', {
      order_id: order._id,
      order_number: orderNumber,
      total_price: cart.pricing.total_price
    });

    return {
      order,
      payment: paymentConfirmation,
      estimatedDelivery: order.estimated_delivery_time
    };

  } catch (error) {
    console.error('üö® CREATE ORDER FROM CART Error:', error);
    throw error;
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –ö–õ–ò–ï–ù–¢–ê
 */
export const getCustomerOrders = async (customerId, options = {}) => {
  try {
    const { status, limit = 20, offset = 0 } = options;

    console.log('üìã GET CUSTOMER ORDERS:', { customerId, status, limit });

    const filter = { customer_id: customerId };
    if (status) {
      filter.status = status;
    }

    const orders = await Order.find(filter)
      .sort({ createdAt: -1 })
      .skip(offset)
      .limit(limit)
      .populate('partner_id', 'business_name category cover_image_url ratings')
      .populate('courier_id', 'first_name phone ratings');

    const total = await Order.countDocuments(filter);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    const summary = await Order.aggregate([
      { $match: { customer_id: new mongoose.Types.ObjectId(customerId) } },
      {
        $group: {
          _id: null,
          total_orders: { $sum: 1 },
          total_spent: { $sum: '$total_price' },
          delivered_orders: {
            $sum: { $cond: [{ $eq: ['$status', 'delivered'] }, 1, 0] }
          },
          cancelled_orders: {
            $sum: { $cond: [{ $eq: ['$status', 'cancelled'] }, 1, 0] }
          },
          avg_order_value: { $avg: '$total_price' }
        }
      }
    ]);

    return {
      orders,
      total,
      summary: summary[0] || { 
        total_orders: 0, 
        total_spent: 0, 
        delivered_orders: 0,
        cancelled_orders: 0,
        avg_order_value: 0
      }
    };

  } catch (error) {
    console.error('üö® GET CUSTOMER ORDERS Error:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞');
  }
};

/**
 * üîç –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê
 */
export const getOrderDetails = async (orderId, userId, userRole) => {
  try {
    console.log('üîç GET ORDER DETAILS:', { orderId, userId, userRole });

    const order = await Order.findById(orderId)
      .populate('partner_id', 'business_name category phone address location working_hours')
      .populate('courier_id', 'first_name last_name phone location ratings')
      .populate('customer_id', 'email');

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    let hasAccess = false;
    switch (userRole) {
      case 'customer':
        hasAccess = order.customer_id._id.toString() === userId.toString();
        break;
      case 'partner':
        // –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ user_id
        const partnerProfile = await PartnerProfile.findOne({ user_id: userId });
        hasAccess = partnerProfile && order.partner_id._id.toString() === partnerProfile._id.toString();
        break;
      case 'courier':
        // –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –ø–æ user_id
        const courierProfile = await CourierProfile.findOne({ user_id: userId });
        hasAccess = courierProfile && order.courier_id && order.courier_id._id.toString() === courierProfile._id.toString();
        break;
    }

    if (!hasAccess) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    const canCancel = order.canBeCancelled();
    const canRate = (userRole === 'customer' && order.status === 'delivered' && !order.ratings.rated_at);

    return {
      order,
      canCancel,
      canRate,
      estimatedDelivery: order.getTimeToDelivery()
    };

  } catch (error) {
    console.error('üö® GET ORDER DETAILS Error:', error);
    throw error;
  }
};

/**
 * ‚ùå –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó (–ö–õ–ò–ï–ù–¢)
 */
export const cancelCustomerOrder = async (orderId, customerId, reason) => {
  try {
    console.log('‚ùå CANCEL CUSTOMER ORDER:', { orderId, customerId, reason });

    const order = await Order.findById(orderId);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    if (!order.canBeCancelled()) {
      throw new Error('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å');
    }

    // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
    await order.cancelOrder(reason, customerId, 'customer');

    // –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏
    const refundResult = await refundPayment(
      order.payment_info.payment_id,
      order.total_price * 100, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      'requested_by_customer'
    );

    // –£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (order.partner_id) {
      await Message.createSystemMessage(
        order._id,
        order.partner_id,
        'partner',
        `–ó–∞–∫–∞–∑ #${order.order_number} –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`
      );
    }

    if (order.courier_id) {
      await Message.createSystemMessage(
        order._id,
        order.courier_id,
        'courier',
        `–ó–∞–∫–∞–∑ #${order.order_number} –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º`
      );
    }

    return {
      order,
      refund: refundResult,
      cancellationInfo: order.cancellation_info
    };

  } catch (error) {
    console.error('üö® CANCEL CUSTOMER ORDER Error:', error);
    throw error;
  }
};

/**
 * ‚≠ê –û–¶–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 */
export const rateCompletedOrder = async (orderId, customerId, ratingData) => {
  try {
    const { partner_rating, courier_rating, comment } = ratingData;

    console.log('‚≠ê RATE COMPLETED ORDER:', { orderId, customerId });

    const order = await Order.findById(orderId);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    if (order.status !== 'delivered') {
      throw new Error('–ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
    }

    if (order.ratings.rated_at) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω');
    }

    // –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏
    const ratingsUpdated = {};

    if (partner_rating) {
      await order.ratePartner(partner_rating);
      ratingsUpdated.partner = true;
      
      // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      await updatePartnerRating(order.partner_id, partner_rating);
    }

    if (courier_rating && order.courier_id) {
      await order.rateCourier(courier_rating);
      ratingsUpdated.courier = true;
      
      // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞
      await updateCourierRating(order.courier_id, courier_rating);
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    order.ratings.comment = comment;
    await order.save();

    return { order, ratingsUpdated };

  } catch (error) {
    console.error('üö® RATE COMPLETED ORDER Error:', error);
    throw error;
  }
};

/**
 * üè™ –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –†–ï–°–¢–û–†–ê–ù–ê
 */
export const getRestaurantOrders = async (partnerId, options = {}) => {
  try {
    const { status, limit = 20, offset = 0 } = options;

    // –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const partnerProfile = await PartnerProfile.findOne({ user_id: partnerId });
    if (!partnerProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const filter = { partner_id: partnerProfile._id };
    if (status) {
      filter.status = status;
    }

    const orders = await Order.find(filter)
      .sort({ createdAt: -1 })
      .skip(offset)
      .limit(limit)
      .populate('customer_id', 'email')
      .populate('courier_id', 'first_name last_name phone');

    const total = await Order.countDocuments(filter);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const summary = await Order.aggregate([
      { $match: { partner_id: partnerProfile._id } },
      {
        $group: {
          _id: null,
          total_orders: { $sum: 1 },
          pending_orders: {
            $sum: { $cond: [{ $eq: ['$status', 'pending'] }, 1, 0] }
          },
          preparing_orders: {
            $sum: { $cond: [{ $in: ['$status', ['accepted', 'preparing']] }, 1, 0] }
          },
          today_orders: {
            $sum: {
              $cond: [{
                $gte: ['$createdAt', new Date(new Date().setHours(0,0,0,0))]
              }, 1, 0]
            }
          },
          today_revenue: {
            $sum: {
              $cond: [{
                $and: [
                  { $gte: ['$createdAt', new Date(new Date().setHours(0,0,0,0))] },
                  { $ne: ['$status', 'cancelled'] }
                ]
              }, '$total_price', 0]
            }
          }
        }
      }
    ]);

    return {
      orders,
      total,
      summary: summary[0] || { 
        total_orders: 0, 
        pending_orders: 0,
        preparing_orders: 0,
        today_orders: 0,
        today_revenue: 0
      }
    };

  } catch (error) {
    console.error('üö® GET RESTAURANT ORDERS Error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–†–ò–ù–Ø–¢–¨ –ó–ê–ö–ê–ó (–†–ï–°–¢–û–†–ê–ù)
 */
export const acceptRestaurantOrder = async (orderId, partnerId, estimatedPrepTime) => {
  try {
    const order = await Order.findById(orderId);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    const partnerProfile = await PartnerProfile.findOne({ user_id: partnerId });
    if (!partnerProfile || order.partner_id.toString() !== partnerProfile._id.toString()) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    if (order.status !== 'pending') {
      throw new Error('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å');
    }

    // –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
    await order.addStatusHistory('accepted', partnerId, 'partner', `–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${estimatedPrepTime} –º–∏–Ω`);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const estimatedReadyAt = new Date(Date.now() + estimatedPrepTime * 60 * 1000);
    order.estimated_delivery_time = new Date(estimatedReadyAt.getTime() + 30 * 60 * 1000); // +30 –º–∏–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É

    await order.save();

    // –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    await Message.createOrderUpdateMessage(
      order._id,
      order.customer_id,
      'customer',
      'pending',
      'accepted',
      estimatedReadyAt
    );

    return {
      order,
      estimatedReadyAt
    };

  } catch (error) {
    console.error('üö® ACCEPT RESTAURANT ORDER Error:', error);
    throw error;
  }
};

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨ –ó–ê–ö–ê–ó (–†–ï–°–¢–û–†–ê–ù)
 */
export const rejectRestaurantOrder = async (orderId, partnerId, reason) => {
  try {
    const order = await Order.findById(orderId);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const partnerProfile = await PartnerProfile.findOne({ user_id: partnerId });
    if (!partnerProfile || order.partner_id.toString() !== partnerProfile._id.toString()) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    if (order.status !== 'pending') {
      throw new Error('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å');
    }

    // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
    await order.cancelOrder(reason, partnerId, 'partner', '–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º');

    // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
    const refundResult = await refundPayment(
      order.payment_info.payment_id,
      order.total_price * 100,
      'rejected_by_restaurant'
    );

    // –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    await Message.createSystemMessage(
      order._id,
      order.customer_id,
      'customer',
      `–í–∞—à –∑–∞–∫–∞–∑ #${order.order_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º. –ü—Ä–∏—á–∏–Ω–∞: ${reason}. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.`
    );

    return { order, refund: refundResult };

  } catch (error) {
    console.error('üö® REJECT RESTAURANT ORDER Error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–û–ú–ï–¢–ò–¢–¨ –ó–ê–ö–ê–ó –ì–û–¢–û–í–´–ú
 */
export const markRestaurantOrderReady = async (orderId, partnerId) => {
  try {
    const order = await Order.findById(orderId);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const partnerProfile = await PartnerProfile.findOne({ user_id: partnerId });
    if (!partnerProfile || order.partner_id.toString() !== partnerProfile._id.toString()) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    if (!['accepted', 'preparing'].includes(order.status)) {
      throw new Error('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π');
    }

    // –ü–æ–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤—ã–º
    await order.addStatusHistory('ready', partnerId, 'partner', '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ –∫—É—Ä—å–µ—Ä—É');

    // –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    await Message.createOrderUpdateMessage(
      order._id,
      order.customer_id,
      'customer',
      order.status,
      'ready'
    );

    return {
      order,
      courierSearch: { status: 'searching', message: '–ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏' }
    };

  } catch (error) {
    console.error('üö® MARK RESTAURANT ORDER READY Error:', error);
    throw error;
  }
};