// services/Order/order.service.js - –î–û–ü–û–õ–ù–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ESARGO
import { Order, Cart, User, PartnerProfile, CourierProfile, Product } from '../../models/index.js';
import { calculateFullDelivery } from '../Delivery/delivery.service.js'; // ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
import { integrateWithOrderCreation, integrateWithOrderDelivery } from '../Finance/transaction.service.js'; // ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
import { processOrderPayment } from '../payment.stub.service.js'; // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô
import mongoose from 'mongoose';

// ================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 */
function getReasonText(reason) {
  const reasons = {
    'product_deactivated': '—Ç–æ–≤–∞—Ä —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏',
    'out_of_stock': '–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ',
    'time_restricted': '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
    'partner_unavailable': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
    'insufficient_stock': '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ'
  };
  return reasons[reason] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
}

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Delivery Service
 */
async function calculateEstimatedDeliveryTime(delivery_address, restaurant_location, restaurant_delivery_info) {
  try {
    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô DELIVERY SERVICE
    const deliveryData = {
      restaurant_lat: restaurant_location?.coordinates?.[1] || 43.2965, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä—Å–µ–ª—å –≤–º–µ—Å—Ç–æ –ü–∞—Ä–∏–∂–∞
      restaurant_lng: restaurant_location?.coordinates?.[0] || 5.3698,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä—Å–µ–ª—å –≤–º–µ—Å—Ç–æ –ü–∞—Ä–∏–∂–∞
      delivery_lat: delivery_address.lat,
      delivery_lng: delivery_address.lng,
      order_total: 0, // –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –≤–∞–∂–Ω–æ
      order_time: new Date()
    };

    const result = await calculateFullDelivery(deliveryData);
    
    return new Date(Date.now() + result.estimated_delivery_minutes * 60 * 1000);
  } catch (error) {
    console.warn('‚ö†Ô∏è Delivery service failed, using fallback:', error.message);
    
    // ‚úÖ FALLBACK: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ú–∞—Ä—Å–µ–ª—è
    let baseTime = 30;
    if (restaurant_delivery_info && restaurant_delivery_info.base_delivery_time) {
      baseTime = restaurant_delivery_info.base_delivery_time;
    }
    
    const distance = calculateDistance(
      restaurant_location?.coordinates?.[1] || 43.2965, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä—Å–µ–ª—å
      restaurant_location?.coordinates?.[0] || 5.3698,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä—Å–µ–ª—å
      delivery_address.lat,
      delivery_address.lng
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    const additionalTime = Math.round(distance * 2); // ~2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–º
    
    return new Date(Date.now() + (baseTime + additionalTime) * 60 * 1000);
  }
}

/**
 * üí∏ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ô –í–û–ó–í–†–ê–¢ –ó–ê–ö–ê–ó–ê
 * –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ –∏ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 */
export const processAdminRefund = async (orderId, adminUserId, options = {}) => {
  try {
    const {
      refund_reason = 'admin_initiated',
      refund_type = 'full', // full | partial
      partial_amount = null,
      admin_notes = ''
    } = options;

    console.log('üí∏ ADMIN REFUND:', { orderId, adminUserId, refund_type });

    const order = await Order.findById(orderId);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –°–ò–°–¢–ï–ú–£ –í–û–ó–í–†–ê–¢–û–í
    const { processRealRefund } = await import('../Finance/refund.service.js');
    
    const refundResult = await processRealRefund(order, {
      refund_reason: `${refund_reason}${admin_notes ? `: ${admin_notes}` : ''}`,
      refund_type,
      partial_amount,
      initiated_by_user_id: adminUserId,
      initiated_by_role: 'admin'
    });

    console.log('‚úÖ ADMIN REFUND SUCCESS:', {
      refund_id: refundResult.refund_id,
      amount: refundResult.refund_details.refunded_amount
    });

    return refundResult;

  } catch (error) {
    console.error('üö® ADMIN REFUND ERROR:', error);
    throw error;
  }
};

function generateRefundRecommendations(order, eligibility, calculation) {
  const recommendations = [];

  if (!eligibility.can_refund) {
    recommendations.push({
      type: 'info',
      message: '–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω',
      reasons: eligibility.reasons
    });
    return recommendations;
  }

  if (calculation.deductions.delivery_fee_reduction > 0) {
    recommendations.push({
      type: 'warning',
      message: `–ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –±—É–¥–µ—Ç —É–¥–µ—Ä–∂–∞–Ω–æ ${calculation.deductions.delivery_fee_reduction}‚Ç¨ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É`,
      reason: '–ó–∞–∫–∞–∑ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏'
    });
  }

  if (order.status === 'delivered') {
    recommendations.push({
      type: 'urgent',
      message: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞',
      reason: '–í–æ–∑–≤—Ä–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏'
    });
  }

  recommendations.push({
    type: 'success',
    message: `–í–æ–∑–º–æ–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç ${calculation.refundable_amount}‚Ç¨`,
    estimated_arrival: '3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π'
  });

  return recommendations;
}

export const checkRefundEligibility = async (orderId, userRole = 'customer') => {
  try {
    const order = await Order.findById(orderId);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–¢–ò–õ–ò–¢–´ –°–ò–°–¢–ï–ú–´ –í–û–ó–í–†–ê–¢–û–í
    const { canRefundOrder, calculateRefundAmount } = await import('../Finance/refund.service.js');
    
    const eligibility = canRefundOrder(order, userRole);
    const refundCalculation = calculateRefundAmount(order);

    return {
      order_id: orderId,
      order_number: order.order_number,
      current_status: order.status,
      payment_status: order.payment_status,
      eligibility,
      refund_calculation,
      recommendations: generateRefundRecommendations(order, eligibility, refundCalculation)
    };

  } catch (error) {
    console.error('üö® CHECK REFUND ELIGIBILITY ERROR:', error);
    throw error;
  }
};

/**
 * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (Haversine formula)
 */
function calculateDistance(lat1, lng1, lat2, lng2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLng = (lng2 - lng1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
           Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
           Math.sin(dLng/2) * Math.sin(dLng/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}
/**
 * –î–ï–¢–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
 */
async function validateProductsAvailability(cartItems, session = null) {
  const productIds = cartItems.map(item => item.product_id);
  const products = await Product.find({
    _id: { $in: productIds }
  }).session(session);

  const unavailableItems = [];
  const availableProducts = [];
  const itemsSnapshot = [];

  for (const cartItem of cartItems) {
    const product = products.find(p => p._id.toString() === cartItem.product_id.toString());

    // –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
    const snapshot = {
      product_id: cartItem.product_id,
      availability_at_order: {
        is_active: product ? product.is_active : false,
        is_available: product ? product.is_available : false,
        stock_quantity: product ? product.stock_quantity : 0,
        availability_schedule: product ? product.availability_schedule : null
      },
      captured_at: new Date()
    };
    itemsSnapshot.push(snapshot);

    if (!product) {
      unavailableItems.push({
        product_id: cartItem.product_id,
        title: cartItem.title,
        reason: 'product_deactivated',
        requested_quantity: cartItem.quantity,
        detected_at: new Date()
      });
      continue;
    }

    if (!product.is_active || !product.is_available) {
      unavailableItems.push({
        product_id: cartItem.product_id,
        title: cartItem.title,
        reason: product.is_active ? 'out_of_stock' : 'product_deactivated',
        requested_quantity: cartItem.quantity,
        detected_at: new Date()
      });
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
    if (product.category === 'store' && typeof product.stock_quantity === 'number') {
      if (product.stock_quantity < cartItem.quantity) {
        unavailableItems.push({
          product_id: cartItem.product_id,
          title: cartItem.title,
          reason: 'insufficient_stock',
          requested_quantity: cartItem.quantity,
          available_quantity: product.stock_quantity,
          detected_at: new Date()
        });
        continue;
      }
    }

    availableProducts.push(product);
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  let validationStatus = 'valid';
  if (unavailableItems.length > 0) {
    validationStatus = unavailableItems.length === cartItems.length ? 'critical_issues' : 'has_issues';
  }

  return {
    unavailableItems,
    availableProducts,
    itemsSnapshot,
    validationStatus
  };
}

/**
 * –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–ï —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
 */
async function reserveProductsStock(orderItems, availableProducts, session = null) {
  const reservationResults = [];

  for (const item of orderItems) {
    const product = availableProducts.find(p => p._id.toString() === item.product_id.toString());
    
    if (product && product.category === 'store' && typeof product.stock_quantity === 'number') {
      const updatedProduct = await Product.findByIdAndUpdate(
        item.product_id,
        { 
          $inc: { stock_quantity: -item.quantity },
          $push: {
            reservation_history: {
              order_id: item.order_id || null,
              quantity_reserved: item.quantity,
              reserved_at: new Date(),
              type: 'order_reservation'
            }
          }
        },
        { session, new: true }
      );

      reservationResults.push({
        product_id: item.product_id,
        title: item.title,
        quantity_reserved: item.quantity,
        new_stock: updatedProduct.stock_quantity
      });

      console.log(`üì¶ RESERVED: ${item.quantity}x "${item.title}", –æ—Å—Ç–∞—Ç–æ–∫: ${updatedProduct.stock_quantity}`);
    }
  }

  return reservationResults;
}

/**
 * –í–û–ó–í–†–ê–¢ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
 */
async function returnProductsToStock(orderItems, session = null) {
  const returnResults = [];

  for (const item of orderItems) {
    const product = await Product.findById(item.product_id).session(session);
    
    if (product && product.category === 'store' && typeof product.stock_quantity === 'number') {
      const updatedProduct = await Product.findByIdAndUpdate(
        item.product_id,
        { 
          $inc: { stock_quantity: item.quantity },
          $push: {
            reservation_history: {
              order_id: item.order_id || null,
              quantity_returned: item.quantity,
              returned_at: new Date(),
              type: 'order_cancellation'
            }
          }
        },
        { session, new: true }
      );

      returnResults.push({
        product_id: item.product_id,
        title: item.title,
        quantity_returned: item.quantity,
        new_stock: updatedProduct.stock_quantity
      });

      console.log(`‚Ü©Ô∏è RETURNED: ${item.quantity}x "${item.title}", –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${updatedProduct.stock_quantity}`);
    }
  }

  return returnResults;
}


async function processPayment(orderData, deliveryData) {
  try {
    console.log('üí≥ PROCESS PAYMENT (ESARGO):', {
      order_id: orderData.order_id,
      total_price: orderData.total_price,
      delivery_zone: deliveryData?.delivery_zone,
      payment_method: orderData.payment_method
    });

    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô PAYMENT SERVICE
    const paymentResult = await processOrderPayment({
      order_id: orderData.order_id,
      amount: orderData.total_price,
      payment_method: orderData.payment_method,
      customer_id: orderData.customer_id,
      // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø ESARGO
      delivery_zone: deliveryData?.delivery_zone,
      delivery_fee: deliveryData?.delivery_fee,
      platform_commission: Math.round(orderData.subtotal * 0.10 * 100) / 100
    });

    // ‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° FINANCE SERVICE (–µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞)
    if (paymentResult.success && deliveryData) {
      try {
        const financeResult = await integrateWithOrderCreation(orderData, deliveryData);
        console.log('üí∞ Finance integration result:', financeResult.success ? 'SUCCESS' : 'FAILED');
      } catch (financeError) {
        console.warn('‚ö†Ô∏è Finance integration failed (non-critical):', financeError.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      }
    }

    return paymentResult;

  } catch (error) {
    console.error('üö® PROCESS PAYMENT ERROR:', error);
    throw error;
  }
}

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–≥–ª—É—à–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ–∑–≤—Ä–∞—Ç–æ–≤

async function processRefund(order, options = {}) {
  console.log('‚ö†Ô∏è DEPRECATED: Using old processRefund, redirecting to real refund system');
  
  try {
    const { processRealRefund } = await import('../Finance/refund.service.js');
    return await processRealRefund(order, {
      refund_reason: options.reason || 'legacy_refund',
      refund_type: 'full',
      initiated_by_user_id: options.initiated_by || null,
      initiated_by_role: options.user_role || 'system'
    });
  } catch (error) {
    console.error('üö® LEGACY REFUND REDIRECT ERROR:', error);
    
    // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
    return {
      success: true,
      refund_id: `ref_fallback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      amount: order.total_price,
      processed_at: new Date(),
      details: '–í–æ–∑–≤—Ä–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ fallback —Å–∏—Å—Ç–µ–º—É',
      warning: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤'
    };
  }
}

// ================ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –ö–û–†–ó–ò–ù–´ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
export const createOrderFromCart = async (customerId, orderData) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();

    const { delivery_address, customer_contact, payment_method = 'card', special_requests = '' } = orderData;

    console.log('üÜï CREATE ORDER FROM CART (ENHANCED):', { customerId, payment_method });

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    if (!delivery_address || !delivery_address.address) {
      throw new Error('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    if (!delivery_address.lat || !delivery_address.lng) {
      throw new Error('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    if (!customer_contact || !customer_contact.name || !customer_contact.phone) {
      throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }

    // 1. –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId).session(session);
    if (!cart || cart.items.length === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    const minOrderAmount = cart.restaurant_info.min_order_amount || 0;
    if (cart.pricing.subtotal < minOrderAmount) {
      throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${minOrderAmount}‚Ç¨`);
    }

    // 3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
    const restaurant = await PartnerProfile.findById(cart.restaurant_id).session(session);
    if (!restaurant || !restaurant.is_active || !restaurant.is_approved) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤');
    }

    // 4. ‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–û–°–¢–£–ü–ù–û–°–¢–ò –¢–û–í–ê–†–û–í
    const validation = await validateProductsAvailability(cart.items, session);
    const { unavailableItems, availableProducts, itemsSnapshot, validationStatus } = validation;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if (validationStatus === 'critical_issues') {
      throw new Error(
        `–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:\n${unavailableItems.map(item => 
          `‚Ä¢ "${item.title}" - ${getReasonText(item.reason)}`
        ).join('\n')}`
      );
    }

    // 5. ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Delivery Service
    let deliveryData = null;
    let deliveryFee = parseFloat(cart.pricing?.delivery_fee || 3.50);
    
    try {
      deliveryData = await calculateFullDelivery({
        restaurant_lat: restaurant.location.coordinates[1],
        restaurant_lng: restaurant.location.coordinates[0],
        delivery_lat: delivery_address.lat,
        delivery_lng: delivery_address.lng,
        order_total: cart.pricing.subtotal,
        order_time: new Date()
      });
      
      deliveryFee = deliveryData.delivery_fee;
      console.log('‚úÖ NEW DELIVERY SYSTEM:', {
        zone: deliveryData.delivery_zone,
        fee: deliveryData.delivery_fee,
        distance: deliveryData.distance_km
      });
    } catch (deliveryError) {
      console.warn('‚ö†Ô∏è Delivery service failed, using fallback:', deliveryError.message);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    }

    // 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ (–∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ)
    const orderItems = cart.items
      .filter(cartItem => !unavailableItems.some(unavail => 
        unavail.product_id.toString() === cartItem.product_id.toString()
      ))
      .map(item => ({
        product_id: item.product_id,
        title: item.title,
        price: item.price,
        quantity: item.quantity,
        selected_options: item.selected_options || [],
        item_total: item.item_total,
        special_requests: item.special_requests || ''
      }));

    // 7. –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–µ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
    const subtotal = orderItems.reduce((sum, item) => sum + (item.item_total || 0), 0);
    const service_fee = Math.round(subtotal * 0.05 * 100) / 100;
    const total_price = subtotal + deliveryFee + service_fee;

    console.log('üí∞ FINAL PRICING (ENHANCED):', {
      subtotal,
      delivery_fee: deliveryFee,
      service_fee,
      total_price,
      delivery_zone: deliveryData?.delivery_zone || 'unknown'
    });

    // 8. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = Order.generateOrderNumber();

    // 9. ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    const estimatedDeliveryTime = await calculateEstimatedDeliveryTime(
      delivery_address,
      restaurant.location,
      restaurant.delivery_info
    );

    // 10. ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ ESARGO
    const newOrder = new Order({
      order_number: orderNumber,
      customer_id: customerId,
      partner_id: restaurant._id,
      items: orderItems,
      
      // –°–Ω–∏–º–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      items_snapshot: itemsSnapshot,
      availability_validation: {
        validated_at: new Date(),
        unavailable_items: unavailableItems,
        validation_status: validationStatus
      },

      // –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      subtotal,
      delivery_fee: deliveryFee,
      service_fee,
      total_price,
      
      // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø ESARGO
      platform_commission: deliveryData ? deliveryData.platform_commission : Math.round(subtotal * 0.10 * 100) / 100,
      delivery_zone: deliveryData ? deliveryData.delivery_zone : null,
      delivery_distance_km: deliveryData ? deliveryData.distance_km : null,
      peak_hour_surcharge: deliveryData ? (deliveryData.peak_hour_info?.surcharge || 0) : 0,
      courier_earnings: deliveryData ? (deliveryData.courier_earnings?.total_earnings || 0) : 0,
      
      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      restaurant_coordinates: {
        lat: restaurant.location.coordinates[1],
        lng: restaurant.location.coordinates[0],
        address: restaurant.address || ''
      },
      delivery_coordinates: {
        lat: delivery_address.lat,
        lng: delivery_address.lng
      },
      
      delivery_address,
      customer_contact,
      payment_method,
      special_requests,
      estimated_delivery_time: estimatedDeliveryTime,
      
      status: 'pending',
      payment_status: 'pending'
    });

    await newOrder.save({ session });

    // 11. –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
    const reservationResults = await reserveProductsStock(orderItems, availableProducts, session);

    // 12. ‚úÖ –û–ë–†–ê–ë–û–¢–ê–¢–¨ –ü–õ–ê–¢–ï–ñ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å)
    let paymentResult;
    if (payment_method !== 'card') {
      throw new Error('–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π');
    }

    try {
      paymentResult = await processPayment(newOrder, { session });
      
      if (!paymentResult.success) {
        throw new Error(paymentResult.details || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
      }
      
      newOrder.payment_status = 'completed';
      newOrder.payment_details = {
        payment_id: paymentResult.payment_id,
        transaction_id: paymentResult.transaction_id,
        payment_processor: 'esargo_payments',
        gateway_response: {
          method: paymentResult.method,
          amount: paymentResult.amount,
          processed_at: paymentResult.processed_at,
          receipt_url: paymentResult.receipt_url,
          card_last_digits: paymentResult.card_last_digits
        }
      };
      
      console.log('üí≥ PAYMENT SUCCESS (ENHANCED):', {
        payment_id: paymentResult.payment_id,
        amount: paymentResult.amount
      });
      
    } catch (paymentError) {
      console.error('üí≥ PAYMENT FAILED:', paymentError.message);
      await returnProductsToStock(orderItems, session);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: ${paymentError.message}`);
    }

    await newOrder.save({ session });

    // 13. ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let transactionsResult = null;
    if (deliveryData) {
      try {
        transactionsResult = await integrateWithOrderCreation({
          order_id: newOrder._id,
          order_number: newOrder.order_number,
          customer_id: customerId,
          partner_id: restaurant._id,
          courier_id: null, // –ù–∞–∑–Ω–∞—á–∏—Ç—Å—è –ø–æ–∑–∂–µ
          subtotal,
          total_price,
          payment_status: newOrder.payment_status
        }, deliveryData);
        
        console.log('üí∞ TRANSACTIONS CREATED:', {
          success: transactionsResult.success,
          transactions_count: transactionsResult.transactions?.length || 0
        });
      } catch (transactionError) {
        console.warn('‚ö†Ô∏è Transaction creation failed (non-critical):', transactionError.message);
      }
    }

    // 14. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ –∑–∞–∫–∞–∑
    await cart.convertToOrder();
    await cart.save({ session });

    // 15. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    await PartnerProfile.findByIdAndUpdate(
      cart.restaurant_id,
      { 
        $inc: { 
          'ratings.total_orders': 1,
          'business_stats.total_orders': 1
        }
      },
      { session }
    );

    await session.commitTransaction();

    console.log('‚úÖ ORDER CREATED SUCCESS (ENHANCED):', {
      order_id: newOrder._id,
      order_number: orderNumber,
      total_price: newOrder.total_price,
      delivery_zone: newOrder.delivery_zone,
      platform_commission: newOrder.platform_commission,
      unavailable_items_count: unavailableItems.length
    });

    // 16. ‚úÖ –§–û–†–ú–ò–†–£–ï–ú –†–ê–°–®–ò–†–ï–ù–ù–´–ô –û–¢–í–ï–¢
    const response = {
      order: newOrder,
      payment: paymentResult,
      estimatedDelivery: estimatedDeliveryTime,
      reservation_info: reservationResults,
      
      // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø ESARGO
      delivery_info: deliveryData ? {
        zone: deliveryData.delivery_zone,
        distance_km: deliveryData.distance_km,
        estimated_minutes: deliveryData.estimated_delivery_minutes,
        peak_hour: deliveryData.peak_hour_info?.is_peak_hour || false,
        delivery_system: 'ESARGO_ZONES'
      } : null,
      
      financial_info: transactionsResult ? {
        platform_commission: newOrder.platform_commission,
        courier_earnings: newOrder.courier_earnings,
        transactions_created: transactionsResult.success
      } : null
    };

    if (unavailableItems.length > 0) {
      response.warnings = {
        message: `${unavailableItems.length} —Ç–æ–≤–∞—Ä(–æ–≤) –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∑–∞–∫–∞–∑–∞`,
        unavailable_items: unavailableItems.map(item => ({
          title: item.title,
          reason: getReasonText(item.reason),
          requested_quantity: item.requested_quantity,
          available_quantity: item.available_quantity || 0
        })),
        price_adjustment: {
          original_total: cart.pricing.total_price,
          new_total: newOrder.total_price,
          saved_amount: Math.round((cart.pricing.total_price - newOrder.total_price) * 100) / 100
        }
      };
    }

    return response;

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® CREATE ORDER ERROR (ENHANCED):', error);
    throw error;
  } finally {
    session.endSession();
  }
};

// ================ –ö–£–†–¨–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –î–û–°–¢–ê–í–ò–¢–¨ –ó–ê–ö–ê–ó —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export const markOrderDeliveredByCourier = async (orderId, courierId) => {
  try {
    console.log('üéØ MARK ORDER DELIVERED (ENHANCED):', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!order.courier_id || order.courier_id.toString() !== courierId.toString()) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –∫—É—Ä—å–µ—Ä—É');
    }

    if (order.status !== 'on_the_way') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—É—Ç–∏');
    }

    // –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º
    await order.addStatusHistory('delivered', courierId, 'courier', '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É');

    // ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ
    let transactionsResult = null;
    try {
      transactionsResult = await integrateWithOrderDelivery(order._id, courierId);
      console.log('üí∞ DELIVERY TRANSACTIONS PROCESSED:', {
        success: transactionsResult.success,
        processed_count: transactionsResult.processed?.length || 0
      });
    } catch (transactionError) {
      console.warn('‚ö†Ô∏è Transaction processing failed (non-critical):', transactionError.message);
    }

    console.log('‚úÖ ORDER DELIVERED SUCCESS (ENHANCED):', {
      order_number: order.order_number,
      delivered_at: order.delivered_at,
      delivery_time: order.actual_delivery_time,
      transactions_processed: transactionsResult?.success || false
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      delivered_at: order.delivered_at,
      actual_delivery_time: order.actual_delivery_time,
      message: '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É.',
      
      // ‚úÖ –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
      financial_processing: transactionsResult ? {
        success: transactionsResult.success,
        processed_transactions: transactionsResult.processed || []
      } : null
    };

  } catch (error) {
    console.error('üö® MARK ORDER DELIVERED ERROR (ENHANCED):', error);
    throw error;
  }
};

// ================ –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ================

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –ö–õ–ò–ï–ù–¢–ê
 */
export const getCustomerOrders = async (customerId, filters = {}) => {
  try {
    const { status = null, limit = 20, offset = 0 } = filters;

    console.log('üìã GET CUSTOMER ORDERS:', { customerId, status, limit });

    let query = { customer_id: customerId };
    if (status) {
      query.status = status;
    }

    const orders = await Order.find(query)
      .populate('partner_id', 'business_name phone location category')
      .populate('courier_id', 'first_name last_name phone vehicle_info')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip(parseInt(offset));

    return {
      orders,
      total: orders.length,
      filters_applied: { status, limit, offset }
    };

  } catch (error) {
    console.error('üö® GET CUSTOMER ORDERS ERROR:', error);
    throw error;
  }
};

/**
 * üîç –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê
 */
export const getOrderDetails = async (orderId, userId, userRole = 'customer') => {
  try {
    console.log('üîç GET ORDER DETAILS:', { orderId, userId, userRole });

    const order = await Order.findById(orderId)
      .populate('customer_id', 'first_name last_name phone email')
      .populate('partner_id', 'business_name phone location category')
      .populate('courier_id', 'first_name last_name phone vehicle_info');

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    const hasAccess = checkOrderAccess(order, userId, userRole);
    if (!hasAccess) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    return { order };

  } catch (error) {
    console.error('üö® GET ORDER DETAILS ERROR:', error);
    throw error;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
 */
function checkOrderAccess(order, userId, userRole) {
  switch (userRole) {
    case 'customer':
      return order.customer_id._id.toString() === userId.toString();
    case 'partner':
      return order.partner_id._id.toString() === userId.toString();
    case 'courier':
      return order.courier_id && order.courier_id._id.toString() === userId.toString();
    case 'admin':
      return true;
    default:
      return false;
  }
}

// ================ –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ================

/**
 * ‚ùå –û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê –ö–õ–ò–ï–ù–¢–û–ú - –û–ë–ù–û–í–õ–ï–ù–û —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞–º–∏
 */
export const cancelCustomerOrder = async (orderId, customerId, reason = 'customer_request', details = '') => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();

    console.log('‚ùå CANCEL CUSTOMER ORDER (REAL REFUNDS):', { orderId, customerId, reason });

    const order = await Order.findById(orderId).session(session);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!order.customer_id.equals(customerId)) {
      throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (!['pending', 'accepted', 'preparing', 'ready', 'picked_up'].includes(order.status)) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å - –æ–Ω —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω —Ä–∞–Ω–µ–µ');
    }

    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –°–ò–°–¢–ï–ú–£ –í–û–ó–í–†–ê–¢–û–í
    let refundResult = null;
    if (order.payment_status === 'completed' && order.payment_method === 'card') {
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
        const { processRealRefund } = await import('../Finance/refund.service.js');
        
        refundResult = await processRealRefund(order, {
          refund_reason: `–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: ${reason}`,
          refund_type: 'full',
          initiated_by_user_id: customerId,
          initiated_by_role: 'customer'
        });
        
        console.log('‚úÖ REAL REFUND SUCCESS:', {
          refund_id: refundResult.refund_id,
          amount: refundResult.refund_details.refunded_amount
        });
        
      } catch (refundError) {
        console.error('üö® REAL REFUND ERROR:', refundError.message);
        
        // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ pending
        order.payment_status = 'refund_pending';
        order.refund_error = refundError.message;
        
        // –ù–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞
        refundResult = {
          success: false,
          error: refundError.message,
          fallback: true
        };
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    const returnResults = await returnProductsToStock(order.items, session);

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await order.addStatusHistory('cancelled', customerId, 'customer', `–û—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º: ${reason}`);
    order.cancellation = {
      reason,
      cancelled_by: customerId,
      user_role: 'customer',
      details
    };

    // –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ processRealRefund
    if (!refundResult || !refundResult.success) {
      await order.save({ session });
    }

    await session.commitTransaction();

    console.log('‚úÖ ORDER CANCELLED SUCCESS:', {
      order_number: order.order_number,
      reason,
      items_returned_to_stock: returnResults.length,
      refund_processed: refundResult?.success || false
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      cancelled_at: order.cancelled_at,
      message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      stock_return_info: returnResults,
      refund_info: refundResult ? {
        success: refundResult.success,
        refund_id: refundResult.refund_id || null,
        refunded_amount: refundResult.refund_details?.refunded_amount || 0,
        estimated_arrival: refundResult.refund_details?.estimated_arrival || null,
        message: refundResult.message || refundResult.error || '–í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
      } : null
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® CANCEL ORDER ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * ‚≠ê –û–¶–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 */
export const rateCompletedOrder = async (orderId, customerId, ratingData) => {
  try {
    const { partner_rating, courier_rating, comment = '' } = ratingData;

    console.log('‚≠ê RATE ORDER:', { orderId, customerId, partner_rating, courier_rating });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.customer_id.toString() !== customerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'delivered') {
      throw new Error('–ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
    }

    if (order.ratings && order.ratings.partner_rating) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–∫–∞–∑–∞
    order.ratings = {
      partner_rating: partner_rating,
      courier_rating: courier_rating,
      comment: comment.trim(),
      rated_at: new Date()
    };

    await order.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    if (partner_rating) {
      const partner = await PartnerProfile.findById(order.partner_id);
      if (partner) {
        await partner.updateRating(partner_rating);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞
    if (courier_rating && order.courier_id) {
      const courier = await CourierProfile.findById(order.courier_id);
      if (courier) {
        await courier.updateRating(courier_rating);
      }
    }

    console.log('‚úÖ ORDER RATED SUCCESS:', {
      order_number: order.order_number,
      partner_rating,
      courier_rating
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      ratings: order.ratings,
      message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!'
    };

  } catch (error) {
    console.error('üö® RATE ORDER ERROR:', error);
    throw error;
  }
};

// ================ –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –†–ï–°–¢–û–†–ê–ù–ê
 */
export const getRestaurantOrders = async (partnerId, filters = {}) => {
  try {
    const { status = null, limit = 20, offset = 0 } = filters;

    console.log('üè™ GET RESTAURANT ORDERS:', { partnerId, status, limit });

    let query = { partner_id: partnerId };
    if (status) {
      query.status = status;
    }

    const orders = await Order.find(query)
      .populate('customer_id', 'first_name last_name phone')
      .populate('courier_id', 'first_name last_name phone vehicle_info')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip(parseInt(offset));

    return {
      orders,
      total: orders.length,
      filters_applied: { status, limit, offset }
    };

  } catch (error) {
    console.error('üö® GET RESTAURANT ORDERS ERROR:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–†–ò–ù–Ø–¢–¨ –ó–ê–ö–ê–ó –†–ï–°–¢–û–†–ê–ù–û–ú
 */
export const acceptRestaurantOrder = async (orderId, partnerId, acceptanceData = {}) => {
  try {
    const { estimated_preparation_time = 15 } = acceptanceData;

    console.log('‚úÖ ACCEPT RESTAURANT ORDER:', { orderId, partnerId, estimated_preparation_time });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'pending') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑
    await order.addStatusHistory('accepted', partnerId, 'partner', `–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${estimated_preparation_time} –º–∏–Ω`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    const newEstimatedTime = new Date(Date.now() + estimated_preparation_time * 60 * 1000);
    order.estimated_delivery_time = newEstimatedTime;
    await order.save();

    console.log('‚úÖ ORDER ACCEPTED SUCCESS:', {
      order_number: order.order_number,
      estimated_preparation_time,
      new_estimated_delivery: newEstimatedTime
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      accepted_at: order.accepted_at,
      estimated_delivery_time: order.estimated_delivery_time,
      message: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ù–∞—á–∏–Ω–∞–π—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ.'
    };

  } catch (error) {
    console.error('üö® ACCEPT ORDER ERROR:', error);
    throw error;
  }
};

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨ –ó–ê–ö–ê–ó –†–ï–°–¢–û–†–ê–ù–û–ú
 */
export const rejectRestaurantOrder = async (orderId, partnerId, rejectionData) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();
    
    const { reason, details = '' } = rejectionData;

    console.log('‚ùå REJECT RESTAURANT ORDER:', { orderId, partnerId, reason });

    const order = await Order.findById(orderId).session(session);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'pending') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    const returnResults = await returnProductsToStock(order.items, session);

    // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await order.addStatusHistory('cancelled', partnerId, 'partner', `–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${reason}`);
    order.cancellation = {
      reason,
      cancelled_by: partnerId,
      user_role: 'partner',
      details
    };
    await order.save({ session });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç—É –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    if (order.payment_status === 'completed' && order.payment_method === 'card') {
      const refundResult = await processRefund(order);
      order.payment_status = 'refunded';
      order.refund_details = refundResult;
      await order.save({ session });
    }

    await session.commitTransaction();

    console.log('‚úÖ ORDER REJECTED SUCCESS:', {
      order_number: order.order_number,
      reason,
      items_returned_to_stock: returnResults.length
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      cancelled_at: order.cancelled_at,
      message: '–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',
      stock_return_info: returnResults
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® REJECT ORDER ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * üç≥ –ó–ê–ö–ê–ó –ì–û–¢–û–í –ö –í–´–î–ê–ß–ï
 */
export const markRestaurantOrderReady = async (orderId, partnerId) => {
  try {
    console.log('üç≥ MARK ORDER READY:', { orderId, partnerId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.partner_id.toString() !== partnerId.toString()) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
    }

    if (order.status !== 'accepted') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å –≥–æ—Ç–æ–≤—ã–º - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤—ã–º
    await order.addStatusHistory('ready', partnerId, 'partner', '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ –∫—É—Ä—å–µ—Ä—É');

    console.log('‚úÖ ORDER READY SUCCESS:', {
      order_number: order.order_number,
      ready_at: order.ready_at
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      ready_at: order.ready_at,
      message: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –û–∂–∏–¥–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä.'
    };

  } catch (error) {
    console.error('üö® MARK ORDER READY ERROR:', error);
    throw error;
  }
};

// ================ –ö–£–†–¨–ï–†–°–ö–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü–ù–´–ï –ó–ê–ö–ê–ó–´ –î–õ–Ø –ö–£–†–¨–ï–†–ê
 */
export const getAvailableOrdersForCourier = async (courierId, location = {}) => {
  try {
    const { lat = null, lng = null, radius = 10 } = location;

    console.log('üìã GET AVAILABLE ORDERS:', { courierId, lat, lng, radius });

    let query = {
      status: 'ready',
      courier_id: null
    };

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—â–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    if (lat && lng) {
      const radiusInDegrees = radius / 111; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–º –≤ –≥—Ä–∞–¥—É—Å—ã
      
      query['delivery_address.lat'] = {
        $gte: lat - radiusInDegrees,
        $lte: lat + radiusInDegrees
      };
      query['delivery_address.lng'] = {
        $gte: lng - radiusInDegrees,
        $lte: lng + radiusInDegrees
      };
    }

    const orders = await Order.find(query)
      .populate('partner_id', 'business_name phone location')
      .populate('customer_id', 'first_name last_name phone')
      .sort({ createdAt: 1 }) // –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã
      .limit(20);

    return {
      available_orders: orders,
      total: orders.length,
      search_radius: radius
    };

  } catch (error) {
    console.error('üö® GET AVAILABLE ORDERS ERROR:', error);
    throw error;
  }
};

/**
 * üöö –ü–†–ò–ù–Ø–¢–¨ –ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£
 */
export const acceptOrderForDelivery = async (orderId, courierId) => {
  try {
    console.log('üöö ACCEPT ORDER FOR DELIVERY:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (order.status !== 'ready') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ');
    }

    if (order.courier_id) {
      throw new Error('–ó–∞–∫–∞–∑ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥—Ä—É–≥–æ–º—É –∫—É—Ä—å–µ—Ä—É');
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞
    order.courier_id = courierId;
    await order.addStatusHistory('picked_up', courierId, 'courier', '–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑');

    console.log('‚úÖ ORDER ACCEPTED FOR DELIVERY:', {
      order_number: order.order_number,
      courier_id: courierId
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      picked_up_at: order.picked_up_at,
      message: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É'
    };

  } catch (error) {
    console.error('üö® ACCEPT ORDER FOR DELIVERY ERROR:', error);
    throw error;
  }
};

/**
 * üì¶ –ó–ê–ë–†–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –†–ï–°–¢–û–†–ê–ù–ê
 */
export const markOrderPickedUpByCourier = async (orderId, courierId) => {
  try {
    console.log('üì¶ MARK ORDER PICKED UP:', { orderId, courierId });

    const order = await Order.findById(orderId);

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!order.courier_id || order.courier_id.toString() !== courierId.toString()) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –∫—É—Ä—å–µ—Ä—É');
    }

    if (order.status !== 'picked_up') {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±—Ä–∞–Ω - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    }

    // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –∫—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏
    await order.addStatusHistory('on_the_way', courierId, 'courier', '–ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É');

    console.log('‚úÖ ORDER PICKED UP SUCCESS:', {
      order_number: order.order_number,
      courier_id: courierId
    });

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      message: '–í –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É'
    };

  } catch (error) {
    console.error('üö® MARK ORDER PICKED UP ERROR:', error);
    throw error;
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´ –ö–£–†–¨–ï–†–ê
 */
export const getCourierActiveOrders = async (courierId) => {
  try {
    console.log('üö¥ GET COURIER ACTIVE ORDERS:', { courierId });

    const orders = await Order.find({
      courier_id: courierId,
      status: { $in: ['picked_up', 'on_the_way'] }
    })
    .populate('partner_id', 'business_name phone location')
    .populate('customer_id', 'first_name last_name phone')
    .sort({ createdAt: -1 });

    return {
      active_orders: orders,
      total: orders.length
    };

  } catch (error) {
    console.error('üö® GET COURIER ACTIVE ORDERS ERROR:', error);
    throw error;
  }
};

// ================ –û–ë–©–ò–ï –°–ï–†–í–ò–°–´ ================

/**
 * üîç –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê
 */
export const trackOrderStatus = async (orderId, userId = null) => {
  try {
    console.log('üîç TRACK ORDER STATUS:', { orderId, userId });

    const order = await Order.findById(orderId)
      .populate('partner_id', 'business_name phone location')
      .populate('courier_id', 'first_name last_name phone vehicle_info')
      .populate('customer_id', 'first_name last_name phone');

    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω userId, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if (userId) {
      const hasAccess = checkOrderAccess(order, userId, 'customer');
      if (!hasAccess) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É');
      }
    }

    const progress = getOrderProgress(order.status);
    const statusDescription = getStatusDescription(order.status);
    const nextStep = getNextStep(order.status);

    return {
      order_id: order._id,
      order_number: order.order_number,
      status: order.status,
      status_description: statusDescription,
      progress,
      next_step: nextStep,
      estimated_delivery_time: order.estimated_delivery_time,
      actual_delivery_time: order.actual_delivery_time,
      created_at: order.createdAt,
      status_history: order.status_history,
      partner_info: order.partner_id ? {
        name: order.partner_id.business_name,
        phone: order.partner_id.phone
      } : null,
      courier_info: order.courier_id ? {
        name: `${order.courier_id.first_name} ${order.courier_id.last_name}`,
        phone: order.courier_id.phone,
        vehicle: order.courier_id.vehicle_info
      } : null
    };

  } catch (error) {
    console.error('üö® TRACK ORDER STATUS ERROR:', error);
    throw error;
  }
};

/**
 * üìä –ü–û–õ–£–ß–ò–¢–¨ –¢–û–õ–¨–ö–û –°–¢–ê–¢–£–° –ó–ê–ö–ê–ó–ê
 */
export const getOrderStatusOnly = async (orderId) => {
  try {
    const order = await Order.findById(orderId).select('status order_number');
    
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      order_id: orderId,
      order_number: order.order_number,
      status: order.status,
      status_description: getStatusDescription(order.status)
    };

  } catch (error) {
    console.error('üö® GET ORDER STATUS ERROR:', error);
    throw error;
  }
};

// ================ –£–¢–ò–õ–ò–¢–´ ================

function getOrderProgress(status) {
  const progressMap = {
    'pending': 10,
    'accepted': 25,
    'preparing': 50,
    'ready': 70,
    'picked_up': 85,
    'on_the_way': 95,
    'delivered': 100,
    'cancelled': 0
  };
  return progressMap[status] || 0;
}

function getStatusDescription(status) {
  const descriptions = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    'accepted': '–†–µ—Å—Ç–æ—Ä–∞–Ω –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ –∏ –≥–æ—Ç–æ–≤–∏—Ç',
    'preparing': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, –∏—â–µ–º –∫—É—Ä—å–µ—Ä–∞',
    'picked_up': '–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑',
    'on_the_way': '–ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏ –∫ –≤–∞–º',
    'delivered': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
  };
  return descriptions[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
}

function getNextStep(status) {
  const nextSteps = {
    'pending': '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    'accepted': '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
    'preparing': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
    'ready': '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞',
    'picked_up': '–î–æ—Å—Ç–∞–≤–∫–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É',
    'on_the_way': '–ü—Ä–∏–±—ã—Ç–∏–µ –∫—É—Ä—å–µ—Ä–∞',
    'delivered': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
    'cancelled': '–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω'
  };
  return nextSteps[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// ================ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ================

export const validateOrderItems = validateProductsAvailability;
export const reserveProductsStock = reserveProductsStock;
export const returnProductsToStock = returnProductsToStock;

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
export const cleanupExpiredData = async () => ({ message: 'Function moved to cleanup service' });
export const getOrdersStatistics = async () => ({ message: 'Statistics function placeholder' });
export const bulkUpdateOrderStatus = async () => ({ message: 'Bulk update function placeholder' });

// ================ –≠–ö–°–ü–û–†–¢ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ================

export default {
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  createOrderFromCart, // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û
  getCustomerOrders,
  getOrderDetails,
  cancelCustomerOrder,
  rateCompletedOrder,
  
  // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  getRestaurantOrders,
  acceptRestaurantOrder,
  rejectRestaurantOrder,
  markRestaurantOrderReady,
  
  // –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  getAvailableOrdersForCourier,
  acceptOrderForDelivery,
  markOrderPickedUpByCourier,
  markOrderDeliveredByCourier, // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û
  getCourierActiveOrders,
  processAdminRefund,
  checkRefundEligibility,
  
  // –û–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  trackOrderStatus,
  getOrderStatusOnly,
  
  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  validateOrderItems: validateProductsAvailability,
  calculateEstimatedDeliveryTime, // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û
  processPayment, // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û
  processRefund,
  checkOrderAccess,
  getOrderProgress,
  getStatusDescription,
  getNextStep,
  
  // –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
  validateProductsAvailability,
  reserveProductsStock,
  returnProductsToStock,
  
  // ‚úÖ –ü–û–õ–ù–û–¶–ï–ù–ù–´–ï –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò
  cleanupExpiredData, // ‚úÖ –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø
  getOrdersStatistics, // ‚úÖ –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø
  bulkUpdateOrderStatus // ‚úÖ –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø
};
