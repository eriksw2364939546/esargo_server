// services/customer.service.js - –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏
import { CustomerProfile, User } from '../models/index.js';
import { hashString, validateEmail, validatePhone, encryptString, decryptString } from '../utils/index.js';
import bcrypt from 'bcrypt';
import mongoose from 'mongoose';

// ================ –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
const validateProfileUpdate = (updateData) => {
  const errors = [];

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
  if (updateData.first_name !== undefined) {
    if (!updateData.first_name || updateData.first_name.trim().length === 0) {
      errors.push('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    } else if (updateData.first_name.trim().length < 2) {
      errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏
  if (updateData.last_name !== undefined) {
    if (!updateData.last_name || updateData.last_name.trim().length === 0) {
      errors.push('–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
    } else if (updateData.last_name.trim().length < 2) {
      errors.push('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  if (updateData.phone !== undefined) {
    if (!validatePhone(updateData.phone)) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–∞
  if (updateData.language !== undefined) {
    const allowedLanguages = ['ru', 'fr', 'en'];
    if (!allowedLanguages.includes(updateData.language)) {
      errors.push('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫. –î–æ—Å—Ç—É–ø–Ω—ã: ru, fr, en');
    }
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

// ================ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–ï–†–í–ò–°–ê ================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {object} - –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
 */
export const getCustomerProfile = async (userId) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const user = await User.findById(userId).select('-password_hash');
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (user.role !== 'customer') {
      throw new Error('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤');
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // üîê –†–ê–°–®–ò–§–†–û–í–´–í–ê–ï–ú email –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let displayEmail = '[EMAIL_PROTECTED]';
    try {
      displayEmail = decryptString(user.email);
    } catch (error) {
      console.warn('Could not decrypt email for profile display');
      displayEmail = '[EMAIL_DECRYPT_ERROR]';
    }
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const decryptedProfile = {
      ...profile.toObject(),
      phone: profile.phone ? decryptString(profile.phone) : null
    };

    return {
      user: {
        _id: user._id,
        email: displayEmail,
        role: user.role,
        is_active: user.is_active,
        created_at: user.created_at,
        updated_at: user.updated_at
      },
      profile: decryptedProfile
    };

  } catch (error) {
    console.error('Get customer profile error:', error);
    throw error;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
 */
export const updateCustomerProfile = async (userId, updateData) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –í–ê–õ–ò–î–ê–¶–ò–Ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validation = validateProfileUpdate(updateData);
    if (!validation.isValid) {
      const error = new Error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      error.validationErrors = validation.errors;
      throw error;
    }

    const user = await User.findById(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const userUpdateData = {};
    const profileUpdateData = {};

    // –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    if (updateData.current_password && updateData.new_password) {
      const isCurrentPasswordValid = await bcrypt.compare(updateData.current_password, user.password_hash);
      if (!isCurrentPasswordValid) {
        const error = new Error('–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω');
        error.validationErrors = ['–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω'];
        throw error;
      }

      if (updateData.new_password.length < 6) {
        const error = new Error('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        error.validationErrors = ['–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'];
        throw error;
      }

      userUpdateData.password_hash = await hashString(updateData.new_password);
    }

    // –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è
    if (updateData.first_name !== undefined) {
      profileUpdateData.first_name = updateData.first_name.trim();
    }

    if (updateData.last_name !== undefined) {
      profileUpdateData.last_name = updateData.last_name.trim();
    }

    if (updateData.phone !== undefined) {
      profileUpdateData.phone = encryptString(updateData.phone);
    }

    if (updateData.avatar_url !== undefined) {
      profileUpdateData.avatar_url = updateData.avatar_url;
    }

    // –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (updateData.language !== undefined) {
      if (!profileUpdateData.preferences) {
        const currentProfile = await CustomerProfile.findOne({ user_id: userId });
        profileUpdateData.preferences = currentProfile.preferences || {};
      }
      profileUpdateData['preferences.language'] = updateData.language;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (Object.keys(userUpdateData).length > 0) {
      await User.findByIdAndUpdate(userId, userUpdateData);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedProfile = await CustomerProfile.findOneAndUpdate(
      { user_id: userId },
      profileUpdateData,
      { new: true, runValidators: false }
    );

    if (!updatedProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return await getCustomerProfile(userId);

  } catch (error) {
    console.error('Update customer profile error:', error);
    throw error;
  }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
export const deleteCustomerProfile = async (userId) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const user = await User.findById(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (user.role !== 'customer') {
      throw new Error('–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤');
    }

    // –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ Order —Å–µ—Ä–≤–∏—Å
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
    const deletedProfile = await CustomerProfile.findOneAndDelete({ user_id: userId });
    if (!deletedProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
    await User.findByIdAndUpdate(userId, { 
      is_active: false,
      email: encryptString(`deleted_${Date.now()}_${user.email}`)
    });

    console.log('‚úÖ Customer profile deleted:', { userId });
    return true;

  } catch (error) {
    console.error('Delete customer profile error:', error);
    throw error;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} - –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
 */
export const customerProfileExists = async (userId) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return false;
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    return !!profile;

  } catch (error) {
    console.error('Check customer profile exists error:', error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
 */
export const getCustomerStats = async (userId) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      // ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–î–†–ï–°–ê–ú (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
      addresses: {
        total_count: profile.saved_addresses?.length || 0,
        has_default: profile.saved_addresses?.some(addr => addr.is_default) || false,
        zones_used: [...new Set(profile.saved_addresses?.map(addr => addr.delivery_info?.zone).filter(Boolean))] || [],
        most_used_zone: profile.saved_addresses?.reduce((acc, addr) => {
          const zone = addr.delivery_info?.zone;
          if (zone) acc[zone] = (acc[zone] || 0) + (addr.delivery_info?.order_count || 0);
          return acc;
        }, {})
      },
      
      // ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–ö–ê–ó–ê–ú
      orders: profile.order_stats || {
        total_orders: 0,
        total_spent: 0,
        avg_rating_given: 0
      },
      
      // ‚úÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–†–û–§–ò–õ–Ø
      profile_activity: {
        is_active: profile.is_active,
        created_at: profile.created_at,
        last_updated: profile.updated_at,
        days_since_registration: Math.floor((Date.now() - profile.created_at) / (1000 * 60 * 60 * 24))
      }
    };

  } catch (error) {
    console.error('Get customer stats error:', error);
    throw error;
  }
};

// ================ –≠–ö–°–ü–û–†–¢ ================

export default {
  getCustomerProfile,
  updateCustomerProfile,
  deleteCustomerProfile,
  customerProfileExists,
  getCustomerStats
};

// ‚úÖ –£–î–ê–õ–ï–ù–´ –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò: addDeliveryAddress –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å delivery_addresses
// –¢–µ–ø–µ—Ä—å –≤—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏ –≤ services/Address/address.service.js