// services/customer.service.js (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
import { User, CustomerProfile } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { cryptoString, decryptString } from '../utils/crypto.js';
import { hashString, hashMeta } from '../utils/hash.js';
import mongoose from 'mongoose';

/**
 * –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–ê
 */

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {object} profileData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
 * @param {boolean} isUpdate - –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
const validateCustomerProfileData = (profileData, isUpdate = false) => {
  const { first_name, last_name, phone, preferred_language } = profileData;
  const errors = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
  if (!isUpdate || first_name !== undefined) {
    if (!first_name || typeof first_name !== 'string' || first_name.trim().length === 0) {
      errors.push('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    } else if (first_name.trim().length < 2) {
      errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
    } else if (first_name.trim().length > 50) {
      errors.push('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–º–∏–ª–∏–∏
  if (!isUpdate || last_name !== undefined) {
    if (!last_name || typeof last_name !== 'string' || last_name.trim().length === 0) {
      errors.push('–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    } else if (last_name.trim().length < 2) {
      errors.push('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
    } else if (last_name.trim().length > 50) {
      errors.push('–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
  if (phone !== undefined && phone !== null && phone !== '') {
    // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +33 –∏–ª–∏ 0, –∑–∞—Ç–µ–º 9 —Ü–∏—Ñ—Ä
    const phoneRegex = /^(?:(?:\+33|0)[1-9](?:[0-9]{8}))$/;
    const normalizedPhone = phone.replace(/[\s\-\.]/g, '');
    
    if (!phoneRegex.test(normalizedPhone)) {
      errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: +33XXXXXXXXX –∏–ª–∏ 0XXXXXXXXX)');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
  if (preferred_language !== undefined) {
    const allowedLanguages = ['ru', 'fr', 'en'];
    if (!allowedLanguages.includes(preferred_language)) {
      errors.push('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫. –î–æ—Å—Ç—É–ø–Ω—ã: ru, fr, en');
    }
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
 * @param {object} addressData - –î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
const validateDeliveryAddress = (addressData) => {
  const { label, address, lat, lng } = addressData;
  const errors = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∫–∏
  const allowedLabels = ['–î–æ–º', '–†–∞–±–æ—Ç–∞', '–î—Ä—É–≥–æ–µ'];
  if (!label || !allowedLabels.includes(label)) {
    errors.push('–ú–µ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã: –î–æ–º, –†–∞–±–æ—Ç–∞, –î—Ä—É–≥–æ–µ');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
  if (!address || typeof address !== 'string' || address.trim().length === 0) {
    errors.push('–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
  } else if (address.trim().length < 10) {
    errors.push('–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  if (typeof lat !== 'number' || lat < -90 || lat > 90) {
    errors.push('–ù–µ–≤–µ—Ä–Ω–∞—è —à–∏—Ä–æ—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç -90 –¥–æ 90)');
  }
  if (typeof lng !== 'number' || lng < -180 || lng > 180) {
    errors.push('–ù–µ–≤–µ—Ä–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç -180 –¥–æ 180)');
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

/**
 * –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–ï–†–í–ò–°–ê
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û - —Å–∫—Ä—ã–≤–∞–µ–º email –≤ —Å–µ—Ä–≤–∏—Å–µ)
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {object} - –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
 */
export const getCustomerProfile = async (userId) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const user = await User.findById(userId).select('-password_hash');
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (user.role !== 'customer') {
      throw new Error('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤');
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // üîê –†–ê–°–®–ò–§–†–û–í–´–í–ê–ï–ú email –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ)
    let displayEmail = '[EMAIL_PROTECTED]';
    try {
      displayEmail = decryptString(user.email);
    } catch (error) {
      console.warn('Could not decrypt email for profile display');
      displayEmail = '[EMAIL_DECRYPT_ERROR]';
    }
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const decryptedProfile = {
      ...profile.toObject(),
      phone: profile.phone ? decryptString(profile.phone) : null
    };

    return {
      user: {
        id: user._id,
        email: displayEmail, // ‚úÖ Email –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å –≤ User –º–æ–¥–µ–ª–∏
        role: user.role,
        is_email_verified: user.is_email_verified,
        is_active: user.is_active
      },
      profile: decryptedProfile
    };

  } catch (error) {
    console.error('Get customer profile error:', error);
    throw error;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
 */
export const updateCustomerProfile = async (userId, updateData) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const user = await User.findById(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (user.role !== 'customer') {
      throw new Error('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤');
    }

    // –í–ê–õ–ò–î–ê–¶–ò–Ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    const validation = validateCustomerProfileData(updateData, true);
    if (!validation.isValid) {
      const error = new Error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      error.validationErrors = validation.errors;
      throw error;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è User –º–æ–¥–µ–ª–∏
    const userUpdateData = {};
    const profileUpdateData = {};

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ email (–µ—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
    if (updateData.email && updateData.email !== user.email) {
      const normalizedEmail = updateData.email.toLowerCase().trim();
      
      // üîê –í–ê–õ–ò–î–ê–¶–ò–Ø email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(normalizedEmail)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π email —á–µ—Ä–µ–∑ Meta
      const hashedNewEmail = hashMeta(normalizedEmail);
      const existingMeta = await Meta.findOne({
        em: hashedNewEmail,
        role: 'customer',
        customer: { $ne: userId }
      });

      if (existingMeta) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      // üîê –ó–ê–®–ò–§–†–û–í–´–í–ê–ï–ú –Ω–æ–≤—ã–π email (–∫–∞–∫ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ)
      userUpdateData.email = cryptoString(normalizedEmail);
      userUpdateData.is_email_verified = false;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º Meta –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º email
      await Meta.findOneAndUpdate(
        { customer: userId, role: 'customer' },
        { em: hashedNewEmail }
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è
    if (updateData.password) {
      // –í–ê–õ–ò–î–ê–¶–ò–Ø –ø–∞—Ä–æ–ª—è
      if (updateData.password.length < 6) {
        throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      }
      if (updateData.password.length > 128) {
        throw new Error('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 128 —Å–∏–º–≤–æ–ª–æ–≤');
      }
      
      userUpdateData.password_hash = await hashString(updateData.password);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è —Å –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ï–ô
    if (updateData.first_name !== undefined) {
      profileUpdateData.first_name = updateData.first_name.trim();
    }

    if (updateData.last_name !== undefined) {
      profileUpdateData.last_name = updateData.last_name.trim();
    }

    if (updateData.phone !== undefined) {
      if (updateData.phone) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —à–∏—Ñ—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        const normalizedPhone = updateData.phone.replace(/[\s\-\.]/g, '');
        profileUpdateData.phone = cryptoString(normalizedPhone);
      } else {
        profileUpdateData.phone = null;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (updateData.settings) {
      const currentProfile = await CustomerProfile.findOne({ user_id: userId });
      profileUpdateData.settings = {
        ...currentProfile?.settings?.toObject(),
        ...updateData.settings
      };
      
      // –í–ê–õ–ò–î–ê–¶–ò–Ø —è–∑—ã–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
      if (updateData.settings.preferred_language) {
        const allowedLanguages = ['ru', 'fr', 'en'];
        if (!allowedLanguages.includes(updateData.settings.preferred_language)) {
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫. –î–æ—Å—Ç—É–ø–Ω—ã: ru, fr, en');
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (Object.keys(userUpdateData).length > 0) {
      await User.findByIdAndUpdate(userId, userUpdateData);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedProfile = await CustomerProfile.findOneAndUpdate(
      { user_id: userId },
      profileUpdateData,
      { new: true, runValidators: false }
    );

    if (!updatedProfile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return await getCustomerProfile(userId);

  } catch (error) {
    console.error('Update customer profile error:', error);
    throw error;
  }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {object} addressData - –î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
 * @returns {object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
 */
export const addDeliveryAddress = async (userId, addressData) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –í–ê–õ–ò–î–ê–¶–ò–Ø –∞–¥—Ä–µ—Å–∞
    const validation = validateDeliveryAddress(addressData);
    if (!validation.isValid) {
      const error = new Error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞');
      error.validationErrors = validation.errors;
      throw error;
    }

    const profile = await CustomerProfile.findOne({ user_id: userId });
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–¥—Ä–µ—Å–æ–≤
    if (profile.delivery_addresses.length >= 5) {
      throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤: 5');
    }

    // –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å, –¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–º
    const isFirstAddress = profile.delivery_addresses.length === 0;
    const newAddress = {
      label: addressData.label,
      address: addressData.address.trim(),
      lat: addressData.lat,
      lng: addressData.lng,
      is_default: isFirstAddress || addressData.is_default || false
    };

    // –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ—Å–Ω–æ–≤–Ω–æ–π, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    if (newAddress.is_default) {
      profile.delivery_addresses.forEach(addr => {
        addr.is_default = false;
      });
    }

    profile.delivery_addresses.push(newAddress);
    await profile.save();

    return await getCustomerProfile(userId);

  } catch (error) {
    console.error('Add delivery address error:', error);
    throw error;
  }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
export const deleteCustomerProfile = async (userId) => {
  const session = await mongoose.startSession();
  
  try {
    console.log('üîç DELETE CUSTOMER ACCOUNT:', { userId });
    
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const user = await User.findById(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (user.role !== 'customer') {
      throw new Error('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤');
    }

    let cleanupInfo = {
      user_deleted: false,
      meta_deleted: false,
      profile_deleted: false,
      orders_deleted: 0,
      reviews_deleted: 0,
      messages_deleted: 0
    };

    // üîê –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–∫–∞–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
    await session.withTransaction(async () => {
      // 1. –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ–ª—å Order)
      try {
        const { Order } = await import('../models/index.js');
        const deleteOrdersResult = await Order.deleteMany({ 
          customer_id: userId 
        }, { session });
        cleanupInfo.orders_deleted = deleteOrdersResult.deletedCount;
      } catch (error) {
        console.log('Order model not found or no orders to delete');
      }

      // 2. –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ–ª—å Review)
      try {
        const { Review } = await import('../models/index.js');
        const deleteReviewsResult = await Review.deleteMany({ 
          customer_id: userId 
        }, { session });
        cleanupInfo.reviews_deleted = deleteReviewsResult.deletedCount;
      } catch (error) {
        console.log('Review model not found or no reviews to delete');
      }

      // 3. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ–ª—å Message)
      try {
        const { Message } = await import('../models/index.js');
        const deleteMessagesResult = await Message.deleteMany({ 
          customer_id: userId 
        }, { session });
        cleanupInfo.messages_deleted = deleteMessagesResult.deletedCount;
      } catch (error) {
        console.log('Message model not found or no messages to delete');
      }

      // 4. –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      const profileResult = await CustomerProfile.findOneAndDelete({ 
        user_id: userId 
      }, { session });
      cleanupInfo.profile_deleted = !!profileResult;

      // 5. –£–¥–∞–ª—è–µ–º Meta –∑–∞–ø–∏—Å—å (–í–ê–ñ–ù–û!)
      const metaResult = await Meta.findOneAndDelete({ 
        customer: userId,
        role: 'customer'
      }, { session });
      cleanupInfo.meta_deleted = !!metaResult;

      // 6. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await User.findByIdAndDelete(userId, { session });
      cleanupInfo.user_deleted = !!userResult;
    });

    console.log('‚úÖ CUSTOMER ACCOUNT DELETED:', cleanupInfo);

    return {
      deleted_customer: {
        id: userId,
        deleted_at: new Date()
      },
      cleanup_info: cleanupInfo
    };

  } catch (error) {
    console.error('üö® DELETE CUSTOMER ACCOUNT ERROR:', error);
    throw error;
  } finally {
    await session.endSession();
  }
};