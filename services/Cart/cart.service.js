// services/Cart/cart.service.js - –°–µ—Ä–≤–∏—Å—ã –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫
import { Cart, Product, PartnerProfile } from '../../models/index.js';
import mongoose from 'mongoose';

/**
 * üîç –ù–ê–ô–¢–ò –ò–õ–ò –°–û–ó–î–ê–¢–¨ –ö–û–†–ó–ò–ù–£
 */
export const findOrCreateCart = async (customerId, sessionId) => {
  try {
    console.log('üîç FIND OR CREATE CART:', { customerId, sessionId });

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let cart = await Cart.findActiveCart(customerId, sessionId);

    if (!cart) {
      console.log('üìù No active cart found');
      return { cart: null };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
    await cart.updateActivity();

    console.log('‚úÖ Active cart found:', {
      cart_id: cart._id,
      items_count: cart.items.length,
      total_price: cart.pricing.total_price
    });

    return { cart };

  } catch (error) {
    console.error('üö® FIND OR CREATE CART Error:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
  }
};

/**
 * ‚ûï –î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† –í –ö–û–†–ó–ò–ù–£
 */
export const addItemToCart = async (customerId, sessionId, itemData) => {
  try {
    const { product_id, quantity, selected_options, special_requests } = itemData;

    console.log('‚ûï ADD ITEM TO CART:', {
      customerId,
      product_id,
      quantity,
      options_count: selected_options.length
    });

    // 1. –ù–∞–π—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
    const product = await Product.findById(product_id);
    if (!product) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!product.is_active || !product.is_available) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞');
    }

    // 2. –ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    const restaurant = await PartnerProfile.findById(product.partner_id);
    if (!restaurant) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!restaurant.is_active || !restaurant.is_approved) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // 3. –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
    let cart = await Cart.findActiveCart(customerId, sessionId);

    if (cart) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
      if (cart.restaurant_id.toString() !== restaurant._id.toString()) {
        throw new Error('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –æ–¥–Ω—É –∫–æ—Ä–∑–∏–Ω—É. –û—á–∏—Å—Ç–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑.');
      }
    } else {
      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É
      cart = new Cart({
        customer_id: customerId,
        session_id: sessionId,
        restaurant_id: restaurant._id,
        restaurant_info: {
          name: restaurant.business_name,
          category: restaurant.category,
          delivery_fee: 3.50, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
          min_order_amount: 15.00 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
        }
      });
    }

    // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    let validatedOptions = [];
    if (restaurant.category === 'restaurant' && selected_options.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–ø—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥—É–∫—Ç–µ
      validatedOptions = selected_options.filter(option => {
        return product.options_groups?.some(group => 
          group.options.some(opt => 
            opt.name === option.option_name && 
            group.name === option.group_name
          )
        );
      });
    }

    // 5. –°–æ–∑–¥–∞—Ç—å snapshot –ø—Ä–æ–¥—É–∫—Ç–∞
    const product_snapshot = {
      title: product.title,
      price: product.price,
      image_url: product.image_url || '',
      category: product.category
    };

    // 6. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    const addResult = await cart.addItem({
      product_id: product._id,
      product_snapshot,
      quantity,
      selected_options: validatedOptions,
      special_requests
    });

    console.log('‚úÖ Item added to cart:', {
      cart_id: cart._id,
      total_items: cart.total_items,
      subtotal: cart.pricing.subtotal
    });

    return {
      cart,
      addedItem: cart.items[cart.items.length - 1],
      isNewItem: true
    };

  } catch (error) {
    console.error('üö® ADD ITEM TO CART Error:', error);
    throw error;
  }
};

/**
 * ‚úèÔ∏è –û–ë–ù–û–í–ò–¢–¨ –¢–û–í–ê–† –í –ö–û–†–ó–ò–ù–ï
 */
export const updateCartItemService = async (customerId, sessionId, itemId, updateData) => {
  try {
    console.log('‚úèÔ∏è UPDATE CART ITEM:', { customerId, itemId, updateData });

    // –ù–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const item = cart.items.id(itemId);
    if (!item) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
    await cart.updateItem(itemId, updateData);

    console.log('‚úÖ Cart item updated:', {
      item_id: itemId,
      new_quantity: item.quantity,
      new_total: item.total_item_price
    });

    return {
      cart,
      updatedItem: item
    };

  } catch (error) {
    console.error('üö® UPDATE CART ITEM Error:', error);
    throw error;
  }
};

/**
 * ‚ùå –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–† –ò–ó –ö–û–†–ó–ò–ù–´
 */
export const removeItemFromCart = async (customerId, sessionId, itemId) => {
  try {
    console.log('‚ùå REMOVE ITEM FROM CART:', { customerId, itemId });

    // –ù–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä
    const item = cart.items.id(itemId);
    if (!item) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
    }

    const removedItem = { ...item.toObject() };

    // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
    await cart.removeItem(itemId);

    console.log('‚úÖ Item removed from cart:', {
      item_id: itemId,
      remaining_items: cart.items.length
    });

    return {
      cart: cart.items.length > 0 ? cart : null,
      removedItem
    };

  } catch (error) {
    console.error('üö® REMOVE ITEM FROM CART Error:', error);
    throw error;
  }
};

/**
 * üóëÔ∏è –û–ß–ò–°–¢–ò–¢–¨ –ö–û–†–ó–ò–ù–£
 */
export const clearUserCart = async (customerId, sessionId) => {
  try {
    console.log('üóëÔ∏è CLEAR USER CART:', { customerId });

    // –ù–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const clearedItemsCount = cart.items.length;
    const savedAmount = cart.pricing.total_price;

    // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    await cart.clear();

    console.log('‚úÖ Cart cleared:', {
      cleared_items: clearedItemsCount,
      saved_amount: savedAmount
    });

    return {
      clearedItemsCount,
      savedAmount
    };

  } catch (error) {
    console.error('üö® CLEAR USER CART Error:', error);
    throw error;
  }
};

/**
 * üöö –†–ê–°–°–ß–ò–¢–ê–¢–¨ –î–û–°–¢–ê–í–ö–£
 */
export const calculateDeliveryForCart = async (customerId, sessionId, deliveryAddress) => {
  try {
    const { lat, lng, address } = deliveryAddress;

    console.log('üöö CALCULATE DELIVERY:', { customerId, lat, lng });

    // –ù–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (cart.items.length === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }

    // –ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    const restaurant = await PartnerProfile.findById(cart.restaurant_id);
    if (!restaurant) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    const restaurantLat = restaurant.location?.coordinates?.[1] || 48.8566;
    const restaurantLng = restaurant.location?.coordinates?.[0] || 2.3522;

    const distance = calculateDistance(restaurantLat, restaurantLng, lat, lng);

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
    let deliveryFee = 3.50; // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    let estimatedTime = 30; // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö

    if (distance > 5) {
      deliveryFee += (distance - 5) * 0.50; // +0.50‚Ç¨ –∑–∞ –∫–∞–∂–¥—ã–π –∫–º —Å–≤—ã—à–µ 5–∫–º
      estimatedTime += Math.round(distance * 2); // +2 –º–∏–Ω –∑–∞ –∫–º
    }

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ 2‚Ç¨, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 8‚Ç¨
    deliveryFee = Math.max(2.00, Math.min(8.00, deliveryFee));
    deliveryFee = Math.round(deliveryFee * 100) / 100; // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç–æ–≤

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    await cart.setDeliveryInfo({
      address,
      lat,
      lng,
      distance_km: Math.round(distance * 100) / 100,
      estimated_delivery_time: estimatedTime,
      delivery_fee: deliveryFee
    });

    console.log('‚úÖ Delivery calculated:', {
      distance: `${distance.toFixed(1)}km`,
      fee: `${deliveryFee}‚Ç¨`,
      time: `${estimatedTime} –º–∏–Ω`
    });

    return {
      cart,
      distance,
      deliveryFee,
      estimatedTime
    };

  } catch (error) {
    console.error('üö® CALCULATE DELIVERY Error:', error);
    throw error;
  }
};

/**
 * üîÑ –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–¢–¨ –ö–û–†–ó–ò–ù–£ –í –ó–ê–ö–ê–ó
 */
export const convertCartToOrder = async (customerId, sessionId) => {
  try {
    console.log('üîÑ CONVERT CART TO ORDER:', { customerId });

    // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (cart.items.length === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    if (!cart.meets_minimum_order) {
      throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ ${cart.restaurant_info.min_order_amount}‚Ç¨`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã
    for (const item of cart.items) {
      const product = await Product.findById(item.product_id);
      if (!product || !product.is_available) {
        throw new Error(`–¢–æ–≤–∞—Ä "${item.product_snapshot.title}" –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ —Å—Ç–∞—Ç—É—Å "converted_to_order"
    await cart.convertToOrder();

    console.log('‚úÖ Cart converted to order');

    return { cart };

  } catch (error) {
    console.error('üö® CONVERT CART TO ORDER Error:', error);
    throw error;
  }
};

// ================ –£–¢–ò–õ–ò–¢–´ ================

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ Haversine)
 */
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const d = R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
  return d;
}

function deg2rad(deg) {
  return deg * (Math.PI/180);
}