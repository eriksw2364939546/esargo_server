// services/Cart/cart.service.js - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ESARGO –¥–æ—Å—Ç–∞–≤–∫–∏
import { Cart, Product, PartnerProfile } from '../../models/index.js';
import { updateCartDeliveryInfo } from '../Delivery/delivery.service.js'; // ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
import mongoose from 'mongoose';

/**
 * üîç –ù–ê–ô–¢–ò –ò–õ–ò –°–û–ó–î–ê–¢–¨ –ö–û–†–ó–ò–ù–£
 */
export const findOrCreateCart = async (customerId, sessionId) => {
  try {
    console.log('üîç FIND OR CREATE CART:', { customerId, sessionId });

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let cart = await Cart.findActiveCart(customerId, sessionId);

    if (!cart) {
      console.log('üìù No active cart found');
      return { cart: null };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
    await cart.updateActivity();

    console.log('‚úÖ Active cart found:', {
      cart_id: cart._id,
      items_count: cart.items.length,
      total_price: cart.pricing.total_price
    });

    return { cart };

  } catch (error) {
    console.error('üö® FIND OR CREATE CART Error:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
  }
};

/**
 * ‚ûï –î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† –í –ö–û–†–ó–ò–ù–£
 */
export const addItemToCart = async (customerId, sessionId, itemData) => {
  try {
    const { product_id, quantity, selected_options, special_requests } = itemData;

    console.log('‚ûï ADD ITEM TO CART:', {
      customerId,
      product_id,
      quantity,
      options_count: selected_options.length
    });

    // 1. –ù–∞–π—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
    const product = await Product.findById(product_id);
    if (!product) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!product.is_active || !product.is_available) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞');
    }

    // 2. –ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    const restaurant = await PartnerProfile.findById(product.partner_id);
    if (!restaurant) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!restaurant.is_active || !restaurant.is_approved) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // 3. –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
    let cart = await Cart.findActiveCart(customerId, sessionId);

    if (cart) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
      if (cart.restaurant_id.toString() !== restaurant._id.toString()) {
        throw new Error('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –æ–¥–Ω—É –∫–æ—Ä–∑–∏–Ω—É. –û—á–∏—Å—Ç–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑.');
      }
    } else {
      // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
      const activeZones = restaurant.getActiveDeliveryZones();
      const minOrderAmount = activeZones.length > 0 ? activeZones[0].min_order_amount : 30;
      
      cart = new Cart({
        customer_id: customerId,
        session_id: sessionId,
        restaurant_id: restaurant._id,
        restaurant_info: {
          name: restaurant.business_name,
          category: restaurant.category,
          delivery_fee: 0, // ‚úÖ –ë–£–î–ï–¢ –†–ê–°–°–ß–ò–¢–ê–ù–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
          min_order_amount: minOrderAmount // ‚úÖ –ò–ó –ù–ê–°–¢–†–û–ï–ö –†–ï–°–¢–û–†–ê–ù–ê
        }
      });
    }

    // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    let validatedOptions = [];
    if (restaurant.category === 'restaurant' && selected_options.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–ø—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥—É–∫—Ç–µ
      validatedOptions = selected_options.filter(option => {
        return product.options_groups?.some(group => 
          group.options.some(opt => 
            opt.name === option.option_name && 
            group.name === option.group_name
          )
        );
      });
    }

    // 5. –°–æ–∑–¥–∞—Ç—å snapshot –ø—Ä–æ–¥—É–∫—Ç–∞
    const product_snapshot = {
      title: product.title,
      price: product.price,
      image_url: product.image_url || '',
      category: product.category
    };

    // 6. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    const basePrice = product.price;
    const optionsPrice = validatedOptions.reduce((sum, opt) => sum + (opt.option_price || 0), 0);
    const itemTotal = (basePrice + optionsPrice) * quantity;

    // 7. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    const cartItem = {
      product_id,
      product_snapshot,
      title: product.title,
      price: basePrice,
      quantity,
      selected_options: validatedOptions,
      special_requests: special_requests || '',
      item_total: itemTotal
    };

    const isNewItem = await cart.addItem(cartItem);

    console.log('‚úÖ Item added to cart:', {
      is_new_item: isNewItem,
      item_total: itemTotal,
      cart_total: cart.pricing.total_price
    });

    return {
      cart,
      addedItem: cartItem,
      isNewItem
    };

  } catch (error) {
    console.error('üö® ADD ITEM TO CART Error:', error);
    throw error;
  }
};

/**
 * ‚úèÔ∏è –û–ë–ù–û–í–ò–¢–¨ –¢–û–í–ê–† –í –ö–û–†–ó–ò–ù–ï
 */
export const updateCartItemService = async (customerId, sessionId, itemId, updateData) => {
  try {
    const { quantity, selected_options, special_requests } = updateData;

    console.log('‚úèÔ∏è UPDATE CART ITEM:', { customerId, itemId, quantity });

    // –ù–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const updatedItem = await cart.updateItem(itemId, {
      quantity: parseInt(quantity),
      selected_options: selected_options || [],
      special_requests: special_requests || ''
    });

    console.log('‚úÖ Cart item updated:', {
      item_id: itemId,
      new_quantity: quantity,
      new_total: updatedItem.item_total
    });

    return {
      cart,
      updatedItem
    };

  } catch (error) {
    console.error('üö® UPDATE CART ITEM Error:', error);
    throw error;
  }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–† –ò–ó –ö–û–†–ó–ò–ù–´
 */
export const removeItemFromCart = async (customerId, sessionId, itemId) => {
  try {
    console.log('üóëÔ∏è REMOVE ITEM FROM CART:', { customerId, itemId });

    // –ù–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const removedItem = await cart.removeItem(itemId);

    console.log('‚úÖ Item removed from cart:', {
      removed_item: removedItem.title,
      remaining_items: cart.items.length
    });

    return {
      cart: cart.items.length > 0 ? cart : null,
      removedItem
    };

  } catch (error) {
    console.error('üö® REMOVE ITEM FROM CART Error:', error);
    throw error;
  }
};

/**
 * üóëÔ∏è –û–ß–ò–°–¢–ò–¢–¨ –ö–û–†–ó–ò–ù–£
 */
export const clearUserCart = async (customerId, sessionId) => {
  try {
    console.log('üóëÔ∏è CLEAR USER CART:', { customerId });

    // –ù–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const clearedItemsCount = cart.items.length;
    const savedAmount = cart.pricing.total_price;

    // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    await cart.clear();

    console.log('‚úÖ Cart cleared:', {
      cleared_items: clearedItemsCount,
      saved_amount: savedAmount
    });

    return {
      clearedItemsCount,
      savedAmount
    };

  } catch (error) {
    console.error('üö® CLEAR USER CART Error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –†–ê–°–°–ß–ò–¢–ê–¢–¨ –î–û–°–¢–ê–í–ö–£ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Delivery Service
 */
export const calculateDeliveryForCart = async (customerId, sessionId, deliveryAddress) => {
  try {
    const { lat, lng, address } = deliveryAddress;

    console.log('üöö CALCULATE DELIVERY (NEW ESARGO SYSTEM):', { customerId, lat, lng });

    // –ù–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (cart.items.length === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }

    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô DELIVERY SERVICE
    const deliveryCoords = { lat, lng };
    const result = await updateCartDeliveryInfo(cart, deliveryCoords);

    if (!result.delivery_info.available) {
      throw new Error('–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –î–û–°–¢–ê–í–ö–ï –í –ö–û–†–ó–ò–ù–ï
    await cart.setDeliveryInfo({
      address,
      lat,
      lng,
      distance_km: result.delivery_info.distance_km,
      estimated_delivery_time: result.delivery_info.estimated_minutes,
      delivery_fee: result.delivery_info.delivery_fee,
      delivery_zone: result.delivery_info.delivery_zone // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï
    });

    console.log('‚úÖ Delivery calculated (ESARGO SYSTEM):', {
      zone: result.delivery_info.delivery_zone,
      distance: `${result.delivery_info.distance_km}km`,
      fee: `${result.delivery_info.delivery_fee}‚Ç¨`,
      time: `${result.delivery_info.estimated_minutes} –º–∏–Ω`,
      large_order: result.delivery_info.is_large_order
    });

    return {
      cart: result.cart,
      distance: result.delivery_info.distance_km,
      deliveryFee: result.delivery_info.delivery_fee,
      estimatedTime: result.delivery_info.estimated_minutes,
      // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø ESARGO
      deliveryZone: result.delivery_info.delivery_zone,
      isLargeOrder: result.delivery_info.is_large_order,
      deliverySystem: 'ESARGO_ZONES'
    };

  } catch (error) {
    console.error('üö® CALCULATE DELIVERY Error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
 */
export const checkRestaurantDeliveryZones = async (restaurantId) => {
  try {
    const restaurant = await PartnerProfile.findById(restaurantId);
    if (!restaurant) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const activeZones = restaurant.getActiveDeliveryZones();
    
    return {
      restaurant_id: restaurantId,
      restaurant_name: restaurant.business_name,
      delivery_zones: activeZones,
      can_deliver: activeZones.length > 0
    };

  } catch (error) {
    console.error('üö® CHECK DELIVERY ZONES Error:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º
 */
export const validateCartForOrder = async (customerId, sessionId, deliveryAddress) => {
  try {
    console.log('‚úÖ VALIDATE CART FOR ORDER:', { customerId });

    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const validationResults = {
      valid: true,
      issues: [],
      cart_summary: {
        items_count: cart.items.length,
        subtotal: cart.pricing.subtotal,
        total_price: cart.pricing.total_price
      }
    };

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ—Ç—ã
    if (cart.items.length === 0) {
      validationResults.valid = false;
      validationResults.issues.push({
        type: 'empty_cart',
        message: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
      });
      return validationResults;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    if (!cart.meets_minimum_order) {
      validationResults.valid = false;
      validationResults.issues.push({
        type: 'minimum_order',
        message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${cart.restaurant_info.min_order_amount}‚Ç¨`,
        required_amount: cart.restaurant_info.min_order_amount,
        current_amount: cart.pricing.subtotal
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    if (deliveryAddress) {
      try {
        const deliveryResult = await calculateDeliveryForCart(customerId, sessionId, deliveryAddress);
        validationResults.delivery_info = {
          available: true,
          zone: deliveryResult.deliveryZone,
          fee: deliveryResult.deliveryFee,
          distance: deliveryResult.distance
        };
      } catch (deliveryError) {
        validationResults.valid = false;
        validationResults.issues.push({
          type: 'delivery_unavailable',
          message: deliveryError.message
        });
      }
    }

    // 4. ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –¢–û–í–ê–†–û–í (–±–∞–∑–æ–≤–∞—è)
    for (const item of cart.items) {
      const product = await Product.findById(item.product_id);
      if (!product || !product.is_active || !product.is_available) {
        validationResults.valid = false;
        validationResults.issues.push({
          type: 'product_unavailable',
          message: `–¢–æ–≤–∞—Ä "${item.title}" –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`,
          product_id: item.product_id
        });
      }
    }

    return validationResults;

  } catch (error) {
    console.error('üö® VALIDATE CART Error:', error);
    throw error;
  }
};

/**
 * üîÑ –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–¢–¨ –ö–û–†–ó–ò–ù–£ –í –ó–ê–ö–ê–ó
 */
export const convertCartToOrder = async (customerId, sessionId) => {
  try {
    console.log('üîÑ CONVERT CART TO ORDER:', { customerId });

    // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    const cart = await Cart.findActiveCart(customerId, sessionId);
    if (!cart) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (cart.items.length === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    if (!cart.meets_minimum_order) {
      throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ ${cart.restaurant_info.min_order_amount}‚Ç¨`);
    }

    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –¢–û–í–ê–†–û–í –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
    for (const item of cart.items) {
      const product = await Product.findById(item.product_id);
      if (!product || !product.is_available) {
        throw new Error(`–¢–æ–≤–∞—Ä "${item.title}" –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ —Å—Ç–∞—Ç—É—Å "converted_to_order"
    await cart.convertToOrder();

    console.log('‚úÖ Cart converted to order');

    return { cart };

  } catch (error) {
    console.error('üö® CONVERT CART TO ORDER Error:', error);
    throw error;
  }
};

// ============================================
// –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô (–°–û–•–†–ê–ù–Ø–ï–ú –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨)
// ============================================

export default {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  findOrCreateCart,
  addItemToCart,
  updateCartItemService,
  removeItemFromCart,
  clearUserCart,
  calculateDeliveryForCart, // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ê
  convertCartToOrder,
  
  // ‚úÖ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò
  checkRestaurantDeliveryZones,
  validateCartForOrder
};
