// services/Delivery/delivery.service.js - –°–ï–†–í–ò–° –†–ê–°–ß–ï–¢–ê –î–û–°–¢–ê–í–ö–ò ESARGO
import { PartnerProfile } from '../../models/index.js';

// ============================================
// MOCK –î–ê–ù–ù–´–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–±–µ–∑ Google API)
// ============================================

// Mock –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–æ–Ω)
const CITY_CENTER = {
  lat: 43.2965,  // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–∞—Ä—Å–µ–ª—è
  lng: 5.3698
};

// –¢–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏ ESARGO –ø–æ –∑–æ–Ω–∞–º
const DELIVERY_RATES = {
  zone_1: {
    distance_range: [0, 5],        // 0-5–∫–º
    delivery_fee_large: 6,         // –ó–∞–∫–∞–∑ ‚â•30‚Ç¨
    delivery_fee_small: 9          // –ó–∞–∫–∞–∑ <30‚Ç¨
  },
  zone_2: {
    distance_range: [5, 10],       // 5-10–∫–º  
    delivery_fee_large: 10,        // –ó–∞–∫–∞–∑ ‚â•30‚Ç¨
    delivery_fee_small: 13         // –ó–∞–∫–∞–∑ <30‚Ç¨
  }
};

// –ß–∞—Å—ã –ø–∏–∫ —Å –¥–æ–ø–ª–∞—Ç–∞–º–∏
const PEAK_HOURS = [
  { start: '11:30', end: '14:00', surcharge: 1.50 }, // –û–±–µ–¥–µ–Ω–Ω—ã–π —á–∞—Å –ø–∏–∫
  { start: '18:00', end: '21:00', surcharge: 2.00 }  // –í–µ—á–µ—Ä–Ω–∏–π —á–∞—Å –ø–∏–∫
];

// ============================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –î–û–°–¢–ê–í–ö–ò
// ============================================

/**
 * ‚úÖ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
 * @param {Object} deliveryData - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
 * @param {number} deliveryData.restaurant_lat - –®–∏—Ä–æ—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
 * @param {number} deliveryData.restaurant_lng - –î–æ–ª–≥–æ—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
 * @param {number} deliveryData.delivery_lat - –®–∏—Ä–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
 * @param {number} deliveryData.delivery_lng - –î–æ–ª–≥–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
 * @param {number} deliveryData.order_total - –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
 * @param {Date} deliveryData.order_time - –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ (–¥–ª—è —á–∞—Å–æ–≤ –ø–∏–∫)
 * @returns {Object} –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
 */
export const calculateFullDelivery = async (deliveryData) => {
  try {
    const {
      restaurant_lat,
      restaurant_lng,
      delivery_lat,
      delivery_lng,
      order_total = 0,
      order_time = new Date()
    } = deliveryData;

    console.log('üöö CALCULATE FULL DELIVERY:', {
      restaurant_coords: `${restaurant_lat}, ${restaurant_lng}`,
      delivery_coords: `${delivery_lat}, ${delivery_lng}`,
      order_total,
      order_time: order_time.toISOString().slice(11, 16) // HH:MM
    });

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    validateCoordinates(restaurant_lat, restaurant_lng, delivery_lat, delivery_lng);

    // 2. –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (mock)
    const distance = calculateMockDistance(
      restaurant_lat, restaurant_lng,
      delivery_lat, delivery_lng
    );

    // 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    const zone = determineDeliveryZone(distance);
    if (!zone) {
      throw new Error('–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª–µ–µ 10–∫–º');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤ –ø–∏–∫
    const peakInfo = checkPeakHours(order_time);

    // 5. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    const deliveryFee = calculateDeliveryFee(zone, order_total);

    // 6. –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞
    const courierEarnings = calculateCourierEarnings(zone, deliveryFee, peakInfo.surcharge);

    // 7. –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    const estimatedTime = calculateEstimatedDeliveryTime(distance, zone);

    // 8. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const result = {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      distance_km: Math.round(distance * 100) / 100,
      delivery_zone: zone,
      delivery_fee: deliveryFee,
      estimated_delivery_minutes: estimatedTime,
      
      // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      peak_hour_info: peakInfo,
      courier_earnings: courierEarnings,
      platform_commission: Math.round(order_total * 0.10 * 100) / 100, // 10%
      
      // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
      rate_info: {
        zone_rates: DELIVERY_RATES[`zone_${zone}`],
        is_large_order: order_total >= 30,
        base_fee: deliveryFee - (peakInfo.surcharge || 0),
        peak_surcharge: peakInfo.surcharge || 0
      },
      
      // –ú–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      calculation_method: 'mock_data',
      calculated_at: new Date().toISOString()
    };

    console.log('‚úÖ DELIVERY CALCULATION SUCCESS:', {
      distance: result.distance_km,
      zone: result.delivery_zone,
      fee: result.delivery_fee,
      courier_earnings: result.courier_earnings
    });

    return result;

  } catch (error) {
    console.error('üö® CALCULATE FULL DELIVERY ERROR:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ë–´–°–¢–†–´–ô –†–ê–°–ß–ï–¢: –¢–æ–ª—å–∫–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
 * –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
 */
export const calculateDeliveryFeeOnly = async (restaurant_coords, delivery_coords, order_total = 0) => {
  try {
    const distance = calculateMockDistance(
      restaurant_coords.lat, restaurant_coords.lng,
      delivery_coords.lat, delivery_coords.lng
    );

    const zone = determineDeliveryZone(distance);
    if (!zone) {
      return {
        available: false,
        reason: '–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª–µ–µ 10–∫–º',
        max_distance: 10
      };
    }

    const delivery_fee = calculateDeliveryFee(zone, order_total);
    const estimated_time = calculateEstimatedDeliveryTime(distance, zone);

    return {
      available: true,
      distance_km: Math.round(distance * 100) / 100,
      delivery_zone: zone,
      delivery_fee,
      estimated_minutes: estimated_time,
      is_large_order: order_total >= 30
    };

  } catch (error) {
    console.error('üö® CALCULATE DELIVERY FEE ERROR:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–û–ù–´: –ú–æ–∂–µ–º –ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É
 */
export const checkDeliveryAvailability = async (restaurant_coords, delivery_coords) => {
  try {
    const distance = calculateMockDistance(
      restaurant_coords.lat, restaurant_coords.lng,
      delivery_coords.lat, delivery_coords.lng
    );

    const zone = determineDeliveryZone(distance);

    return {
      available: !!zone,
      distance_km: Math.round(distance * 100) / 100,
      delivery_zone: zone,
      max_distance: 10,
      reason: zone ? '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞' : '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏'
    };

  } catch (error) {
    console.error('üö® CHECK DELIVERY AVAILABILITY ERROR:', error);
    return {
      available: false,
      reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'
    };
  }
};

// ============================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================

/**
 * Mock —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (—Ñ–æ—Ä–º—É–ª–∞ Haversine)
 * –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ Google Distance Matrix API
 */
function calculateMockDistance(lat1, lng1, lat2, lng2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = toRad(lat2 - lat1);
  const dLng = toRad(lng2 - lng1);
  
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2);
  
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c;
  
  return distance;
}

function toRad(value) {
  return value * Math.PI / 180;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
 */
function determineDeliveryZone(distance) {
  if (distance <= 5) return 1;      // –ó–æ–Ω–∞ 1: 0-5–∫–º
  if (distance <= 10) return 2;     // –ó–æ–Ω–∞ 2: 5-10–∫–º
  return null;                      // –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
}

/**
 * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–æ–Ω–µ –∏ —Å—É–º–º–µ –∑–∞–∫–∞–∑–∞
 */
function calculateDeliveryFee(zone, orderTotal) {
  const rates = DELIVERY_RATES[`zone_${zone}`];
  if (!rates) return 0;

  const isLargeOrder = orderTotal >= 30;
  return isLargeOrder ? rates.delivery_fee_large : rates.delivery_fee_small;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤ –ø–∏–∫
 */
function checkPeakHours(orderTime) {
  const currentTime = orderTime.toTimeString().slice(0, 5); // HH:MM
  
  for (const peak of PEAK_HOURS) {
    if (currentTime >= peak.start && currentTime <= peak.end) {
      return {
        is_peak_hour: true,
        surcharge: peak.surcharge,
        period: `${peak.start}-${peak.end}`,
        reason: '–ß–∞—Å –ø–∏–∫'
      };
    }
  }
  
  return {
    is_peak_hour: false,
    surcharge: 0,
    period: null,
    reason: '–û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è'
  };
}

/**
 * –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞
 */
function calculateCourierEarnings(zone, deliveryFee, peakSurcharge = 0) {
  const baseEarnings = deliveryFee; // –ö—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –≤—Å—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
  const peakBonus = peakSurcharge || 0;
  
  return {
    base_earnings: baseEarnings,
    peak_bonus: peakBonus,
    total_earnings: baseEarnings + peakBonus,
    zone: zone
  };
}

/**
 * –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
 */
function calculateEstimatedDeliveryTime(distance, zone) {
  // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è: 15 –º–∏–Ω—É—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ + –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
  const preparationTime = 15;
  const travelTime = Math.round(distance * 3); // ~3 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–º
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–æ–Ω—ã
  const courierSearchTime = zone === 1 ? 5 : 10;
  
  return preparationTime + travelTime + courierSearchTime;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */
function validateCoordinates(lat1, lng1, lat2, lng2) {
  if (!isValidCoordinate(lat1, lng1) || !isValidCoordinate(lat2, lng2)) {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
  }
}

function isValidCoordinate(lat, lng) {
  return (
    typeof lat === 'number' && 
    typeof lng === 'number' &&
    lat >= -90 && lat <= 90 &&
    lng >= -180 && lng <= 180
  );
}

// ============================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
// ============================================

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–†–ó–ò–ù–´ —Å –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –¥–æ—Å—Ç–∞–≤–∫–∏
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Cart Service
 */
export const updateCartDeliveryInfo = async (cart, delivery_coords) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    const restaurant = await PartnerProfile.findById(cart.restaurant_id);
    if (!restaurant) {
      throw new Error('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const restaurant_coords = {
      lat: restaurant.location.coordinates[1], // MongoDB —Ö—Ä–∞–Ω–∏—Ç [lng, lat]
      lng: restaurant.location.coordinates[0]
    };

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
    const deliveryInfo = await calculateDeliveryFeeOnly(
      restaurant_coords,
      delivery_coords,
      cart.pricing.subtotal
    );

    if (!deliveryInfo.available) {
      throw new Error(deliveryInfo.reason);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç)
    cart.pricing.delivery_fee = deliveryInfo.delivery_fee;
    cart.pricing.total_price = cart.pricing.subtotal + deliveryInfo.delivery_fee + (cart.pricing.service_fee || 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    cart.delivery_info = {
      zone: deliveryInfo.delivery_zone,
      distance_km: deliveryInfo.distance_km,
      estimated_minutes: deliveryInfo.estimated_minutes,
      updated_at: new Date()
    };

    return {
      cart,
      delivery_info: deliveryInfo
    };

  } catch (error) {
    console.error('üö® UPDATE CART DELIVERY ERROR:', error);
    throw error;
  }
};

/**
 * ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ê–†–ò–§–û–í –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
 */
export const getDeliveryRates = () => {
  return {
    zones: [
      {
        zone: 1,
        distance: '0-5 –∫–º',
        rates: {
          large_order: `${DELIVERY_RATES.zone_1.delivery_fee_large}‚Ç¨ (–∑–∞–∫–∞–∑ ‚â•30‚Ç¨)`,
          small_order: `${DELIVERY_RATES.zone_1.delivery_fee_small}‚Ç¨ (–∑–∞–∫–∞–∑ <30‚Ç¨)`
        }
      },
      {
        zone: 2,
        distance: '5-10 –∫–º',
        rates: {
          large_order: `${DELIVERY_RATES.zone_2.delivery_fee_large}‚Ç¨ (–∑–∞–∫–∞–∑ ‚â•30‚Ç¨)`,
          small_order: `${DELIVERY_RATES.zone_2.delivery_fee_small}‚Ç¨ (–∑–∞–∫–∞–∑ <30‚Ç¨)`
        }
      }
    ],
    peak_hours: PEAK_HOURS.map(peak => ({
      period: `${peak.start}-${peak.end}`,
      surcharge: `+${peak.surcharge}‚Ç¨`
    })),
    max_distance: 10,
    min_order_discount: 30
  };
};

/**
 * ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ø–æ –∑–æ–Ω–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export const getDeliveryZoneStats = async (dateFrom, dateTo) => {
  try {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Order model –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    return {
      zone_1: {
        total_orders: 150,
        avg_delivery_time: 25,
        total_earnings: 900,
        avg_distance: 3.2
      },
      zone_2: {
        total_orders: 85,
        avg_delivery_time: 35,
        total_earnings: 850,
        avg_distance: 7.1
      },
      peak_hours_impact: {
        orders_during_peak: 45,
        additional_earnings: 67.50
      }
    };
  } catch (error) {
    console.error('üö® GET DELIVERY STATS ERROR:', error);
    throw error;
  }
};

// ============================================
// –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô
// ============================================

export default {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  calculateFullDelivery,
  calculateDeliveryFeeOnly,
  checkDeliveryAvailability,
  
  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
  updateCartDeliveryInfo,
  
  // –£—Ç–∏–ª–∏—Ç—ã
  getDeliveryRates,
  getDeliveryZoneStats,
  
  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  determineDeliveryZone,
  calculateMockDistance,
  checkPeakHours,
  calculateCourierEarnings
};