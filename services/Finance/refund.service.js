// services/Finance/refund.service.js - –†–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–¢–û–í ESARGO
import { Transaction, Order, PartnerProfile, CourierProfile } from '../../models/index.js';
import { processOrderRefund } from '../payment.stub.service.js'; // –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
import mongoose from 'mongoose';

// ================ –†–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–¢–û–í ================

/**
 * üí∏ –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ó–í–†–ê–¢–ê –°–†–ï–î–°–¢–í
 * @param {Object} order - –ó–∞–∫–∞–∑ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
 * @param {Object} options - –û–ø—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
 */
export const processRealRefund = async (order, options = {}) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();

    const {
      refund_reason = 'order_cancelled',
      refund_type = 'full', // full | partial
      partial_amount = null,
      initiated_by_user_id,
      initiated_by_role = 'customer' // customer | partner | admin
    } = options;

    console.log('üí∏ PROCESS REAL REFUND:', {
      order_id: order._id,
      order_number: order.order_number,
      total_price: order.total_price,
      refund_type,
      refund_reason,
      initiated_by_role
    });

    // ================ 1. –í–ê–õ–ò–î–ê–¶–ò–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í–û–ó–í–†–ê–¢–ê ================

    if (order.payment_status !== 'completed') {
      throw new Error('–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω');
    }

    if (order.status === 'delivered' && initiated_by_role === 'customer') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏)
      const deliveredAt = order.status_history?.find(h => h.status === 'delivered')?.timestamp;
      if (deliveredAt && Date.now() - deliveredAt.getTime() > 2 * 60 * 60 * 1000) {
        throw new Error('–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
      }
    }

    // ================ 2. –†–ê–°–ß–ï–¢ –°–£–ú–ú–´ –í–û–ó–í–†–ê–¢–ê ================

    let refundAmount = order.total_price;
    let refundBreakdown = {
      subtotal: order.pricing?.subtotal || 0,
      delivery_fee: order.pricing?.delivery_fee || 0,
      service_fee: order.pricing?.service_fee || 0,
      total: order.total_price
    };

    // –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
    if (refund_type === 'partial' && partial_amount) {
      if (partial_amount > order.total_price) {
        throw new Error('–°—É–º–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞');
      }
      refundAmount = partial_amount;
      refundBreakdown.total = partial_amount;
    }

    // –õ–æ–≥–∏–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    if (order.status === 'preparing' || order.status === 'ready') {
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É
      refundBreakdown.delivery_fee = 0;
      refundAmount = refundBreakdown.subtotal + refundBreakdown.service_fee;
    } else if (order.status === 'picked_up') {
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–±—Ä–∞–Ω –∫—É—Ä—å–µ—Ä–æ–º, —É–¥–µ—Ä–∂–∏–≤–∞–µ–º 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
      refundBreakdown.delivery_fee = refundBreakdown.delivery_fee * 0.5;
      refundAmount = refundBreakdown.subtotal + refundBreakdown.service_fee + refundBreakdown.delivery_fee;
    }

    console.log('üí∞ REFUND CALCULATION:', {
      original_amount: order.total_price,
      refund_amount: refundAmount,
      breakdown: refundBreakdown
    });

    // ================ 3. –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ó–í–†–ê–¢–ê –í –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–ï ================

    let paymentRefundResult = null;
    if (order.payment_method === 'card') {
      try {
        paymentRefundResult = await processOrderRefund({
          original_payment_id: order.payment_details?.payment_id,
          amount: refundAmount,
          order_id: order._id,
          reason: refund_reason
        });

        console.log('‚úÖ PAYMENT REFUND SUCCESS:', {
          refund_id: paymentRefundResult.refund_id,
          amount: paymentRefundResult.amount
        });

      } catch (paymentError) {
        console.error('üö® PAYMENT REFUND FAILED:', paymentError);
        throw new Error(`–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: ${paymentError.message}`);
      }
    }

    // ================ 4. –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–ù–°–û–í–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í–û–ó–í–†–ê–¢–ê ================

    const refundTransactions = await createRefundTransactions({
      order,
      refundAmount,
      refundBreakdown,
      refund_reason,
      payment_refund_id: paymentRefundResult?.refund_id,
      session
    });

    // ================ 5. –û–ë–ù–û–í–õ–ï–ù–ò–ï EARNINGS –£–ß–ê–°–¢–ù–ò–ö–û–í ================

    await updateParticipantsEarningsOnRefund({
      order,
      refundBreakdown,
      session
    });

    // ================ 6. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ================

    order.payment_status = refund_type === 'full' ? 'refunded' : 'partially_refunded';
    order.refund_details = {
      refund_id: paymentRefundResult?.refund_id || `ref_internal_${Date.now()}`,
      refund_type,
      refund_reason,
      original_amount: order.total_price,
      refunded_amount: refundAmount,
      refund_breakdown: refundBreakdown,
      processed_at: new Date(),
      estimated_arrival: paymentRefundResult?.estimated_arrival || new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
      initiated_by: {
        user_id: initiated_by_user_id,
        role: initiated_by_role
      },
      transactions: refundTransactions.map(t => t.transaction_id)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    order.status_history.push({
      status: refund_type === 'full' ? 'refunded' : 'partially_refunded',
      timestamp: new Date(),
      updated_by: initiated_by_user_id,
      user_role: initiated_by_role,
      notes: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: ${refund_reason}`
    });

    await order.save({ session });

    await session.commitTransaction();

    // ================ 7. –†–ï–ó–£–õ–¨–¢–ê–¢ ================

    const result = {
      success: true,
      refund_id: order.refund_details.refund_id,
      order_id: order._id,
      order_number: order.order_number,
      refund_details: {
        type: refund_type,
        reason: refund_reason,
        original_amount: order.total_price,
        refunded_amount: refundAmount,
        breakdown: refundBreakdown,
        estimated_arrival: order.refund_details.estimated_arrival
      },
      financial_impact: {
        transactions_created: refundTransactions.length,
        participant_earnings_updated: true,
        payment_system_processed: !!paymentRefundResult
      },
      message: `–í–æ–∑–≤—Ä–∞—Ç ${refundAmount}‚Ç¨ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.`
    };

    console.log('‚úÖ REAL REFUND COMPLETED:', {
      refund_id: result.refund_id,
      amount: refundAmount,
      transactions: refundTransactions.length
    });

    return result;

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® REAL REFUND ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

// ================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ–∑–≤—Ä–∞—Ç–∞
 */
async function createRefundTransactions({ order, refundAmount, refundBreakdown, refund_reason, payment_refund_id, session }) {
  const transactions = [];

  // 1. –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
  const mainRefundTransaction = new Transaction({
    transaction_id: Transaction.generateTransactionId(),
    order_id: order._id,
    transaction_type: 'customer_refund',
    from_user_type: 'platform',
    to_user_id: order.customer_id,
    to_user_type: 'customer',
    amount: refundAmount,
    status: 'completed',
    description: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –∑–∞–∫–∞–∑ ${order.order_number}`,
    metadata: {
      refund_reason,
      payment_refund_id,
      original_order_amount: order.total_price,
      refund_breakdown: refundBreakdown
    }
  });

  await mainRefundTransaction.save({ session });
  transactions.push(mainRefundTransaction);

  // 2. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ earnings –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç)
  if (order.status !== 'pending' && order.partner_id) {
    const partnerRefundAmount = Math.round((refundBreakdown.subtotal * 0.9) * 100) / 100; // 90% –æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–π —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤
    
    if (partnerRefundAmount > 0) {
      const partnerRefundTransaction = new Transaction({
        transaction_id: Transaction.generateTransactionId(),
        order_id: order._id,
        transaction_type: 'partner_refund_deduction',
        from_user_id: order.partner_id,
        from_user_type: 'partner',
        to_user_type: 'platform',
        amount: partnerRefundAmount,
        status: 'completed',
        description: `–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞ ${order.order_number}`,
        metadata: {
          refund_reason,
          original_earnings: refundBreakdown.subtotal * 0.9
        }
      });

      await partnerRefundTransaction.save({ session });
      transactions.push(partnerRefundTransaction);
    }
  }

  // 3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ earnings –∫—É—Ä—å–µ—Ä–∞ (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∫ –¥–æ—Å—Ç–∞–≤–∫–µ)
  if (order.courier_id && (order.status === 'picked_up' || order.status === 'delivered')) {
    const courierRefundAmount = refundBreakdown.delivery_fee;
    
    if (courierRefundAmount > 0) {
      const courierRefundTransaction = new Transaction({
        transaction_id: Transaction.generateTransactionId(),
        order_id: order._id,
        transaction_type: 'courier_refund_deduction',
        from_user_id: order.courier_id,
        from_user_type: 'courier',
        to_user_type: 'platform',
        amount: courierRefundAmount,
        status: 'completed',
        description: `–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞ ${order.order_number}`,
        metadata: {
          refund_reason,
          original_delivery_fee: order.pricing?.delivery_fee || 0
        }
      });

      await courierRefundTransaction.save({ session });
      transactions.push(courierRefundTransaction);
    }
  }

  return transactions;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ earnings —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
 */
async function updateParticipantsEarningsOnRefund({ order, refundBreakdown, session }) {
  // –û–±–Ω–æ–≤–ª—è–µ–º earnings –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  if (order.partner_id) {
    const partner = await PartnerProfile.findById(order.partner_id).session(session);
    if (partner) {
      const deduction = Math.round((refundBreakdown.subtotal * 0.9) * 100) / 100;
      
      partner.earnings.total_earned = Math.max(0, partner.earnings.total_earned - deduction);
      partner.earnings.monthly_earned = Math.max(0, partner.earnings.monthly_earned - deduction);
      partner.earnings.weekly_earned = Math.max(0, partner.earnings.weekly_earned - deduction);
      
      await partner.save({ session });
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º earnings –∫—É—Ä—å–µ—Ä–∞
  if (order.courier_id) {
    const courier = await CourierProfile.findById(order.courier_id).session(session);
    if (courier) {
      const deduction = refundBreakdown.delivery_fee;
      
      courier.earnings.total_earned = Math.max(0, courier.earnings.total_earned - deduction);
      courier.earnings.monthly_earned = Math.max(0, courier.earnings.monthly_earned - deduction);
      courier.earnings.weekly_earned = Math.max(0, courier.earnings.weekly_earned - deduction);
      
      await courier.save({ session });
    }
  }
}

// ================ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
 */
export const canRefundOrder = (order, userRole = 'customer') => {
  const checks = {
    can_refund: false,
    reasons: []
  };

  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (order.payment_status !== 'completed') {
    checks.reasons.push('–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω');
    return checks;
  }

  if (order.payment_status === 'refunded') {
    checks.reasons.push('–ó–∞–∫–∞–∑ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω');
    return checks;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  switch (order.status) {
    case 'pending':
    case 'accepted':
      checks.can_refund = true;
      break;
      
    case 'preparing':
    case 'ready':
      checks.can_refund = true;
      checks.reasons.push('–í–æ–∑–º–æ–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏');
      break;
      
    case 'picked_up':
      checks.can_refund = true;
      checks.reasons.push('–í–æ–∑–º–æ–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç —Å —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏');
      break;
      
    case 'delivered':
      if (userRole === 'customer') {
        const deliveredAt = order.status_history?.find(h => h.status === 'delivered')?.timestamp;
        if (deliveredAt && Date.now() - deliveredAt.getTime() <= 2 * 60 * 60 * 1000) {
          checks.can_refund = true;
          checks.reasons.push('–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
        } else {
          checks.reasons.push('–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
        }
      } else {
        checks.can_refund = true; // –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ–≥–¥–∞
      }
      break;
      
    case 'cancelled':
    case 'refunded':
      checks.reasons.push('–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω');
      break;
      
    default:
      checks.reasons.push('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
  }

  return checks;
};

/**
 * –†–∞—Å—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–π —Å—É–º–º—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
 */
export const calculateRefundAmount = (order) => {
  const breakdown = {
    subtotal: order.pricing?.subtotal || 0,
    delivery_fee: order.pricing?.delivery_fee || 0,
    service_fee: order.pricing?.service_fee || 0,
    total: order.total_price
  };

  let refundable_amount = breakdown.total;

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  switch (order.status) {
    case 'preparing':
    case 'ready':
      breakdown.delivery_fee = 0;
      refundable_amount = breakdown.subtotal + breakdown.service_fee;
      break;
      
    case 'picked_up':
      breakdown.delivery_fee = breakdown.delivery_fee * 0.5;
      refundable_amount = breakdown.subtotal + breakdown.service_fee + breakdown.delivery_fee;
      break;
  }

  return {
    refundable_amount: Math.round(refundable_amount * 100) / 100,
    breakdown,
    deductions: {
      delivery_fee_reduction: (order.pricing?.delivery_fee || 0) - breakdown.delivery_fee
    }
  };
};

// ================ –≠–ö–°–ü–û–†–¢ ================

export default {
  processRealRefund,
  canRefundOrder,
  calculateRefundAmount
};