// services/Finance/transaction.service.js - –°–ï–†–í–ò–° –§–ò–ù–ê–ù–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô ESARGO
import { Transaction, Order, PartnerProfile, CourierProfile } from '../../models/index.js';
import mongoose from 'mongoose';

// ============================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
// ============================================

/**
 * ‚úÖ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Order Service
 * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 * @param {Object} deliveryData - –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ Delivery Service
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export const createOrderTransactions = async (orderData, deliveryData) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();

    const {
      order_id,
      order_number,
      customer_id,
      partner_id,
      courier_id = null,
      subtotal,
      total_price,
      payment_status
    } = orderData;

    console.log('üí∞ CREATE ORDER TRANSACTIONS:', {
      order_number,
      subtotal,
      delivery_zone: deliveryData?.delivery_zone,
      has_courier: !!courier_id
    });

    const transactions = [];

    // 1. ‚úÖ –ö–û–ú–ò–°–°–ò–Ø ESARGO (10% –æ—Ç —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤)
    const platformCommission = await createPlatformCommissionTransaction({
      order_id,
      order_number,
      partner_id,
      subtotal,
      session
    });
    transactions.push(platformCommission);

    // 2. ‚úÖ –í–´–ü–õ–ê–¢–ê –ü–ê–†–¢–ù–ï–†–£ (90% –æ—Ç —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤)
    const partnerPayout = await createPartnerPayoutTransaction({
      order_id,
      order_number,
      partner_id,
      subtotal,
      commission: platformCommission.amount,
      session
    });
    transactions.push(partnerPayout);

    // 3. ‚úÖ –û–ü–õ–ê–¢–ê –ö–£–†–¨–ï–†–£ (–µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏)
    if (courier_id && deliveryData) {
      const courierPayment = await createCourierPaymentTransaction({
        order_id,
        order_number,
        courier_id,
        deliveryData,
        session
      });
      transactions.push(courierPayment);
    }

    // 4. ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú EARNINGS –£–ß–ê–°–¢–ù–ò–ö–û–í
    await updateParticipantsEarnings(orderData, deliveryData, session);

    await session.commitTransaction();

    console.log('‚úÖ TRANSACTIONS CREATED SUCCESS:', {
      order_number,
      transactions_count: transactions.length,
      total_commission: platformCommission.amount,
      partner_payout: partnerPayout.amount,
      courier_payment: courier_id ? transactions.find(t => t.transaction_type === 'courier_payment')?.amount : 0
    });

    return {
      success: true,
      order_id,
      order_number,
      transactions,
      financial_summary: {
        subtotal,
        platform_commission: platformCommission.amount,
        partner_earnings: partnerPayout.amount,
        courier_earnings: courier_id ? deliveryData.courier_earnings?.total_earnings || 0 : 0,
        delivery_fee: deliveryData?.delivery_fee || 0
      }
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® CREATE TRANSACTIONS ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –±–µ—Ä–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
 */
export const createCourierTransactionOnAccept = async (order_id, courier_id) => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();

    console.log('üí∞ CREATE COURIER TRANSACTION:', { order_id, courier_id });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    const order = await Order.findById(order_id).session(session);
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢: –ö—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç 100% –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
    let courierAmount = 0;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç courier_earnings
    if (order.courier_earnings && order.courier_earnings > 0) {
      courierAmount = order.courier_earnings;
      console.log('üìä Using order.courier_earnings:', courierAmount);
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç courier_earnings, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º–∏
    else {
      // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
      const baseDeliveryFee = order.delivery_fee || 0;
      
      // –ï—Å–ª–∏ delivery_fee —Ç–æ–∂–µ 0, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
      if (baseDeliveryFee === 0) {
        const zone = order.delivery_zone || 1;
        const orderTotal = order.subtotal || 0;
        
        // –¢–∞—Ä–∏—Ñ—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
        // –ó–æ–Ω–∞ 1: 6‚Ç¨ (‚â•30‚Ç¨) –∏–ª–∏ 9‚Ç¨ (<30‚Ç¨)
        // –ó–æ–Ω–∞ 2: 10‚Ç¨ (‚â•30‚Ç¨) –∏–ª–∏ 13‚Ç¨ (<30‚Ç¨)
        if (zone === 1) {
          courierAmount = orderTotal >= 30 ? 6 : 9;
        } else if (zone === 2) {
          courierAmount = orderTotal >= 30 ? 10 : 13;
        }
        
        console.log('üìä Calculated base delivery fee:', {
          zone,
          orderTotal,
          baseCalculated: courierAmount
        });
      } else {
        courierAmount = baseDeliveryFee;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –∑–∞ —á–∞—Å –ø–∏–∫ (–∫—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ)
      const peakSurcharge = order.peak_hour_surcharge || 0;
      courierAmount += peakSurcharge;
      
      console.log('üìä Total courier amount:', {
        baseFee: courierAmount - peakSurcharge,
        peakSurcharge,
        total: courierAmount
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 0
    if (courierAmount <= 0) {
      throw new Error('–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }

    console.log('üìä FINAL COURIER PAYMENT CALCULATION:', {
      order_number: order.order_number,
      delivery_fee: order.delivery_fee,
      courier_earnings: order.courier_earnings,
      peak_hour_surcharge: order.peak_hour_surcharge,
      final_amount: courierAmount,
      zone: order.delivery_zone,
      subtotal: order.subtotal
    });

    // –°–æ–∑–¥–∞–µ–º pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫—É—Ä—å–µ—Ä–∞
    const courierPayment = new Transaction({
      transaction_id: Transaction.generateTransactionId(),
      order_id,
      transaction_type: 'courier_payment',
      from_user_type: 'platform',
      to_user_id: courier_id,
      to_user_type: 'courier',
      amount: courierAmount, // 100% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ + —á–∞—Å –ø–∏–∫
      status: 'pending', // –°—Ç–∞–Ω–µ—Ç completed –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ
      description: `–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–∫–∞–∑–∞ ${order.order_number}`,
      metadata: {
        delivery_zone: order.delivery_zone,
        delivery_distance_km: order.delivery_distance_km,
        base_delivery_fee: order.delivery_fee,
        peak_hour_surcharge: order.peak_hour_surcharge || 0,
        is_peak_hour: (order.peak_hour_surcharge || 0) > 0,
        courier_earnings_original: order.courier_earnings,
        calculation_method: order.courier_earnings > 0 ? 'from_order_field' : 'calculated_from_tariffs'
      }
    });

    await courierPayment.save({ session });
    await session.commitTransaction();

    console.log('‚úÖ COURIER TRANSACTION CREATED:', {
      transaction_id: courierPayment.transaction_id,
      amount: courierPayment.amount,
      status: 'pending',
      description: courierPayment.description
    });

    return {
      success: true,
      transaction: courierPayment,
      amount: courierAmount,
      message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ pending'
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® CREATE COURIER TRANSACTION ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

/**
 * ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–†–ò –î–û–°–¢–ê–í–ö–ï –ó–ê–ö–ê–ó–ê
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–∫–∞–∑
 */
export const processDeliveryTransactions = async (order_id, courier_id) => {
  try {
    console.log('üöö PROCESS DELIVERY TRANSACTIONS:', { order_id, courier_id });

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const pendingTransactions = await Transaction.find({
      order_id,
      status: 'pending'
    });

    const processedTransactions = [];

    for (const transaction of pendingTransactions) {
      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed)
        await transaction.process();
        processedTransactions.push({
          transaction_id: transaction.transaction_id,
          type: transaction.transaction_type,
          amount: transaction.amount,
          to_user_type: transaction.to_user_type,
          status: 'completed'
        });

        console.log(`‚úÖ Transaction processed: ${transaction.transaction_type} - ${transaction.amount}‚Ç¨`);
      } catch (transactionError) {
        console.error(`‚ùå Failed to process transaction ${transaction.transaction_id}:`, transactionError);
        processedTransactions.push({
          transaction_id: transaction.transaction_id,
          type: transaction.transaction_type,
          status: 'failed',
          error: transactionError.message
        });
      }
    }

    return {
      success: true,
      order_id,
      processed_transactions: processedTransactions,
      total_processed: processedTransactions.filter(t => t.status === 'completed').length,
      total_failed: processedTransactions.filter(t => t.status === 'failed').length
    };

  } catch (error) {
    console.error('üö® PROCESS DELIVERY TRANSACTIONS ERROR:', error);
    throw error;
  }
};

/**
 * ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ó–í–†–ê–¢–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–†–ò –û–¢–ú–ï–ù–ï –ó–ê–ö–ê–ó–ê
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π refund
 */
export const processOrderRefundTransactions = async (order_id, refund_reason = 'order_cancelled') => {
  const session = await mongoose.startSession();
  
  try {
    await session.startTransaction();

    console.log('üí∏ PROCESS REFUND TRANSACTIONS:', { order_id, refund_reason });

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
    const orderTransactions = await Transaction.find({ order_id }).session(session);

    if (orderTransactions.length === 0) {
      console.log('‚ÑπÔ∏è No transactions found for order:', order_id);
      await session.commitTransaction();
      return { success: true, refunded_transactions: [] };
    }

    const refundedTransactions = [];

    for (const transaction of orderTransactions) {
      // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
      const refundTransaction = new Transaction({
        transaction_id: Transaction.generateTransactionId(),
        order_id,
        transaction_type: 'refund',
        from_user_id: transaction.to_user_id,
        from_user_type: transaction.to_user_type,
        to_user_id: transaction.from_user_id,
        to_user_type: transaction.from_user_type,
        amount: transaction.amount,
        status: 'completed',
        description: `–í–æ–∑–≤—Ä–∞—Ç: ${transaction.description}`,
        metadata: {
          original_transaction_id: transaction.transaction_id,
          refund_reason,
          original_type: transaction.transaction_type
        }
      });

      await refundTransaction.save({ session });
      
      // –ü–æ–º–µ—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—É—é
      transaction.status = 'refunded';
      transaction.refunded_at = new Date();
      await transaction.save({ session });

      refundedTransactions.push({
        original_transaction_id: transaction.transaction_id,
        refund_transaction_id: refundTransaction.transaction_id,
        amount: transaction.amount,
        type: transaction.transaction_type
      });

      console.log(`üí∏ Refund created: ${transaction.transaction_type} - ${transaction.amount}‚Ç¨`);
    }

    await session.commitTransaction();

    return {
      success: true,
      order_id,
      refunded_transactions: refundedTransactions,
      total_refunded_amount: refundedTransactions.reduce((sum, t) => sum + t.amount, 0)
    };

  } catch (error) {
    await session.abortTransaction();
    console.error('üö® PROCESS REFUND TRANSACTIONS ERROR:', error);
    throw error;
  } finally {
    session.endSession();
  }
};

// ============================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
// ============================================

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ESARGO
 */
async function createPlatformCommissionTransaction(data) {
  const { order_id, order_number, partner_id, subtotal, session } = data;
  
  const commissionAmount = Math.round(subtotal * 0.10 * 100) / 100; // 10%
  
  const transaction = new Transaction({
    transaction_id: Transaction.generateTransactionId(),
    order_id,
    transaction_type: 'platform_commission',
    from_user_id: partner_id,
    from_user_type: 'partner',
    to_user_type: 'platform',
    amount: commissionAmount,
    status: 'pending', // –°—Ç–∞–Ω–µ—Ç completed –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ
    description: `–ö–æ–º–∏—Å—Å–∏—è ESARGO (10%) –∑–∞ –∑–∞–∫–∞–∑ ${order_number}`,
    metadata: {
      commission_rate: 0.10,
      order_subtotal: subtotal,
      calculation_method: 'percentage'
    }
  });

  await transaction.save({ session });
  return transaction;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–ª–∞—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä—É
 */
async function createPartnerPayoutTransaction(data) {
  const { order_id, order_number, partner_id, subtotal, commission, session } = data;
  
  const payoutAmount = Math.round((subtotal - commission) * 100) / 100; // 90%
  
  const transaction = new Transaction({
    transaction_id: Transaction.generateTransactionId(),
    order_id,
    transaction_type: 'partner_payout',
    from_user_type: 'platform',
    to_user_id: partner_id,
    to_user_type: 'partner',
    amount: payoutAmount,
    status: 'pending', // –°—Ç–∞–Ω–µ—Ç completed –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ
    description: `–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ ${order_number}`,
    metadata: {
      order_subtotal: subtotal,
      commission_deducted: commission,
      payout_rate: 0.90
    }
  });

  await transaction.save({ session });
  return transaction;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã –∫—É—Ä—å–µ—Ä—É
 */
async function createCourierPaymentTransaction(data) {
  const { order_id, order_number, courier_id, deliveryData, session } = data;
  
  const courierEarnings = deliveryData.courier_earnings?.total_earnings || deliveryData.delivery_fee || 0;
  
  const transaction = new Transaction({
    transaction_id: Transaction.generateTransactionId(),
    order_id,
    transaction_type: 'courier_payment',
    from_user_type: 'platform',
    to_user_id: courier_id,
    to_user_type: 'courier',
    amount: courierEarnings,
    status: 'pending', // –°—Ç–∞–Ω–µ—Ç completed –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ
    description: `–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–∫–∞–∑–∞ ${order_number}`,
    metadata: {
      delivery_zone: deliveryData.delivery_zone,
      delivery_distance_km: deliveryData.distance_km,
      base_delivery_fee: deliveryData.delivery_fee,
      peak_hour_surcharge: deliveryData.peak_hour_info?.surcharge || 0,
      is_peak_hour: deliveryData.peak_hour_info?.is_peak_hour || false
    }
  });

  await transaction.save({ session });
  return transaction;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ earnings —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
async function updateParticipantsEarnings(orderData, deliveryData, session) {
  const { partner_id, courier_id, subtotal } = orderData;

  // –û–±–Ω–æ–≤–ª—è–µ–º earnings –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  if (partner_id) {
    const partner = await PartnerProfile.findById(partner_id).session(session);
    if (partner) {
      await partner.updateEarnings({ subtotal });
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º earnings –∫—É—Ä—å–µ—Ä–∞
  if (courier_id && deliveryData) {
    const courier = await CourierProfile.findById(courier_id).session(session);
    if (courier) {
      await courier.addEarnings({
        delivery_fee: deliveryData.delivery_fee,
        peak_hour_surcharge: deliveryData.peak_hour_info?.surcharge || 0,
        delivery_zone: deliveryData.delivery_zone,
        delivery_distance_km: deliveryData.distance_km
      });
    }
  }
}

// ============================================
// –§–£–ù–ö–¶–ò–ò –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
// ============================================

/**
 * ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–ù–ê–ù–°–û–í–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
 */
export const getUserEarningsHistory = async (userId, userType, options = {}) => {
  try {
    const {
      limit = 20,
      offset = 0,
      dateFrom,
      dateTo,
      transaction_type = null
    } = options;

    console.log('üìä GET USER EARNINGS:', { userId, userType, limit, transaction_type });

    const transactions = await Transaction.getByUser(userId, userType, {
      status: 'completed',
      limit,
      offset,
      dateFrom,
      dateTo
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const summary = transactions.reduce((acc, transaction) => {
      const type = transaction.transaction_type;
      if (!acc[type]) {
        acc[type] = { count: 0, total_amount: 0 };
      }
      acc[type].count += 1;
      acc[type].total_amount += transaction.amount;
      return acc;
    }, {});

    const totalEarnings = transactions.reduce((sum, t) => sum + t.amount, 0);

    return {
      user_id: userId,
      user_type: userType,
      transactions,
      summary: {
        total_transactions: transactions.length,
        total_earnings: Math.round(totalEarnings * 100) / 100,
        by_type: summary
      },
      pagination: {
        limit,
        offset,
        has_more: transactions.length === limit
      }
    };

  } catch (error) {
    console.error('üö® GET USER EARNINGS ERROR:', error);
    throw error;
  }
};

/**
 * ‚úÖ –û–ë–©–ê–Ø –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–§–û–†–ú–´
 */
export const getPlatformFinancialStats = async (dateFrom, dateTo) => {
  try {
    console.log('üìä GET PLATFORM FINANCIAL STATS:', { dateFrom, dateTo });

    const stats = await Transaction.getStatsForPeriod(dateFrom, dateTo);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const partnerStats = await Transaction.getStatsForPeriod(dateFrom, dateTo, { userType: 'partner' });
    const courierStats = await Transaction.getStatsForPeriod(dateFrom, dateTo, { userType: 'courier' });
    const platformStats = await Transaction.getStatsForPeriod(dateFrom, dateTo, { 
      transactionType: 'platform_commission' 
    });

    return {
      period: { from: dateFrom, to: dateTo },
      platform_commission: {
        total_amount: platformStats.reduce((sum, stat) => sum + stat.total_amount, 0),
        transaction_count: platformStats.reduce((sum, stat) => sum + stat.count, 0)
      },
      partner_payouts: {
        total_amount: partnerStats.reduce((sum, stat) => sum + stat.total_amount, 0),
        transaction_count: partnerStats.reduce((sum, stat) => sum + stat.count, 0)
      },
      courier_payments: {
        total_amount: courierStats.reduce((sum, stat) => sum + stat.total_amount, 0),
        transaction_count: courierStats.reduce((sum, stat) => sum + stat.count, 0)
      },
      daily_breakdown: stats
    };

  } catch (error) {
    console.error('üö® GET PLATFORM STATS ERROR:', error);
    throw error;
  }
};

// ============================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
// ============================================

/**
 * ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° ORDER SERVICE
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Order Service –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
 */
export const integrateWithOrderCreation = async (orderData, deliveryData) => {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω
    if (orderData.payment_status === 'completed') {
      const result = await createOrderTransactions(orderData, deliveryData);
      return { success: true, transactions: result.transactions };
    }
    
    return { success: true, message: 'Payment not completed, transactions skipped' };
  } catch (error) {
    console.error('üö® INTEGRATION ERROR:', error);
    // –ù–ï –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    return { success: false, error: error.message };
  }
};

/**
 * ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ü–†–ò–ù–Ø–¢–ò–ï–ú –ó–ê–ö–ê–ó–ê –ö–£–†–¨–ï–†–û–ú
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –±–µ—Ä–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
 */
export const integrateWithCourierAccept = async (order_id, courier_id) => {
  try {
    const result = await createCourierTransactionOnAccept(order_id, courier_id);
    return { success: true, transaction: result.transaction };
  } catch (error) {
    console.error('üö® COURIER ACCEPT INTEGRATION ERROR:', error);
    // –ù–ï –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
    return { success: false, error: error.message };
  }
};

/**
 * ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° DELIVERY
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–∫–∞–∑
 */
export const integrateWithOrderDelivery = async (order_id, courier_id) => {
  try {
    const result = await processDeliveryTransactions(order_id, courier_id);
    return { success: true, processed: result.processed_transactions };
  } catch (error) {
    console.error('üö® DELIVERY INTEGRATION ERROR:', error);
    // –ù–ï –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
    return { success: false, error: error.message };
  }
};

// ============================================
// –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô
// ============================================

export default {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  createOrderTransactions,
  processDeliveryTransactions,
  processOrderRefundTransactions,
  createCourierTransactionOnAccept, // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getUserEarningsHistory,
  getPlatformFinancialStats,
  
  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
  integrateWithOrderCreation,
  integrateWithOrderDelivery,
  integrateWithCourierAccept, // ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
  
  // –£—Ç–∏–ª–∏—Ç—ã
  Transaction // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
};