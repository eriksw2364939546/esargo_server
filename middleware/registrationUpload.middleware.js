// middleware/registrationUpload.middleware.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
import multer from "multer";
import path from "path";
import fs from "fs";

/**
 * ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–ê–ü–û–ö –î–õ–Ø PDF ==================== 
 */
const PDF_UPLOAD_CONFIGS = {
  couriers: {
    documents: "uploads/couriers/documentsPdf"
  },
  partners: {
    documents: "uploads/partners/documentsPdf"
  }
};

/**
 * ==================== –°–û–ó–î–ê–ù–ò–ï –ü–ê–ü–û–ö ====================
 */
const ensureDirectoryExists = (dirPath) => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`üìÅ Created directory: ${dirPath}`);
  }
};

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
Object.values(PDF_UPLOAD_CONFIGS.couriers).forEach(ensureDirectoryExists);
Object.values(PDF_UPLOAD_CONFIGS.partners).forEach(ensureDirectoryExists);

/**
 * ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø MULTER –î–õ–Ø PDF ====================
 */
const pdfStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ URL –∑–∞–ø—Ä–æ—Å–∞
    let userRole = 'couriers'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (req.originalUrl && req.originalUrl.includes('/partners/')) {
      userRole = 'partner';
    } else if (req.originalUrl && req.originalUrl.includes('/couriers/')) {
      userRole = 'courier';
    }
    let uploadDir;
    if (userRole === 'partner') {
      uploadDir = PDF_UPLOAD_CONFIGS.partners.documents;
    } else {
      uploadDir = PDF_UPLOAD_CONFIGS.couriers.documents;
    }
    console.log(`üìÅ MULTER DESTINATION: ${userRole} -> ${uploadDir}`);
    ensureDirectoryExists(uploadDir);
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const random = Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    const documentType = file.fieldname; // id_card, bank_rib, etc.
    
    const filename = `${documentType}-${timestamp}-${random}${ext}`;
    cb(null, filename);
  }
});

// –§–∏–ª—å—Ç—Ä –¥–ª—è PDF —Ñ–∞–π–ª–æ–≤
const pdfFileFilter = (req, file, cb) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã
  if (file.mimetype === 'application/pdf') {
    cb(null, true);
  } else {
    cb(new Error(`–ü–æ–ª–µ ${file.fieldname}: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã`), false);
  }
};

/**
 * ==================== MULTER –î–õ–Ø PDF –î–û–ö–£–ú–ï–ù–¢–û–í ====================
 */
const uploadPdfDocuments = multer({
  storage: pdfStorage,
  fileFilter: pdfFileFilter,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB –¥–ª—è PDF
    files: 10 // –î–æ 10 —Ñ–∞–π–ª–æ–≤
  }
});

/**
 * ================ MULTER –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ö–£–†–¨–ï–†–û–í ================
 */
export const uploadCourierRegistrationDocuments = (req, res, next) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏
  req.body.userRole = 'courier';
  
  // –ü–æ–ª—è –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)
  const courierFields = [
    { name: 'id_card', maxCount: 1 },
    { name: 'bank_rib', maxCount: 1 },
    { name: 'driver_license', maxCount: 1 },
    { name: 'insurance', maxCount: 1 },
    { name: 'vehicle_registration', maxCount: 1 }
  ];
  
  const upload = uploadPdfDocuments.fields(courierFields);
  
  upload(req, res, (err) => {
    if (err) {
      return res.status(400).json({
        result: false,
        message: err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫—É—Ä—å–µ—Ä–∞"
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã
    const files = req.files;
    if (!files || Object.keys(files).length === 0) {
      return res.status(400).json({
        result: false,
        message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç"
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const vehicleType = req.body.vehicle_type;
    const requiredFields = ['id_card', 'bank_rib']; // –ë–∞–∑–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö
    
    if (['motorbike', 'car'].includes(vehicleType)) {
      requiredFields.push('driver_license', 'insurance');
    }
    
    if (vehicleType === 'car') {
      requiredFields.push('vehicle_registration');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const uploadedFields = Object.keys(files);
    const missingFields = requiredFields.filter(field => !uploadedFields.includes(field));
    
    if (missingFields.length > 0) {
      return res.status(400).json({
        result: false,
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: ${missingFields.join(', ')}`,
        missing_documents: missingFields,
        required_documents: requiredFields
      });
    }
    
    console.log('üìÑ COURIER DOCUMENTS UPLOADED:', {
      uploaded_fields: uploadedFields,
      vehicle_type: vehicleType,
      required_fields: requiredFields
    });
    
    next();
  });
};

/**
 * ================ MULTER –î–õ–Ø –ü–û–î–ê–ß–ò –î–û–ö–£–ú–ï–ù–¢–û–í –ü–ê–†–¢–ù–ï–†–û–í ================
 */
export const uploadPartnerLegalDocuments = (req, res, next) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏
  req.body.userRole = 'partner';
  
  // –ü–æ–ª—è –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
  const partnerFields = [
    { name: 'kbis_document', maxCount: 1 },
    { name: 'id_document', maxCount: 1 }
  ];
  
  const upload = uploadPdfDocuments.fields(partnerFields);
  
  upload(req, res, (err) => {
    if (err) {
      return res.status(400).json({
        result: false,
        message: err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
      });
    }
    
    const files = req.files;
    if (!files || Object.keys(files).length === 0) {
      return res.status(400).json({
        result: false,
        message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç"
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ª–µ–≥–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const uploadedFields = Object.keys(files);
    const requiredFields = ['kbis_document', 'id_document'];
    
    const missingFields = requiredFields.filter(field => !uploadedFields.includes(field));
    
    if (missingFields.length > 0) {
      return res.status(400).json({
        result: false,
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: ${missingFields.join(', ')}`,
        missing_documents: missingFields,
        required_documents: requiredFields
      });
    }
    
    console.log('üìÑ PARTNER DOCUMENTS UPLOADED:', {
      uploaded_fields: uploadedFields,
      required_fields: requiredFields
    });
    
    next();
  });
};

/**
 * ================ –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ö–£–†–¨–ï–†–û–í ================
 */
export const processCourierRegistrationDocuments = (req, res, next) => {
  try {
    const files = req.files;
    
    if (!files || Object.keys(files).length === 0) {
      return res.status(400).json({
        result: false,
        message: "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
      });
    }
    
    // ‚úÖ –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª—ã –≤ URL –ø–æ–ª—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
    Object.keys(files).forEach(fieldName => {
      const fileArray = files[fieldName];
      if (fileArray && fileArray.length > 0) {
        const file = fileArray[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        const relativePath = path.relative(process.cwd(), file.path);
        const url = `/${relativePath.replace(/\\/g, '/')}`; // –î–ª—è Windows
        
        // –°–æ–∑–¥–∞–µ–º URL –ø–æ–ª–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        req.body[`${fieldName}_url`] = url;
      }
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const urlFields = Object.keys(files).map(field => `${field}_url`);
    console.log('üìÑ COURIER REGISTRATION DOCUMENTS PROCESSED:', {
      uploaded_count: Object.keys(files).length,
      url_fields_created: urlFields,
      vehicle_type: req.body.vehicle_type
    });
    
    next();
    
  } catch (error) {
    console.error('üö® PROCESS COURIER DOCUMENTS ERROR:', error);
    return res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫—É—Ä—å–µ—Ä–∞",
      error: error.toString()
    });
  }
};

/**
 * ================ –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í –ü–ê–†–¢–ù–ï–†–û–í ================
 */
export const processPartnerLegalDocuments = (req, res, next) => {
  try {
    const files = req.files;
    
    if (!files || Object.keys(files).length === 0) {
      return res.status(400).json({
        result: false,
        message: "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
      });
    }
    
    // ‚úÖ –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç documents –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    req.body.documents = {};
    
    Object.keys(files).forEach(fieldName => {
      const fileArray = files[fieldName];
      if (fileArray && fileArray.length > 0) {
        const file = fileArray[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        const relativePath = path.relative(process.cwd(), file.path);
        const url = `/${relativePath.replace(/\\/g, '/')}`; // –î–ª—è Windows
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—ä–µ–∫—Ç documents
        req.body.documents[fieldName] = url;
      }
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üìÑ PARTNER LEGAL DOCUMENTS PROCESSED:', {
      uploaded_count: Object.keys(files).length,
      documents_object: Object.keys(req.body.documents)
    });
    
    next();
    
  } catch (error) {
    console.error('üö® PROCESS PARTNER DOCUMENTS ERROR:', error);
    return res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
      error: error.toString()
    });
  }
};

/**
 * ================ –≠–ö–°–ü–û–†–¢ ================
 */
export default{
  uploadCourierRegistrationDocuments,
  uploadPartnerLegalDocuments,
  processCourierRegistrationDocuments,
  processPartnerLegalDocuments
};