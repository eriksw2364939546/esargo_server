// middleware/fileUpload.middleware.js - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è ESARGO-SERVER
import multer from "multer";
import sharp from "sharp";
import path from "path";
import fs from "fs";

/**
 * ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–ê–ü–û–ö ====================
 */
const UPLOAD_CONFIGS = {
  partners: {
    restaurant: {
      base: "uploads/partners/partnersImage",
      menu: "uploads/partners/menusImage", 
      documents: "uploads/partners/documentsImage"
    },
    store: {
      base: "uploads/partners/partnersImage",
      menu: "uploads/partners/menusImage",
      documents: "uploads/partners/documentsImage"
    }
  },
  couriers: {
    avatars: "uploads/couriers/avatarsImage",
    documents: "uploads/couriers/documentsPdf"
  },
  admins: {
    avatars: "uploads/admins/avatarsImage"
  }
};

/**
 * ==================== –°–û–ó–î–ê–ù–ò–ï –ü–ê–ü–û–ö ====================
 */
const ensureDirectoryExists = (dirPath) => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`üìÅ Created directory: ${dirPath}`);
  }
};

// –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
Object.values(UPLOAD_CONFIGS.partners.restaurant).forEach(ensureDirectoryExists);
Object.values(UPLOAD_CONFIGS.couriers).forEach(ensureDirectoryExists);
Object.values(UPLOAD_CONFIGS.admins).forEach(ensureDirectoryExists);

/**
 * ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø MULTER ====================
 */
const storage = multer.memoryStorage();

// –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF
const fileFilter = (req, file, cb) => {
  const { uploadType } = req.body;
  
  // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (['restaurant-cover', 'menu-item', 'courier-avatar', 'admin-avatar'].includes(uploadType)) {
    if (!file.mimetype.startsWith("image/")) {
      return cb(new Error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!"), false);
    }
  }
  
  // –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  if (['partner-documents', 'courier-documents'].includes(uploadType)) {
    if (file.mimetype !== "application/pdf") {
      return cb(new Error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã!"), false);
    }
  }
  
  cb(null, true);
};

/**
 * ==================== –ë–ê–ó–û–í–´–ô MULTER ====================
 */
const uploadBase = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB
    fieldSize: 50 * 1024 * 1024
  }
});

/**
 * ==================== MIDDLEWARE –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ó–ê–ì–†–£–ó–ö–ò ====================
 */

// –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∞–≤–∞—Ç–∞—Ä–∫–∏, –æ–±–ª–æ–∂–∫–∏)
export const uploadSingleImage = uploadBase.single("image");

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–µ–Ω—é, –≥–∞–ª–µ—Ä–µ—è) 
export const uploadMultipleImages = uploadBase.array("images", 10);

// –î–æ–∫—É–º–µ–Ω—Ç—ã PDF
export const uploadDocuments = uploadBase.array("documents", 5);

/**
 * ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ====================
 */
export const processImages = async (req, res, next) => {
  try {
    const { uploadType, userRole } = req.body;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã
    const files = req.files || (req.file ? [req.file] : []);
    
    if (!files || files.length === 0) {
      return res.status(400).json({ 
        result: false, 
        message: "–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã" 
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    let uploadDir;
    switch (uploadType) {
      case 'restaurant-cover':
      case 'store-cover':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.base;
        break;
      case 'menu-item':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.menu;
        break;
      case 'courier-avatar':
        uploadDir = UPLOAD_CONFIGS.couriers.avatars;
        break;
      case 'admin-avatar':
        uploadDir = UPLOAD_CONFIGS.admins.avatars;
        break;
      default:
        return res.status(400).json({
          result: false,
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadType}`
        });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const processedImages = await Promise.all(
      files.map(async (file, index) => {
        const uniqueSuffix = `${Date.now()}-${index}`;
        const filename = `${uploadType}-${uniqueSuffix}.webp`;
        const outputPath = path.join(uploadDir, filename);

        await sharp(file.buffer)
          .resize(800, 800, { fit: "inside", withoutEnlargement: true })
          .webp({ quality: 80 })
          .toFile(outputPath);

        return {
          filename,
          originalName: file.originalname,
          size: file.size,
          path: outputPath,
          url: `/${uploadDir}/${filename}`,
          uploadType
        };
      })
    );

    req.uploadedFiles = processedImages;
    next();

  } catch (error) {
    console.error('üö® PROCESS IMAGES ERROR:', error);
    return res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
      error: error.toString()
    });
  }
};

/**
 * ==================== –û–ë–†–ê–ë–û–¢–ö–ê PDF –î–û–ö–£–ú–ï–ù–¢–û–í ====================
 */
export const processDocuments = async (req, res, next) => {
  try {
    const { uploadType, userRole } = req.body;
    
    const files = req.files || [];
    
    if (!files || files.length === 0) {
      return res.status(400).json({ 
        result: false, 
        message: "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã" 
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    let uploadDir;
    switch (uploadType) {
      case 'partner-documents':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.documents;
        break;
      case 'courier-documents':
        uploadDir = UPLOAD_CONFIGS.couriers.documents;
        break;
      default:
        return res.status(400).json({
          result: false,
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${uploadType}`
        });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const processedDocuments = await Promise.all(
      files.map(async (file, index) => {
        const uniqueSuffix = `${Date.now()}-${index}`;
        const filename = `${uploadType}-${uniqueSuffix}.pdf`;
        const outputPath = path.join(uploadDir, filename);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        await fs.promises.writeFile(outputPath, file.buffer);

        return {
          filename,
          originalName: file.originalname,
          size: file.size,
          path: outputPath,
          url: `/${uploadDir}/${filename}`,
          uploadType,
          documentType: file.fieldname || 'document'
        };
      })
    );

    req.uploadedDocuments = processedDocuments;
    next();

  } catch (error) {
    console.error('üö® PROCESS DOCUMENTS ERROR:', error);
    return res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
      error: error.toString()
    });
  }
};

/**
 * ==================== –£–î–ê–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í ====================
 */
export const deleteFile = async (req, res, next) => {
  try {
    const { filename, uploadType } = req.params;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ —Ç–∏–ø—É
    let uploadDir;
    switch (uploadType) {
      case 'restaurant-cover':
      case 'store-cover':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.base;
        break;
      case 'menu-item':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.menu;
        break;
      case 'courier-avatar':
        uploadDir = UPLOAD_CONFIGS.couriers.avatars;
        break;
      case 'admin-avatar':
        uploadDir = UPLOAD_CONFIGS.admins.avatars;
        break;
      case 'partner-documents':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.documents;
        break;
      case 'courier-documents':
        uploadDir = UPLOAD_CONFIGS.couriers.documents;
        break;
      default:
        return res.status(400).json({
          result: false,
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${uploadType}`
        });
    }

    const filePath = path.join(process.cwd(), uploadDir, filename);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    await fs.promises.access(filePath, fs.constants.F_OK);
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    await fs.promises.unlink(filePath);

    req.deletedFile = {
      filename,
      uploadType,
      path: filePath
    };

    next();

  } catch (error) {
    console.error('üö® DELETE FILE ERROR:', error);
    
    if (error.code === 'ENOENT') {
      return res.status(404).json({ 
        result: false, 
        message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" 
      });
    }
    
    return res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞",
      error: error.toString()
    });
  }
};

/**
 * ==================== –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –§–ê–ô–õ–û–í ====================
 */
export const getFilesList = async (req, res, next) => {
  try {
    const { uploadType } = req.params;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ —Ç–∏–ø—É
    let uploadDir;
    switch (uploadType) {
      case 'restaurant-cover':
      case 'store-cover':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.base;
        break;
      case 'menu-item':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.menu;
        break;
      case 'courier-avatar':
        uploadDir = UPLOAD_CONFIGS.couriers.avatars;
        break;
      case 'admin-avatar':
        uploadDir = UPLOAD_CONFIGS.admins.avatars;
        break;
      case 'partner-documents':
        uploadDir = UPLOAD_CONFIGS.partners.restaurant.documents;
        break;
      case 'courier-documents':
        uploadDir = UPLOAD_CONFIGS.couriers.documents;
        break;
      default:
        return res.status(400).json({
          result: false,
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–æ–≤: ${uploadType}`
        });
    }

    const fullPath = path.join(process.cwd(), uploadDir);
    const files = await fs.promises.readdir(fullPath);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    const filteredFiles = files.filter(file => {
      if (['partner-documents', 'courier-documents'].includes(uploadType)) {
        return file.match(/\.(pdf)$/i);
      } else {
        return file.match(/\.(jpg|jpeg|png|webp)$/i);
      }
    });

    req.filesList = {
      files: filteredFiles,
      uploadType,
      directory: uploadDir,
      count: filteredFiles.length
    };

    next();

  } catch (error) {
    console.error('üö® GET FILES LIST ERROR:', error);
    return res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤",
      error: error.toString()
    });
  }
};

/**
 * ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ò–ü–û–í –ó–ê–ì–†–£–ó–ö–ò ====================
 */
export const validateUploadType = (req, res, next) => {
  const { uploadType, userRole } = req.body;
  
  if (!uploadType) {
    return res.status(400).json({
      result: false,
      message: "–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ (uploadType) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ –∏ —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  const rolePermissions = {
    partner: ['restaurant-cover', 'store-cover', 'menu-item', 'partner-documents'],
    courier: ['courier-avatar', 'courier-documents'],
    admin: ['admin-avatar']
  };

  if (userRole && !rolePermissions[userRole]?.includes(uploadType)) {
    return res.status(403).json({
      result: false,
      message: `–†–æ–ª—å ${userRole} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã —Ç–∏–ø–∞ ${uploadType}`
    });
  }

  next();
};

/**
 * ==================== –≠–ö–°–ü–û–†–¢ ====================
 */
export default {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  uploadSingleImage,
  uploadMultipleImages,
  uploadDocuments,
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
  processImages,
  processDocuments,
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
  deleteFile,
  getFilesList,
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  validateUploadType,
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  UPLOAD_CONFIGS
};