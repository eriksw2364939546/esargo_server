// middleware/adminAuth.middleware.js - –ê–î–ú–ò–ù–°–ö–ò–ï MIDDLEWARE –ù–ê –û–°–ù–û–í–ï –í–ê–®–ï–ì–û –ü–†–ò–ú–ï–†–ê üéØ
import jwt from "jsonwebtoken";
import Meta from "../models/Meta.model.js";
import { hashMeta } from "../utils/hash.js";

/**
 * üîç –î–ï–ö–û–î–ò–†–û–í–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–û–ì–û –¢–û–ö–ï–ù–ê
 * –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É decodeToken –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
 */
const decodeAdminToken = async (token) => {
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º verify –≤–º–µ—Å—Ç–æ decode –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    const { user_id, _id, role, admin_role, is_admin } = decoded;

    // üéØ –ü–†–û–í–ï–†–ö–ê: —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω
    if (role !== "admin" || !is_admin) {
      return { 
        message: "Access denied! Role invalid!", 
        result: false, 
        status: 403 
      };
    }

    // üîç –ò–©–ï–ú –ê–î–ú–ò–ù–ê –í META –ü–û ID
    const adminId = user_id || _id;
    const metaInfo = await Meta.findOne({
      admin: adminId,
      role: "admin"
    }).populate("admin");

    if (!metaInfo || !metaInfo.admin) {
      return { 
        message: "Access denied! Admin is not defined!", 
        result: false, 
        status: 404 
      };
    }

    // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò –ê–î–ú–ò–ù–ê
    if (!metaInfo.admin.is_active) {
      return { 
        message: "Access denied! Admin account is inactive!", 
        result: false, 
        status: 403 
      };
    }

    if (metaInfo.admin.isSuspended && metaInfo.admin.isSuspended()) {
      return { 
        message: "Access denied! Admin account is suspended!", 
        result: false, 
        status: 403 
      };
    }

    return { 
      message: "Access approved!", 
      result: true, 
      admin: metaInfo.admin,
      admin_role: admin_role || metaInfo.admin.role
    };

  } catch (err) {
    if (err.name === 'TokenExpiredError') {
      return { 
        message: "Access denied! Token expired!", 
        result: false, 
        status: 403 
      };
    } else {
      return { 
        message: "Access denied! Token invalid!", 
        result: false, 
        status: 403 
      };
    }
  }
};

/**
 * üîê –ë–ê–ó–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–û–ì–û –¢–û–ö–ï–ù–ê
 * –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É checkModerToken
 */
export const checkAdminToken = async (req, res, next) => {
  try {
    const token = req.headers["authorization"]?.split(" ")[1];

    if (!token) {
      return res.status(403).json({ 
        message: "Access denied! Token undefined!", 
        result: false 
      });
    }

    const data = await decodeAdminToken(token);
    if (!data.result) {
      return res.status(data.status).json(data);
    }

    // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ê–î–ú–ò–ù–ê –í REQUEST
    req.admin = data.admin;
    req.admin_role = data.admin_role;
    req.user = data.admin; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏
    req.user.is_admin_user = true;
    req.user.admin_role = data.admin_role;

    next();

  } catch (error) {
    console.error("Admin auth error:", error);
    res.status(500).json({ 
      message: "Access denied!", 
      result: false, 
      error: error.message 
    });
  }
};

/**
 * üéØ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ü–û –ì–†–£–ü–ü–ê–ú –†–û–õ–ï–ô
 * –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É checkAccessByGroup
 */
export const checkAdminAccessByGroup = (adminRoles) => {
  return async (req, res, next) => {
    try {
      const token = req.headers["authorization"]?.split(" ")[1];

      if (!token) {
        return res.status(403).json({ 
          message: "Access denied! Token undefined!", 
          result: false 
        });
      }

      const data = await decodeAdminToken(token);
      if (!data.result) {
        return res.status(data.status).json(data);
      }

      // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –†–û–õ–¨ –ê–î–ú–ò–ù–ê
      const allowedRoles = Array.isArray(adminRoles) ? adminRoles : [adminRoles];
      
      if (!allowedRoles.includes(data.admin_role)) {
        return res.status(403).json({ 
          message: "Access denied! Admin role invalid!", 
          result: false,
          required_roles: allowedRoles,
          current_role: data.admin_role
        });
      }

      // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ê–î–ú–ò–ù–ê –í REQUEST
      req.admin = data.admin;
      req.admin_role = data.admin_role;
      req.user = data.admin; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      req.user.is_admin_user = true;
      req.user.admin_role = data.admin_role;

      next();

    } catch (error) {
      console.error("Admin group access error:", error);
      res.status(500).json({ 
        message: "Access denied!", 
        result: false, 
        error: error.message 
      });
    }
  };
};

/**
 * üîç –£–ü–†–û–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –¢–û–õ–¨–ö–û OWNER
 * –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export const requireOwner = checkAdminAccessByGroup(['owner']);

/**
 * üîç –ü–†–û–í–ï–†–ö–ê - OWNER –ò–õ–ò MANAGER
 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export const requireManagerOrOwner = checkAdminAccessByGroup(['owner', 'manager']);

/**
 * üîç –ü–†–û–í–ï–†–ö–ê - –õ–Æ–ë–û–ô –ê–î–ú–ò–ù
 * –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
 */
export const requireAnyAdmin = checkAdminAccessByGroup(['owner', 'manager', 'admin', 'support', 'moderator']);

export default {
  checkAdminToken,
  checkAdminAccessByGroup,
  requireOwner,
  requireManagerOrOwner,
  requireAnyAdmin
};