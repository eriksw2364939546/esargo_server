// ================ middleware/adminAuth.middleware.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–û –ü–ê–¢–¢–ï–†–ù–£) ================
import jwt from "jsonwebtoken";
import Meta from "../models/Meta.model.js";

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É moderator
 */
const decodeToken = async (token) => {
    try {
        console.log('üîç DECODING ADMIN TOKEN...');
        
        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º jwt.verify –≤–º–µ—Å—Ç–æ jwt.decode
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const { user_id, _id, role, admin_role } = decoded;
        const adminId = user_id || _id;

        console.log('üîç DECODED TOKEN DATA:', { 
            adminId, 
            role, 
            admin_role
        });

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
        if (role !== "admin") {
            console.log('‚ùå INVALID ROLE:', role);
            return { 
                message: "Access denied! Role invalid!", 
                result: false, 
                status: 403 
            };
        }

        console.log('üîç SEARCHING FOR ADMIN IN META:', { adminId });

        // ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —á–µ—Ä–µ–∑ Meta —Å populate –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        const metaInfo = await Meta.findOne({
            admin: adminId,     // ‚Üê –∏—â–µ–º –∞–¥–º–∏–Ω–∞ –≤ Meta
            role: "admin"       // ‚Üê —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å admin
        }).populate("admin");   // ‚Üê –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π AdminUser –æ–±—ä–µ–∫—Ç

        console.log('üîç META INFO RESULT:', {
            metaInfo_found: !!metaInfo,
            has_admin: !!metaInfo?.admin,
            admin_id: metaInfo?.admin?._id,
            admin_email: metaInfo?.admin?.email,
            admin_role: metaInfo?.admin?.role
        });

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
        if (!metaInfo || !metaInfo.admin) {
            console.log('‚ùå ADMIN NOT FOUND IN META');
            return { 
                message: "Access denied! Admin is not defined!", 
                result: false, 
                status: 404 
            };
        }

        const admin = metaInfo.admin;

        console.log('üîç ADMIN VALIDATION:', {
            admin_id: admin._id,
            email: admin.email,
            role: admin.role,
            is_active: admin.is_active,
            meta_is_active: metaInfo.is_active
        });

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∞
        if (!admin.is_active) {
            console.log('‚ùå ADMIN ACCOUNT INACTIVE');
            return {
                message: "Access denied! Admin account is inactive!",
                result: false,
                status: 403
            };
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Meta –∑–∞–ø–∏—Å–∏
        if (!metaInfo.is_active) {
            console.log('‚ùå META RECORD INACTIVE');
            return {
                message: "Access denied! Admin meta record is inactive!",
                result: false,
                status: 403
            };
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        if (admin.suspension && admin.suspension.is_suspended) {
            const now = new Date();
            const suspendedUntil = admin.suspension.suspended_until;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –æ–Ω–∞ –ø—Ä–æ—à–ª–∞
            if (suspendedUntil && now > suspendedUntil) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–º–∞–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É
                admin.suspension.is_suspended = false;
                admin.suspension.suspended_until = undefined;
                await admin.save();
                console.log('‚úÖ AUTO-UNSUSPENDED ADMIN:', admin._id);
            } else {
                console.log('‚ùå ADMIN ACCOUNT SUSPENDED');
                return {
                    message: "Access denied! Admin account is suspended!",
                    result: false,
                    status: 403
                };
            }
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        if (metaInfo.isAccountLocked && metaInfo.isAccountLocked()) {
            console.log('‚ùå ADMIN ACCOUNT LOCKED');
            return {
                message: "Access denied! Admin account is locked!",
                result: false,
                status: 423
            };
        }

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
            admin.last_activity_at = new Date();
            await admin.save();
        } catch (updateError) {
            console.warn('‚ö†Ô∏è Could not update admin activity:', updateError.message);
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }

        console.log('‚úÖ ADMIN ACCESS APPROVED:', {
            admin_id: admin._id,
            admin_role: admin.role,
            is_active: admin.is_active
        });

        // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
        return { 
            message: "Access approved!", 
            result: true, 
            admin: admin,                    // ‚Üê –ø–æ–ª–Ω—ã–π AdminUser –æ–±—ä–µ–∫—Ç
            admin_role: admin.role           // ‚Üê –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–æ–ª—å (owner/manager)
        };

    } catch (err) {
        console.error('üö® TOKEN DECODE ERROR:', err);
        
        if (err.name === 'TokenExpiredError') {
            return { message: "Access denied! Token expired!", result: false, status: 401 };
        } else if (err.name === 'JsonWebTokenError') {
            return { message: "Access denied! Token invalid!", result: false, status: 401 };
        } else {
            return { message: "Access denied! Token error!", result: false, status: 401 };
        }
    }
};

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É moderator
 */
const checkAdminToken = async (req, res, next) => {
    try {
        console.log('üîç CHECK ADMIN TOKEN - START');
        
        // ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
        const token = req.headers["authorization"]?.split(" ")[1];

        if (!token) {
            console.log('üö® NO TOKEN PROVIDED');
            return res.status(403).json({ 
                message: "Access denied! Token undefined!", 
                result: false 
            });
        }

        const data = await decodeToken(token);
        if (!data.result) {
            console.log('üö® TOKEN VALIDATION FAILED:', data.message);
            return res.status(data.status).json({
                message: data.message,
                result: false
            });
        }

        console.log('‚úÖ ADMIN TOKEN VERIFIED');
        
        // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
        req.admin = data.admin;
        req.admin_role = data.admin_role;

        next();

    } catch (error) {
        console.error('üö® CHECK ADMIN TOKEN ERROR:', error);
        res.status(500).json({ 
            message: "Access denied! Server error!", 
            result: false, 
            error: error.message 
        });
    }
};

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º —Ä–æ–ª–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É moderator
 */
const checkAccessByGroup = (requiredRoles) => {
    return async (req, res, next) => {
        try {
            console.log('üîç CHECK ACCESS BY GROUP:', { 
                required: requiredRoles,
                endpoint: req.path,
                method: req.method
            });
            
            // ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
            const token = req.headers["authorization"]?.split(" ")[1];

            if (!token) {
                return res.status(403).json({ 
                    message: "Access denied! Token undefined!", 
                    result: false 
                });
            }

            const data = await decodeToken(token);
            if (!data.result) {
                return res.status(data.status).json({
                    message: data.message,
                    result: false
                });
            }

            // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
            const userRole = data.admin_role;

            console.log('üîç ROLE ACCESS CHECK:', {
                required_roles: requiredRoles,
                user_role: userRole,
                has_access: requiredRoles.includes(userRole)
            });

            // ‚úÖ –ü–†–û–í–ï–†–ö–ê —Ä–æ–ª–µ–π –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
            if (!requiredRoles.includes(userRole)) {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                console.warn(`üö® UNAUTHORIZED ACCESS ATTEMPT:`, {
                    admin_id: data.admin._id,
                    admin_email: data.admin.email,
                    required_roles: requiredRoles,
                    actual_role: userRole,
                    endpoint: req.path,
                    method: req.method,
                    ip: req.ip,
                    timestamp: new Date()
                });

                return res.status(403).json({ 
                    message: "Access denied! Role invalid!", 
                    result: false
                });
            }

            console.log('‚úÖ ACCESS GRANTED:', {
                admin_role: userRole,
                endpoint: req.path
            });

            // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –≤ moderator –ø—Ä–∏–º–µ—Ä–µ
            req.admin = data.admin;
            req.admin_role = data.admin_role;

            next();

        } catch (error) {
            console.error('üö® ACCESS CHECK ERROR:', error);
            res.status(500).json({ 
                message: "Access denied! Server error!", 
                result: false, 
                error: error.message 
            });
        }
    };
};

export { 
    checkAdminToken, 
    checkAccessByGroup
};