// middleware/partnerAuth.middleware.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú –ü–ê–†–û–õ–Ø
import jwt from "jsonwebtoken";
import { User, InitialPartnerRequest, PartnerProfile, PartnerLegalInfo } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { verifyPartnerToken } from '../services/Partner/partner.auth.service.js';
import { validateFrenchPhone, validateSiret, validateFrenchIban, validateFrenchTva } from '../utils/validation.utils.js';

/**
 * ================== –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø EMAIL ==================
 */
const validateStrictEmail = (email) => {
    if (!email || typeof email !== 'string') {
        return { valid: false, message: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" };
    }

    // 1. –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (email.length < 5 || email.length > 254) {
        return { valid: false, message: "Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 254 —Å–∏–º–≤–æ–ª–æ–≤" };
    }

    // 2. –°—Ç—Ä–æ–≥–∏–π regex –¥–ª—è email (RFC 5322 compliant)
    const strictEmailRegex = /^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])*@[a-zA-Z0-9]([a-zA-Z0-9.-]*[a-zA-Z0-9])*\.[a-zA-Z]{2,}$/;
    
    if (!strictEmailRegex.test(email)) {
        return { valid: false, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: name@domain.com" };
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const forbiddenPatterns = [
        /\{\{.*?\}\}/, // Template –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {{...}}
        /\$\{.*?\}/, // JavaScript template literals ${...}
        /<%.*?%>/, // Template tags <%...%>
        /\[.*?\]/, // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ [...]
        /\s/, // –ü—Ä–æ–±–µ–ª—ã
        /[<>()[\]\\,;:"]/, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        /\.\./, // –î–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏
        /^\./, // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–∏
        /\.$/, // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ—á–∫–æ–π
        /@\./, // @ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        /\.@/, // –¢–æ—á–∫–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥ @
        /@@/, // –î–≤–æ–π–Ω—ã–µ @
        /__{2,}/, // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        /--{2,}/, // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
        /\.{2,}/ // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
    ];

    for (const pattern of forbiddenPatterns) {
        if (pattern.test(email)) {
            if (pattern.toString().includes('{{')) {
                return { valid: false, message: "Email –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å template –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø–∞ {{timestamp}}" };
            } else if (pattern.toString().includes('$')) {
                return { valid: false, message: "Email –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å JavaScript template –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ" };
            } else if (pattern.toString().includes('<')) {
                return { valid: false, message: "Email –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML —Ç–µ–≥–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã" };
            } else {
                return { valid: false, message: "Email —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" };
            }
        }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–µ–π email
    const [localPart, domainPart] = email.split('@');
    
    if (!localPart || !domainPart) {
        return { valid: false, message: "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –∏ –¥–æ–º–µ–Ω, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ @" };
    }

    if (localPart.length > 64) {
        return { valid: false, message: "–õ–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å email —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞)" };
    }

    if (domainPart.length > 255) {
        return { valid: false, message: "–î–æ–º–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å email —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)" };
    }

    // 4.1. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const suspiciousLocalPartPatterns = [
        /\d{10,}/, // –î–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞ (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ timestamp)
        /timestamp/i, // –°–ª–æ–≤–æ timestamp
        /random/i, // –°–ª–æ–≤–æ random
        /guid/i, // –°–ª–æ–≤–æ guid
        /uuid/i, // –°–ª–æ–≤–æ uuid
        /temp/i, // –°–ª–æ–≤–æ temp
        /test\d+/i, // test + —á–∏—Å–ª–∞
        /user\d{5,}/i, // user + –¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞
        /\d{4,}\.\d{4,}/, // –ü–∞—Ç—Ç–µ—Ä–Ω —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
    ];

    for (const pattern of suspiciousLocalPartPatterns) {
        if (pattern.test(localPart)) {
            return { valid: false, message: "Email —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π email" };
        }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
    const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])*(\.[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])*)*\.[a-zA-Z]{2,}$/;
    if (!domainRegex.test(domainPart)) {
        return { valid: false, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞ –≤ email" };
    }

    return { valid: true, message: "Email –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" };
};

/**
 * ================== –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–ê–†–¢–ù–ï–†–ê ==================
 */
const validatePartnerRegistrationData = (req, res, next) => {
    try {
        const data = req.body;

        console.log('üîç VALIDATE PARTNER DATA - Start:', {
            email: data.email,
            has_phone: !!data.phone,
            has_brand_name: !!data.brand_name,
            has_password: !!data.password,
            has_confirm_password: !!data.confirm_password,
            whatsapp_consent: data.whatsapp_consent
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const requiredFields = ['first_name', 'last_name', 'email', 'password', 'confirm_password', 'phone', 'business_name', 'category', 'address'];
        const missingFields = requiredFields.filter(field => !data[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingFields.join(', ')}`
            });
        }

        // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailValidation = validateStrictEmail(data.email);
        if (!emailValidation.valid) {
            return res.status(400).json({
                result: false,
                message: emailValidation.message,
                field: 'email',
                examples: [
                    'pierre@gmail.com',
                    'restaurant.owner@hotmail.fr',
                    'business123@yahoo.com'
                ]
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (!validateFrenchPhone(data.phone)) {
            return res.status(400).json({
                result: false,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
                example: "+33 6 12 34 56 78 –∏–ª–∏ 06 12 34 56 78"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if (data.password.length < 6) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            });
        }

        if (data.password.length > 128) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 128 —Å–∏–º–≤–æ–ª–æ–≤"
            });
        }

        // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ü–ê–†–û–õ–Ø
        if (!data.confirm_password || data.confirm_password.trim().length === 0) {
            return res.status(400).json({
                result: false,
                message: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
            });
        }

        if (data.password !== data.confirm_password) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const allowedCategories = [
            'restaurant', 'cafe', 'bakery', 'grocery', 'pharmacy', 
            'alcohol', 'flowers', 'convenience', 'other'
        ];
        
        if (!allowedCategories.includes(data.category)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                allowed_categories: allowedCategories
            });
        }

        // ‚úÖ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•
        req.body.first_name = data.first_name.trim();
        req.body.last_name = data.last_name.trim();
        req.body.email = data.email.toLowerCase().trim();
        req.body.phone = data.phone.replace(/\s/g, '');
        
        // ‚úÖ –£–ë–ò–†–ê–ï–ú confirm_password –∏–∑ req.body –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        delete req.body.confirm_password;

        console.log('‚úÖ PARTNER REGISTRATION DATA VALIDATION PASSED');
        next();

    } catch (error) {
        console.error('üö® VALIDATE PARTNER DATA ERROR:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        });
    }
};

/**
 * ================== –í–ê–õ–ò–î–ê–¶–ò–Ø –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• ==================
 */
const validateLegalInfoData = (req, res, next) => {
    try {
        const data = req.body;

        console.log('üîç VALIDATE LEGAL DATA - Start:', {
            has_siret: !!data.legal_data?.siret_number,
            has_iban: !!data.bank_details?.iban,
            has_legal_name: !!data.legal_data?.legal_name,
            has_legal_form: !!data.legal_data?.legal_form,
            has_documents: !!data.documents
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const requiredFields = {
            'legal_data.legal_name': '–ù–∞–∑–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞',
            'legal_data.siret_number': 'SIRET –Ω–æ–º–µ—Ä',
            'legal_data.legal_form': '–§–æ—Ä–º–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞',
            'legal_data.legal_address': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å',
            'legal_data.legal_representative': '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞',
            'bank_details.iban': 'IBAN',
            'bank_details.bic': 'BIC –∫–æ–¥',
            'legal_contact.email': 'Email —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞',
            'legal_contact.phone': '–¢–µ–ª–µ—Ñ–æ–Ω —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞'
        };

        const missingFields = [];
        for (const [fieldPath, fieldName] of Object.entries(requiredFields)) {
            const value = fieldPath.split('.').reduce((obj, key) => obj?.[key], data);
            if (!value || (typeof value === 'string' && value.trim().length === 0)) {
                missingFields.push(fieldName);
            }
        }

        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingFields.join(', ')}`
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è SIRET –Ω–æ–º–µ—Ä–∞
        if (!validateSiret(data.legal_data.siret_number)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SIRET –Ω–æ–º–µ—Ä",
                format: "14 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12345678901234"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ IBAN
        if (!validateFrenchIban(data.bank_details.iban)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π IBAN",
                format: "–î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å FR, –Ω–∞–ø—Ä–∏–º–µ—Ä: FR1420041010050500013M02606"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è TVA –Ω–æ–º–µ—Ä–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if (data.legal_data.tva_number && !validateFrenchTva(data.legal_data.tva_number)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TVA –Ω–æ–º–µ—Ä",
                format: "–§–æ—Ä–º–∞—Ç: FR + 11 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: FR12345678901"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
        const emailValidation = validateStrictEmail(data.legal_contact.email);
        if (!emailValidation.valid) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞: " + emailValidation.message
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —é—Ä. –ª–∏—Ü–∞
        if (!validateFrenchPhone(data.legal_contact.phone)) {
            return res.status(400).json({
                result: false,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω —é—Ä. –ª–∏—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
        const allowedLegalForms = [
            'Auto-entrepreneur', 'SASU', 'SARL', 'SAS', 'EURL', 
            'SA', 'SNC', 'SCI', 'SELARL', 'Micro-entreprise', 
            'EI', 'EIRL', 'Autre'
        ];
        
        if (data.legal_data.legal_form && !allowedLegalForms.includes(data.legal_data.legal_form)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ñ–æ—Ä–º–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞",
                allowed_forms: allowedLegalForms
            });
        }

        console.log('‚úÖ LEGAL DATA VALIDATION PASSED');
        next();

    } catch (error) {
        console.error('üö® VALIDATE LEGAL DATA ERROR:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        });
    }
};

/**
 * ================== –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê –ü–ê–†–¢–ù–ï–†–ê ==================
 */
const checkPartnerToken = async (req, res, next) => {
    try {
        const authHeader = req.headers["authorization"];
        const token = authHeader?.split(" ")[1];

        if (!token) {
            return res.status(401).json({ 
                message: "Access denied! Token required!", 
                result: false 
            });
        }

        const data = await verifyPartnerToken(token);
        
        if (!data.success) {
            return res.status(data.statusCode || 401).json({
                message: data.message,
                result: false
            });
        }

        console.log('‚úÖ TOKEN CHECK PASSED');
        req.partner = data.partner;
        req.user = data.partner;
        req.metaInfo = data.metaInfo;

        next();

    } catch (error) {
        console.error('üö® TOKEN CHECK ERROR:', error);
        res.status(500).json({ 
            message: "Access denied! Server error!", 
            result: false, 
            error: error.message 
        });
    }
};

/**
 * ================== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–ê–†–¢–ù–ï–†–ê ==================
 */
const checkPartnerStatus = (allowedStatuses) => {
    return async (req, res, next) => {
        try {
            const { partner } = req;

            const request = await InitialPartnerRequest.findOne({ 
                user_id: partner._id 
            });

            if (!request) {
                return res.status(404).json({
                    message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    result: false
                });
            }

            if (!allowedStatuses.includes(request.status)) {
                return res.status(403).json({
                    message: `–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –¢—Ä–µ–±—É–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${allowedStatuses.join(', ')}. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`,
                    result: false
                });
            }

            console.log('‚úÖ STATUS CHECK PASSED');
            req.partnerRequest = request;
            next();

        } catch (error) {
            console.error('üö® STATUS CHECK ERROR:', error);
            res.status(500).json({ 
                message: "Access denied! Server error!", 
                result: false, 
                error: error.message 
            });
        }
    };
};

/**
 * ================== –¢–†–ï–ë–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–ê–†–¢–ù–ï–†–ê ==================
 */
const requirePartnerProfile = async (req, res, next) => {
    try {
        const authHeader = req.headers["authorization"];
        const token = authHeader?.split(" ")[1];

        if (!token) {
            return res.status(401).json({ 
                message: "Access denied! Token required!", 
                result: false 
            });
        }

        const data = await verifyPartnerToken(token);
        if (!data.success) {
            return res.status(data.statusCode).json({
                message: data.message,
                result: false
            });
        }

        const partner = data.partner;
        const partnerProfile = await PartnerProfile.findOne({ user_id: partner._id });

        if (!partnerProfile) {
            return res.status(404).json({
                message: "Profile must be created first.",
                result: false
            });
        }

        console.log('‚úÖ PROFILE CHECK PASSED');
        req.partner = partner;
        req.user = partner;
        req.metaInfo = data.metaInfo;
        req.partnerProfile = partnerProfile;

        next();

    } catch (error) {
        console.error('üö® PROFILE CHECK ERROR:', error);
        res.status(500).json({ 
            message: "Access denied! Server error!", 
            result: false, 
            error: error.message 
        });
    }
};

/**
 * ================== –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ü–†–û–§–ò–õ–Æ ==================
 */
const checkProfileAccess = async (req, res, next) => {
    try {
        const { id } = req.params;
        const authHeader = req.headers["authorization"];
        const token = authHeader?.split(" ")[1];

        if (!token) {
            return res.status(401).json({ 
                message: "Access denied! Token required!", 
                result: false 
            });
        }

        const data = await verifyPartnerToken(token);
        if (!data.success) {
            return res.status(data.statusCode).json({
                message: data.message,
                result: false
            });
        }

        const partner = data.partner;
        const profile = await PartnerProfile.findById(id);

        if (!profile) {
            return res.status(404).json({
                message: "Profile not found!",
                result: false
            });
        }

        if (profile.user_id.toString() !== partner._id.toString()) {
            return res.status(403).json({
                message: "Access denied! You can only access your own profile!",
                result: false
            });
        }

        req.partner = partner;
        req.user = partner;
        req.metaInfo = data.metaInfo;
        req.partnerProfile = profile;

        next();

    } catch (error) {
        console.error('üö® PROFILE ACCESS CHECK ERROR:', error);
        res.status(500).json({ 
            message: "Access denied! Server error!", 
            result: false, 
            error: error.message 
        });
    }
};

export {
    checkPartnerToken,
    checkPartnerStatus,
    requirePartnerProfile,
    checkProfileAccess,
    validatePartnerRegistrationData,
    validateLegalInfoData
};