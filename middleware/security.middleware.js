// middleware/security.middleware.js
// üîê –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´ –û–¢ –ò–ù–™–ï–ö–¶–ò–ô

import validator from 'validator';
import mongoSanitize from 'express-mongo-sanitize';

/**
 * ================== –ë–õ–û–ö-–õ–ò–°–¢–´ –ò –û–ü–ê–°–ù–´–ï –°–ò–ú–í–û–õ–´ ==================
 */

// –û–ø–∞—Å–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã (–¥–∞–∂–µ –¥–ª—è MongoDB –ª—É—á—à–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
const SQL_INJECTION_PATTERNS = [
  /(\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\b)/gi,
  /(\b(OR|AND)\s+\w+\s*=\s*\w+)/gi,
  /(--|\/\*|\*\/|;)/g,
  /(\b(WAITFOR|DELAY)\b)/gi,
  /(\$where|\$regex)/gi
];

// MongoDB –∏–Ω—ä–µ–∫—Ü–∏–∏
const MONGODB_INJECTION_PATTERNS = [
  /(\$ne|\$gt|\$lt|\$gte|\$lte|\$in|\$nin|\$exists|\$regex|\$where)/gi,
  /(\{|\}|\[|\])/g, // JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö
  /(javascript:|data:|vbscript:)/gi
];

// XSS –∞—Ç–∞–∫–∏
const XSS_PATTERNS = [
  /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
  /<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi,
  /<object\b[^<]*(?:(?!<\/object>)<[^<]*)*<\/object>/gi,
  /<embed\b[^<]*(?:(?!<\/embed>)<[^<]*)*<\/embed>/gi,
  /(javascript:|data:|vbscript:)/gi,
  /on\w+\s*=/gi, // onclick, onload, etc.
  /(<|>|&lt;|&gt;)/g
];

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
const SYSTEM_COMMAND_PATTERNS = [
  /(\||&|;|`|\$\(|\$\{)/g,
  /(rm\s|del\s|format\s|shutdown\s|reboot\s)/gi,
  /(wget\s|curl\s|nc\s|netcat\s|telnet\s)/gi
];

/**
 * ================== –§–£–ù–ö–¶–ò–ò –°–ê–ù–ò–¢–ò–ó–ê–¶–ò–ò ==================
 */

/**
 * –ì–ª—É–±–æ–∫–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –æ—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∏–Ω—ä–µ–∫—Ü–∏–π
 */
const deepSanitizeString = (str) => {
  if (typeof str !== 'string') return str;
  
  let sanitized = str;
  
  // 1. –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  sanitized = sanitized.trim();
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  if (!sanitized) return sanitized;
  
  // 3. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
  sanitized = validator.escape(sanitized);
  
  // 4. –£–¥–∞–ª—è–µ–º SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
  SQL_INJECTION_PATTERNS.forEach(pattern => {
    sanitized = sanitized.replace(pattern, '');
  });
  
  // 5. –£–¥–∞–ª—è–µ–º MongoDB –∏–Ω—ä–µ–∫—Ü–∏–∏
  MONGODB_INJECTION_PATTERNS.forEach(pattern => {
    sanitized = sanitized.replace(pattern, '');
  });
  
  // 6. –£–¥–∞–ª—è–µ–º XSS
  XSS_PATTERNS.forEach(pattern => {
    sanitized = sanitized.replace(pattern, '');
  });
  
  // 7. –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  SYSTEM_COMMAND_PATTERNS.forEach(pattern => {
    sanitized = sanitized.replace(pattern, '');
  });
  
  return sanitized;
};

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è email
 */
const sanitizeEmail = (email) => {
  if (!email || typeof email !== 'string') return '';
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º email
  let sanitized = email.toLowerCase().trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ email
  if (!validator.isEmail(sanitized)) {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
  sanitized = sanitized.replace(/[<>]/g, '');
  
  return sanitized;
};

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–∞—Ä–æ–ª–µ–π
 */
const sanitizePassword = (password) => {
  if (!password || typeof password !== 'string') {
    throw new Error('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
  if (password.length < 6) {
    throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  if (password.length > 128) {
    throw new Error('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 128 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª—è—Ö
  const dangerousChars = ['<', '>', '"', "'", '&', '`', ';', '|', '$'];
  if (dangerousChars.some(char => password.includes(char))) {
    throw new Error('–ü–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: < > " \' & ` ; | $');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ SQL/MongoDB –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ –ø–∞—Ä–æ–ª–µ
  const sqlPattern = /(SELECT|INSERT|UPDATE|DELETE|DROP|\$ne|\$gt|javascript:|<script)/gi;
  if (sqlPattern.test(password)) {
    throw new Error('–ü–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã');
  }
  
  return password; // –ü–∞—Ä–æ–ª—å –Ω–µ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
};

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞
 */
const deepSanitizeObject = (obj) => {
  if (obj === null || obj === undefined) return obj;
  
  if (typeof obj === 'string') {
    return deepSanitizeString(obj);
  }
  
  if (typeof obj !== 'object') return obj;
  
  if (Array.isArray(obj)) {
    return obj.map(deepSanitizeObject);
  }
  
  const sanitized = {};
  for (const [key, value] of Object.entries(obj)) {
    // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Ç–æ–∂–µ
    const cleanKey = deepSanitizeString(key);
    sanitized[cleanKey] = deepSanitizeObject(value);
  }
  
  return sanitized;
};

/**
 * ================== MIDDLEWARE –§–£–ù–ö–¶–ò–ò ==================
 */

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∏–Ω—ä–µ–∫—Ü–∏–π
 */
export const securitySanitizer = (req, res, next) => {
  try {
    console.log('üîí SECURITY SANITIZER - Start');
    
    // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º express-mongo-sanitize (–±–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞)
    mongoSanitize.sanitize(req.body, {
      replaceWith: '_',
      onSanitize: ({ req, key }) => {
        console.warn(`üö® MongoDB injection blocked: ${key}`);
      }
    });
    
    // 2. –ì–ª—É–±–æ–∫–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è body
    if (req.body && typeof req.body === 'object') {
      req.body = deepSanitizeObject(req.body);
    }
    
    // 3. –ì–ª—É–±–æ–∫–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (req.query && typeof req.query === 'object') {
      req.query = deepSanitizeObject(req.query);
    }
    
    // 4. –ì–ª—É–±–æ–∫–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è params
    if (req.params && typeof req.params === 'object') {
      req.params = deepSanitizeObject(req.params);
    }
    
    console.log('‚úÖ SECURITY SANITIZER - Completed');
    next();
    
  } catch (error) {
    console.error('üö® SECURITY SANITIZER ERROR:', error);
    return res.status(400).json({
      result: false,
      message: error.message || '–î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã',
      error_code: 'SECURITY_VIOLATION'
    });
  }
};

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–æ–ª–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export const authFieldsSanitizer = (req, res, next) => {
  try {
    console.log('üîí AUTH FIELDS SANITIZER - Start');
    
    const { email, password, confirm_password } = req.body;
    
    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è email
    if (email) {
      try {
        req.body.email = sanitizeEmail(email);
      } catch (error) {
        return res.status(400).json({
          result: false,
          message: error.message
        });
      }
    }
    
    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password) {
      try {
        req.body.password = sanitizePassword(password);
      } catch (error) {
        return res.status(400).json({
          result: false,
          message: error.message
        });
      }
    }
    
    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    if (confirm_password) {
      try {
        req.body.confirm_password = sanitizePassword(confirm_password);
      } catch (error) {
        return res.status(400).json({
          result: false,
          message: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è: ' + error.message
        });
      }
    }
    
    console.log('‚úÖ AUTH FIELDS SANITIZER - Completed');
    next();
    
  } catch (error) {
    console.error('üö® AUTH FIELDS SANITIZER ERROR:', error);
    return res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    });
  }
};

/**
 * Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 */
export const headersSecurity = (req, res, next) => {
  try {
    const suspiciousHeaders = [
      'x-forwarded-for',
      'x-real-ip',
      'x-cluster-client-ip'
    ];
    
    suspiciousHeaders.forEach(header => {
      if (req.headers[header]) {
        const value = req.headers[header];
        if (typeof value === 'string' && 
            (value.includes('<') || value.includes('>') || value.includes('script'))) {
          console.warn(`üö® Suspicious header blocked: ${header}=${value}`);
          delete req.headers[header];
        }
      }
    });
    
    next();
  } catch (error) {
    console.error('üö® HEADERS SECURITY ERROR:', error);
    next();
  }
};

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export const securityLogger = (req, res, next) => {
  const originalBody = JSON.stringify(req.body);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const suspiciousPatterns = [
    /\$ne|\$gt|\$lt/gi, // MongoDB –∏–Ω—ä–µ–∫—Ü–∏–∏
    /SELECT.*FROM/gi,   // SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
    /<script/gi,        // XSS
    /javascript:/gi,    // XSS —á–µ—Ä–µ–∑ URL
    /\|\||&&/g          // –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
  ];
  
  const isSuspicious = suspiciousPatterns.some(pattern => 
    pattern.test(originalBody) || 
    pattern.test(req.originalUrl)
  );
  
  if (isSuspicious) {
    console.warn('üö® SUSPICIOUS REQUEST DETECTED:', {
      ip: req.ip,
      method: req.method,
      url: req.originalUrl,
      body: originalBody,
      headers: req.headers,
      timestamp: new Date().toISOString()
    });
  }
  
  next();
};

/**
 * ================== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô ==================
 */

export {
  deepSanitizeString,
  sanitizeEmail,
  sanitizePassword,
  deepSanitizeObject
};