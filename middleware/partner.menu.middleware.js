// ================ middleware/partner.menu.middleware.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ================
import { PartnerProfile, Product } from '../models/index.js';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
 * –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ã —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
 */
const requireMenuAccess = async (req, res, next) => {
    try {
        const { user } = req;

        console.log('üîç REQUIRE MENU ACCESS:', {
            user_id: user._id,
            user_role: user.role
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
        if (!user || user.role !== 'partner') {
            return res.status(403).json({
                result: false,
                message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        const partner = await PartnerProfile.findOne({ user_id: user._id });
        
        if (!partner) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–∞—á–∞–ª–∞."
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è
        if (!partner.is_approved) {
            return res.status(403).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                current_status: partner.approval_status
            });
        }

        console.log('‚úÖ MENU ACCESS GRANTED');
        req.partner = user;
        req.partnerProfile = partner; // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö middleware

        next();

    } catch (error) {
        console.error('üö® REQUIRE MENU ACCESS ERROR:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é"
        });
    }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
 * ‚úÖ –¢–û–õ–¨–ö–û –í–ê–õ–ò–î–ê–¶–ò–Ø - –ù–ï–¢ –†–ê–ë–û–¢–´ –° –ú–û–î–ï–õ–Ø–ú–ò
 */
const validateMenuCategoryData = (req, res, next) => {
    try {
        const { name, description, image_url, sort_order } = req.body;

        console.log('üîç VALIDATE MENU CATEGORY DATA:', {
            has_name: !!name,
            name_length: name ? name.length : 0,
            has_description: !!description,
            has_image: !!image_url
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if (req.method === 'POST') {
            // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
            if (!name || name.trim().length === 0) {
                return res.status(400).json({
                    result: false,
                    message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
                });
            }
        }

        if (name && name.length > 50) {
            return res.status(400).json({
                result: false,
                message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤"
            });
        }

        if (description && description.length > 200) {
            return res.status(400).json({
                result: false,
                message: "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤"
            });
        }

        if (image_url && typeof image_url !== 'string') {
            return res.status(400).json({
                result: false,
                message: "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
            });
        }

        if (sort_order !== undefined && (typeof sort_order !== 'number' || sort_order < 0)) {
            return res.status(400).json({
                result: false,
                message: "–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
            });
        }

        console.log('‚úÖ MENU CATEGORY DATA VALIDATED');
        next();

    } catch (error) {
        console.error('üö® VALIDATE MENU CATEGORY DATA ERROR:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        });
    }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
 * ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–¢ req.partnerProfile –∏–∑ requireMenuAccess
 */
const validateProductData = (req, res, next) => {
    try {
        const { partnerProfile } = req; // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ middleware
        const { 
            title, price, subcategory, options_groups, 
            preparation_time, discount_price, product_info 
        } = req.body;

        console.log('üîç VALIDATE PRODUCT DATA:', {
            partner_category: partnerProfile.category,
            has_title: !!title,
            has_price: !!price,
            has_options: !!options_groups,
            options_count: options_groups ? options_groups.length : 0
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (req.method === 'POST') {
            const requiredFields = ['title', 'price', 'subcategory'];
            const missingFields = requiredFields.filter(field => !req.body[field]);
            
            if (missingFields.length > 0) {
                return res.status(400).json({
                    result: false,
                    message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
                });
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if (title && title.length > 150) {
            return res.status(400).json({
                result: false,
                message: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
        if (price !== undefined) {
            if (typeof price !== 'number' || price <= 0) {
                return res.status(400).json({
                    result: false,
                    message: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
                });
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫–∏–¥–æ—á–Ω–æ–π —Ü–µ–Ω—ã
        if (discount_price !== undefined && discount_price !== null) {
            if (typeof discount_price !== 'number' || discount_price < 0) {
                return res.status(400).json({
                    result: false,
                    message: "–°–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
                });
            }
            
            if (price && discount_price >= price) {
                return res.status(400).json({
                    result: false,
                    message: "–°–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã"
                });
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        if (preparation_time !== undefined) {
            if (typeof preparation_time !== 'number' || preparation_time < 0) {
                return res.status(400).json({
                    result: false,
                    message: "–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
                });
            }
        }

        // ‚úÖ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –†–ï–°–¢–û–†–ê–ù vs –ú–ê–ì–ê–ó–ò–ù
        if (partnerProfile.category === 'restaurant') {
            // üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–±–∞–≤–æ–∫
            if (options_groups && Array.isArray(options_groups)) {
                for (let i = 0; i < options_groups.length; i++) {
                    const group = options_groups[i];
                    
                    if (!group.name || typeof group.name !== 'string') {
                        return res.status(400).json({
                            result: false,
                            message: `–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–æ–∫ ${i + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`
                        });
                    }

                    if (group.name.length > 50) {
                        return res.status(400).json({
                            result: false,
                            message: `–ì—Ä—É–ø–ø–∞ "${group.name}": –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤`
                        });
                    }

                    if (!group.options || !Array.isArray(group.options) || group.options.length === 0) {
                        return res.status(400).json({
                            result: false,
                            message: `–ì—Ä—É–ø–ø–∞ "${group.name}": –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –æ–ø—Ü–∏—é`
                        });
                    }

                    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ü–∏–π
                    for (let j = 0; j < group.options.length; j++) {
                        const option = group.options[j];
                        
                        if (!option.name || typeof option.name !== 'string') {
                            return res.status(400).json({
                                result: false,
                                message: `–û–ø—Ü–∏—è ${j + 1} –≤ –≥—Ä—É–ø–ø–µ "${group.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`
                            });
                        }

                        if (option.name.length > 50) {
                            return res.status(400).json({
                                result: false,
                                message: `–û–ø—Ü–∏—è "${option.name}": –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤`
                            });
                        }

                        if (typeof option.price !== 'number' || option.price < 0) {
                            return res.status(400).json({
                                result: false,
                                message: `–û–ø—Ü–∏—è "${option.name}": —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º`
                            });
                        }
                    }
                }
            }
        } else if (partnerProfile.category === 'store') {
            // üè™ –ú–ê–ì–ê–ó–ò–ù: –ó–∞–ø—Ä–µ—Ç –¥–æ–±–∞–≤–æ–∫ + –≤–∞–ª–∏–¥–∞—Ü–∏—è —É–ø–∞–∫–æ–≤–∫–∏
            if (options_groups && options_groups.length > 0) {
                return res.status(400).json({
                    result: false,
                    message: "–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø—Ü–∏–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º",
                    business_rule: "–¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥–æ–±–∞–≤–∫–∏ –∫ –±–ª—é–¥–∞–º",
                    partner_category: partnerProfile.category
                });
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ø–∞–∫–æ–≤–∫–µ
            if (product_info) {
                if (product_info.weight_grams && (typeof product_info.weight_grams !== 'number' || product_info.weight_grams <= 0)) {
                    return res.status(400).json({
                        result: false,
                        message: "–í–µ—Å —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
                    });
                }

                if (product_info.volume_ml && (typeof product_info.volume_ml !== 'number' || product_info.volume_ml <= 0)) {
                    return res.status(400).json({
                        result: false,
                        message: "–û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
                    });
                }

                if (product_info.unit_count && (typeof product_info.unit_count !== 'number' || product_info.unit_count < 1)) {
                    return res.status(400).json({
                        result: false,
                        message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1"
                    });
                }

                // –í–∞–ª–∏–¥–∞—Ü–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ EAN13
                if (product_info.barcode_ean13 && !/^\d{13}$/.test(product_info.barcode_ean13)) {
                    return res.status(400).json({
                        result: false,
                        message: "–®—Ç—Ä–∏—Ö-–∫–æ–¥ EAN13 –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 13 —Ü–∏—Ñ—Ä"
                    });
                }

                // –í–∞–ª–∏–¥–∞—Ü–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ EAN8
                if (product_info.barcode_ean8 && !/^\d{8}$/.test(product_info.barcode_ean8)) {
                    return res.status(400).json({
                        result: false,
                        message: "–®—Ç—Ä–∏—Ö-–∫–æ–¥ EAN8 –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —Ü–∏—Ñ—Ä"
                    });
                }
            }
        }

        console.log('‚úÖ PRODUCT DATA VALIDATED');
        next();

    } catch (error) {
        console.error('üö® VALIDATE PRODUCT DATA ERROR:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞"
        });
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
 */
const checkCategoryOwnership = async (req, res, next) => {
    try {
        const { user } = req;
        const { category_id } = req.params;

        console.log('üîç CHECK CATEGORY OWNERSHIP:', {
            user_id: user._id,
            category_id: category_id
        });

        const partner = await PartnerProfile.findOne({ user_id: user._id });
        
        if (!partner) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const category = partner.menu_categories.id(category_id);
        
        if (!category) {
            return res.status(404).json({
                result: false,
                message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é"
            });
        }

        console.log('‚úÖ CATEGORY OWNERSHIP VERIFIED');
        req.partner = user;
        req.partnerProfile = partner;
        req.menuCategory = category;

        next();

    } catch (error) {
        console.error('üö® CHECK CATEGORY OWNERSHIP ERROR:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        });
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
 */
const checkProductOwnership = async (req, res, next) => {
    try {
        const { user } = req;
        const { product_id } = req.params;

        console.log('üîç CHECK PRODUCT OWNERSHIP:', {
            user_id: user._id,
            product_id: product_id
        });

        const partner = await PartnerProfile.findOne({ user_id: user._id });
        
        if (!partner) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞
        const product = await Product.findOne({
            _id: product_id,
            partner_id: partner._id
        });
        
        if (!product) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é"
            });
        }

        console.log('‚úÖ PRODUCT OWNERSHIP VERIFIED');
        req.partner = user;
        req.partnerProfile = partner;
        req.product = product;

        next();

    } catch (error) {
        console.error('üö® CHECK PRODUCT OWNERSHIP ERROR:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç"
        });
    }
};

export {
    requireMenuAccess,
    validateMenuCategoryData,
    validateProductData,
    checkCategoryOwnership,
    checkProductOwnership
};