// controllers/CartController.js - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ESARGO
import { 
  findOrCreateCart,
  addItemToCart,
  updateCartItemService,
  removeItemFromCart,
  clearUserCart,
  calculateDeliveryForCart
} from '../services/Cart/cart.service.js';

import { getDeliveryZones } from '../services/Address/address.service.js'; // ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
import { getCustomerAddressById } from '../services/Address/address.service.js'; // ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø

// ================ –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ú–ê–†–°–ï–õ–Ø ================

const MARSEILLE_BOUNDS = {
  lat: { min: 43.200, max: 43.350 },
  lng: { min: 5.200, max: 5.600 }
};

/**
 * üõí –ü–û–õ–£–ß–ò–¢–¨ –°–û–î–ï–†–ñ–ò–ú–û–ï –ö–û–†–ó–ò–ù–´ - –û–ë–ù–û–í–õ–ï–ù–û
 * GET /api/cart
 */
const getCart = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { include_delivery_zones = false } = req.query; // ‚úÖ –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†

    console.log('üõí GET CART:', { 
      customer_id: user._id, 
      session_id: sessionId,
      include_delivery_zones 
    });

    const result = await findOrCreateCart(user._id, sessionId);

    const response = {
      result: true,
      message: result.cart ? "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞" : "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
      cart: result.cart,
      summary: {
        total_items: result.cart ? result.cart.total_items : 0,
        subtotal: result.cart ? result.cart.pricing.subtotal : 0,
        delivery_fee: result.cart ? result.cart.pricing.delivery_fee : 0,
        total_price: result.cart ? result.cart.pricing.total_price : 0,
        meets_minimum_order: result.cart ? result.cart.meets_minimum_order : false,
        // ‚úÖ –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–ê–í–ö–ï
        delivery_zone: result.cart?.delivery_info?.zone || null,
        delivery_distance_km: result.cart?.delivery_info?.distance_km || null
      }
    };

    // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ó–û–ù–ê–• –î–û–°–¢–ê–í–ö–ò (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
    if (include_delivery_zones === 'true') {
      response.delivery_zones_info = getDeliveryZones();
    }

    res.status(200).json(response);

  } catch (error) {
    console.error('üö® GET CART Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"
    });
  }
};

/**
 * ‚ûï –î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† –í –ö–û–†–ó–ò–ù–£
 * POST /api/cart/items
 */
const addToCart = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { 
      product_id, 
      quantity = 1, 
      selected_options = [], 
      special_requests = '' 
    } = req.body;

    console.log('‚ûï ADD TO CART:', {
      customer_id: user._id,
      product_id,
      quantity,
      options_count: selected_options.length
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!product_id) {
      return res.status(400).json({
        result: false,
        message: "ID —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
      });
    }

    if (quantity < 1) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
      });
    }

    const result = await addItemToCart(user._id, sessionId, {
      product_id,
      quantity: parseInt(quantity),
      selected_options,
      special_requests: special_requests.trim()
    });

    res.status(201).json({
      result: true,
      message: result.isNewItem ? "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É" : "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      cart: result.cart,
      added_item: result.addedItem,
      summary: {
        total_items: result.cart.total_items,
        subtotal: result.cart.pricing.subtotal,
        total_price: result.cart.pricing.total_price,
        meets_minimum_order: result.cart.meets_minimum_order,
        // ‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–ö–£–©–ï–ô –î–û–°–¢–ê–í–ö–ï
        current_delivery_zone: result.cart.delivery_info?.zone || null,
        needs_delivery_calculation: !result.cart.delivery_info?.zone
      }
    });

  } catch (error) {
    console.error('üö® ADD TO CART Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω') ? 422 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"
    });
  }
};

/**
 * ‚úèÔ∏è –û–ë–ù–û–í–ò–¢–¨ –¢–û–í–ê–† –í –ö–û–†–ó–ò–ù–ï
 * PUT /api/cart/items/:item_id
 */
const updateCartItem = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { item_id } = req.params;
    const { quantity, selected_options, special_requests } = req.body;

    console.log('‚úèÔ∏è UPDATE CART ITEM:', {
      customer_id: user._id,
      item_id,
      new_quantity: quantity
    });

    if (!item_id) {
      return res.status(400).json({
        result: false,
        message: "ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
      });
    }

    if (quantity !== undefined && quantity < 1) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
      });
    }

    const result = await updateCartItemService(user._id, sessionId, item_id, {
      quantity: quantity ? parseInt(quantity) : undefined,
      selected_options,
      special_requests: special_requests?.trim()
    });

    res.status(200).json({
      result: true,
      message: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω",
      cart: result.cart,
      updated_item: result.updatedItem,
      summary: {
        total_items: result.cart.total_items,
        subtotal: result.cart.pricing.subtotal,
        total_price: result.cart.pricing.total_price
      }
    });

  } catch (error) {
    console.error('üö® UPDATE CART ITEM Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"
    });
  }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–† –ò–ó –ö–û–†–ó–ò–ù–´
 * DELETE /api/cart/items/:item_id
 */
const removeFromCart = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { item_id } = req.params;

    console.log('üóëÔ∏è REMOVE FROM CART:', { customer_id: user._id, item_id });

    if (!item_id) {
      return res.status(400).json({
        result: false,
        message: "ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
      });
    }

    const result = await removeItemFromCart(user._id, sessionId, item_id);

    res.status(200).json({
      result: true,
      message: result.cart ? "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" : "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
      cart: result.cart,
      removed_item: result.removedItem,
      summary: result.cart ? {
        total_items: result.cart.total_items,
        subtotal: result.cart.pricing.subtotal,
        total_price: result.cart.pricing.total_price
      } : null
    });

  } catch (error) {
    console.error('üö® REMOVE FROM CART Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
    });
  }
};

/**
 * üóëÔ∏è –û–ß–ò–°–¢–ò–¢–¨ –ö–û–†–ó–ò–ù–£
 * DELETE /api/cart
 */
const clearCart = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;

    console.log('üóëÔ∏è CLEAR CART:', { customer_id: user._id });

    const result = await clearUserCart(user._id, sessionId);

    res.status(200).json({
      result: true,
      message: "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
      cleared_items_count: result.clearedItemsCount,
      saved_amount: result.savedAmount
    });

  } catch (error) {
    console.error('üö® CLEAR CART Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"
    });
  }
};

/**
 * üöö –†–ê–°–°–ß–ò–¢–ê–¢–¨ –î–û–°–¢–ê–í–ö–£ - –û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø ESARGO
 * POST /api/cart/calculate-delivery
 */
const calculateDelivery = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { delivery_address, saved_address_id } = req.body; // ‚úÖ –ù–û–í–û–ï: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤

    console.log('üöö CALCULATE DELIVERY (ESARGO):', {
      customer_id: user._id,
      has_address: !!delivery_address,
      has_saved_address_id: !!saved_address_id
    });

    // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ
    let finalDeliveryAddress = null;

    if (saved_address_id) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
      try {
        const savedAddressResult = await getCustomerAddressById(user._id, saved_address_id);
        const savedAddress = savedAddressResult.address;
        
        finalDeliveryAddress = {
          address: savedAddress.address,
          lat: savedAddress.lat,
          lng: savedAddress.lng,
          apartment: savedAddress.details?.apartment || '',
          entrance: savedAddress.details?.entrance || '',
          delivery_notes: savedAddress.details?.delivery_notes || '',
          // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          address_source: 'saved_address',
          address_id: saved_address_id,
          address_name: savedAddress.name
        };
        
        console.log('üìç Using saved address for delivery calculation:', {
          address_id: saved_address_id,
          name: savedAddress.name,
          zone: savedAddress.delivery_info?.zone
        });
        
      } catch (addressError) {
        return res.status(400).json({
          result: false,
          message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞: ${addressError.message}`
        });
      }
    } else if (delivery_address) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
      finalDeliveryAddress = {
        ...delivery_address,
        address_source: 'manual_input'
      };
    } else {
      return res.status(400).json({
        result: false,
        message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"
      });
    }

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–î–†–ï–°–ê –î–õ–Ø –ú–ê–†–°–ï–õ–Ø
    if (!finalDeliveryAddress.lat || !finalDeliveryAddress.lng) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (lat, lng) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    if (!finalDeliveryAddress.address) {
      return res.status(400).json({
        result: false,
        message: "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ú–∞—Ä—Å–µ–ª—è
    if (finalDeliveryAddress.lat < MARSEILLE_BOUNDS.lat.min || 
        finalDeliveryAddress.lat > MARSEILLE_BOUNDS.lat.max ||
        finalDeliveryAddress.lng < MARSEILLE_BOUNDS.lng.min || 
        finalDeliveryAddress.lng > MARSEILLE_BOUNDS.lng.max) {
      return res.status(422).json({
        result: false,
        message: "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–∞—Ä—Å–µ–ª—è",
        marseille_bounds: MARSEILLE_BOUNDS
      });
    }

    // ‚úÖ –†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò –ß–ï–†–ï–ó –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ï–†–í–ò–°
    const result = await calculateDeliveryForCart(user._id, sessionId, finalDeliveryAddress);

    res.status(200).json({
      result: true,
      message: "–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ (—Å–∏—Å—Ç–µ–º–∞ ESARGO)",
      cart: result.cart,
      delivery: {
        fee: result.deliveryFee,
        distance_km: result.distance,
        estimated_time_minutes: result.estimatedTime,
        delivery_zone: result.deliveryZone, // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï
        is_large_order: result.isLargeOrder, // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï
        address: finalDeliveryAddress.address,
        // ‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–°–¢–û–ß–ù–ò–ö–ï –ê–î–†–ï–°–ê
        address_info: {
          source: finalDeliveryAddress.address_source,
          address_name: finalDeliveryAddress.address_name || null,
          address_id: finalDeliveryAddress.address_id || null
        }
      },
      pricing: {
        subtotal: result.cart.pricing.subtotal,
        delivery_fee: result.cart.pricing.delivery_fee,
        service_fee: result.cart.pricing.service_fee,
        total_price: result.cart.pricing.total_price
      },
      // ‚úÖ –ù–û–í–ê–Ø –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß–ï–¢–ê ESARGO
      esargo_calculation: {
        delivery_zone: result.deliveryZone,
        zone_description: result.deliveryZone === 1 ? '–¶–µ–Ω—Ç—Ä –ú–∞—Ä—Å–µ–ª—è (0-5–∫–º)' : '–ë–æ–ª—å—à–æ–π –ú–∞—Ä—Å–µ–ª—å (5-10–∫–º)',
        distance_km: result.distance,
        order_meets_discount: result.isLargeOrder,
        minimum_order_amount: 30,
        peak_hour_checked: true
      }
    });

  } catch (error) {
    console.error('üö® CALCULATE DELIVERY Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–ø—É—Å—Ç–∞') || 
               error.message.includes('–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã') ||
               error.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞') ||
               error.message.includes('–∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏",
      // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      debug_info: {
        marseille_bounds: MARSEILLE_BOUNDS,
        delivery_zones: getDeliveryZones()
      }
    });
  }
};

/**
 * ‚úÖ –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ê–í–ö–ò
 * POST /api/cart/check-delivery
 */
const checkDeliveryAvailability = async (req, res) => {
  try {
    const { user } = req;
    const { lat, lng, address } = req.body;

    console.log('üîç CHECK DELIVERY AVAILABILITY:', { 
      customer_id: user._id, 
      lat, 
      lng 
    });

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!lat || !lng || typeof lat !== 'number' || typeof lng !== 'number') {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (lat, lng) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ú–∞—Ä—Å–µ–ª—è
    const isInMarseille = (
      lat >= MARSEILLE_BOUNDS.lat.min && lat <= MARSEILLE_BOUNDS.lat.max &&
      lng >= MARSEILLE_BOUNDS.lng.min && lng <= MARSEILLE_BOUNDS.lng.max
    );

    if (!isInMarseille) {
      return res.status(200).json({
        result: true,
        delivery_available: false,
        reason: "–ê–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ú–∞—Ä—Å–µ–ª—è",
        marseille_bounds: MARSEILLE_BOUNDS
      });
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ Address Service
    const { determineDeliveryZone, calculateDistance } = await import('../services/Address/address.service.js');
    
    const zone = determineDeliveryZone(lat, lng);
    const distance = calculateDistance(43.2951, 5.3739, lat, lng); // –û—Ç —Ü–µ–Ω—Ç—Ä–∞ –ú–∞—Ä—Å–µ–ª—è

    res.status(200).json({
      result: true,
      delivery_available: zone !== null,
      delivery_info: {
        zone: zone,
        zone_description: zone === 1 ? '–¶–µ–Ω—Ç—Ä –ú–∞—Ä—Å–µ–ª—è (0-5–∫–º)' : zone === 2 ? '–ë–æ–ª—å—à–æ–π –ú–∞—Ä—Å–µ–ª—å (5-10–∫–º)' : null,
        distance_km: Math.round(distance * 100) / 100,
        estimated_delivery_time: zone ? (zone === 1 ? '25-35 –º–∏–Ω' : '35-45 –º–∏–Ω') : null
      },
      address: address || '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –±–µ–∑ –∞–¥—Ä–µ—Å–∞'
    });

  } catch (error) {
    console.error('üö® CHECK DELIVERY AVAILABILITY Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
    });
  }
};

// ================ –≠–ö–°–ü–û–†–¢ –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í ================

export { 
  getCart, 
  addToCart, 
  updateCartItem, 
  removeFromCart, 
  clearCart, 
  calculateDelivery,
  checkDeliveryAvailability // ‚úÖ –ù–û–í–´–ô –≠–ö–°–ü–û–†–¢
};