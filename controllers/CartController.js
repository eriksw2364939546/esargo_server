// controllers/CartController.js - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫
import { 
  findOrCreateCart,
  addItemToCart,
  updateCartItemService,
  removeItemFromCart,
  clearUserCart,
  calculateDeliveryForCart
} from '../services/Cart/cart.service.js';

/**
 * üõí –ü–û–õ–£–ß–ò–¢–¨ –°–û–î–ï–†–ñ–ò–ú–û–ï –ö–û–†–ó–ò–ù–´
 * GET /api/cart
 */
const getCart = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;

    console.log('üõí GET CART:', { 
      customer_id: user._id, 
      session_id: sessionId 
    });

    const result = await findOrCreateCart(user._id, sessionId);

    res.status(200).json({
      result: true,
      message: result.cart ? "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞" : "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
      cart: result.cart,
      summary: {
        total_items: result.cart ? result.cart.total_items : 0,
        subtotal: result.cart ? result.cart.pricing.subtotal : 0,
        total_price: result.cart ? result.cart.pricing.total_price : 0,
        meets_minimum_order: result.cart ? result.cart.meets_minimum_order : false
      }
    });

  } catch (error) {
    console.error('üö® GET CART Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"
    });
  }
};

/**
 * ‚ûï –î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† –í –ö–û–†–ó–ò–ù–£
 * POST /api/cart/items
 */
const addToCart = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { 
      product_id, 
      quantity = 1, 
      selected_options = [], 
      special_requests = '' 
    } = req.body;

    console.log('‚ûï ADD TO CART:', {
      customer_id: user._id,
      product_id,
      quantity,
      options_count: selected_options.length
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!product_id) {
      return res.status(400).json({
        result: false,
        message: "ID —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
      });
    }

    if (quantity < 1) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
      });
    }

    const result = await addItemToCart(user._id, sessionId, {
      product_id,
      quantity: parseInt(quantity),
      selected_options,
      special_requests: special_requests.trim()
    });

    res.status(201).json({
      result: true,
      message: result.isNewItem ? "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É" : "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ",
      cart: result.cart,
      added_item: result.addedItem,
      summary: {
        total_items: result.cart.total_items,
        subtotal: result.cart.pricing.subtotal,
        total_price: result.cart.pricing.total_price
      }
    });

  } catch (error) {
    console.error('üö® ADD TO CART Error:', error);
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('—Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤') || 
               error.message.includes('–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"
    });
  }
};

/**
 * ‚úèÔ∏è –û–ë–ù–û–í–ò–¢–¨ –¢–û–í–ê–† –í –ö–û–†–ó–ò–ù–ï
 * PUT /api/cart/items/:item_id
 */
const updateCartItem = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { item_id } = req.params;
    const updateData = req.body;

    console.log('‚úèÔ∏è UPDATE CART ITEM:', {
      customer_id: user._id,
      item_id,
      updates: Object.keys(updateData)
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (updateData.quantity && updateData.quantity < 1) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
      });
    }

    const result = await updateCartItemService(user._id, sessionId, item_id, updateData);

    res.status(200).json({
      result: true,
      message: "–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω",
      cart: result.cart,
      updated_item: result.updatedItem,
      summary: {
        total_items: result.cart.total_items,
        subtotal: result.cart.pricing.subtotal,
        total_price: result.cart.pricing.total_price
      }
    });

  } catch (error) {
    console.error('üö® UPDATE CART ITEM Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–±–æ–ª—å—à–µ 0')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"
    });
  }
};

/**
 * ‚ùå –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–† –ò–ó –ö–û–†–ó–ò–ù–´
 * DELETE /api/cart/items/:item_id
 */
const removeFromCart = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { item_id } = req.params;

    console.log('‚ùå REMOVE FROM CART:', {
      customer_id: user._id,
      item_id
    });

    const result = await removeItemFromCart(user._id, sessionId, item_id);

    res.status(200).json({
      result: true,
      message: result.cart ? "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" : "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
      cart: result.cart,
      removed_item: result.removedItem,
      summary: result.cart ? {
        total_items: result.cart.total_items,
        subtotal: result.cart.pricing.subtotal,
        total_price: result.cart.pricing.total_price
      } : null
    });

  } catch (error) {
    console.error('üö® REMOVE FROM CART Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
    });
  }
};

/**
 * üóëÔ∏è –û–ß–ò–°–¢–ò–¢–¨ –ö–û–†–ó–ò–ù–£
 * DELETE /api/cart
 */
const clearCart = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;

    console.log('üóëÔ∏è CLEAR CART:', { customer_id: user._id });

    const result = await clearUserCart(user._id, sessionId);

    res.status(200).json({
      result: true,
      message: "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
      cleared_items_count: result.clearedItemsCount,
      saved_amount: result.savedAmount
    });

  } catch (error) {
    console.error('üö® CLEAR CART Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"
    });
  }
};

/**
 * üöö –†–ê–°–°–ß–ò–¢–ê–¢–¨ –î–û–°–¢–ê–í–ö–£
 * POST /api/cart/calculate-delivery
 */
const calculateDelivery = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const { delivery_address } = req.body;

    console.log('üöö CALCULATE DELIVERY:', {
      customer_id: user._id,
      has_address: !!delivery_address
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    if (!delivery_address || !delivery_address.lat || !delivery_address.lng) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (lat, lng) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    if (!delivery_address.address) {
      return res.status(400).json({
        result: false,
        message: "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
      });
    }

    const result = await calculateDeliveryForCart(user._id, sessionId, delivery_address);

    res.status(200).json({
      result: true,
      message: "–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞",
      cart: result.cart,
      delivery: {
        fee: result.deliveryFee,
        distance_km: result.distance,
        estimated_time_minutes: result.estimatedTime,
        address: delivery_address.address
      },
      pricing: {
        subtotal: result.cart.pricing.subtotal,
        delivery_fee: result.cart.pricing.delivery_fee,
        service_fee: result.cart.pricing.service_fee,
        total_price: result.cart.pricing.total_price
      }
    });

  } catch (error) {
    console.error('üö® CALCULATE DELIVERY Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–ø—É—Å—Ç–∞') || 
               error.message.includes('–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
    });
  }
};

export { getCart, addToCart, updateCartItem, removeFromCart, clearCart, calculateDelivery }