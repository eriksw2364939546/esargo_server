// controllers/OrderController.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤
import { 
  createOrderFromCart,
  getCustomerOrders,
  getOrderDetails,
  cancelCustomerOrder,
  rateCompletedOrder,
  getRestaurantOrders,
  acceptRestaurantOrder,
  rejectRestaurantOrder,
  markRestaurantOrderReady,
  getAvailableOrdersForCourier,
  acceptOrderForDelivery,
  markOrderPickedUpByCourier,
  markOrderDeliveredByCourier,
  getCourierActiveOrders,
  trackOrderStatus,
  getOrderStatusOnly
} from '../services/Order/order.service.js';

// ================ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üì¶ –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –ö–û–†–ó–ò–ù–´ - –ò–°–ü–†–ê–í–õ–ï–ù–û
 * POST /api/orders
 */
const createOrder = async (req, res) => {
  try {
    const { user } = req;
    const {
      delivery_address,
      customer_contact,
      payment_method = 'cash',
      special_requests = ''
    } = req.body;

    console.log('üì¶ CREATE ORDER:', {
      customer_id: user._id,
      payment_method,
      has_delivery_address: !!delivery_address
    });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    if (!delivery_address) {
      errors.push('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    } else {
      if (!delivery_address.address || delivery_address.address.trim().length === 0) {
        errors.push('–¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      }
      
      if (!delivery_address.lat || typeof delivery_address.lat !== 'number') {
        errors.push('–®–∏—Ä–æ—Ç–∞ –∞–¥—Ä–µ—Å–∞ (lat) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
      }
      
      if (!delivery_address.lng || typeof delivery_address.lng !== 'number') {
        errors.push('–î–æ–ª–≥–æ—Ç–∞ –∞–¥—Ä–µ—Å–∞ (lng) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ü–∞—Ä–∏–∂–∞
      if (delivery_address.lat && (delivery_address.lat < 48.8 || delivery_address.lat > 48.9)) {
        errors.push('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ü–∞—Ä–∏–∂–∞');
      }
      
      if (delivery_address.lng && (delivery_address.lng < 2.2 || delivery_address.lng > 2.5)) {
        errors.push('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ü–∞—Ä–∏–∂–∞');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (!customer_contact) {
      errors.push('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    } else {
      if (!customer_contact.name || customer_contact.name.trim().length === 0) {
        errors.push('–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      }
      
      if (!customer_contact.phone || customer_contact.phone.trim().length === 0) {
        errors.push('–¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phoneRegex = /^(?:(?:\+33|0)[1-9](?:[0-9]{8}))$/;
        if (!phoneRegex.test(customer_contact.phone.replace(/\s/g, ''))) {
          errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π: +33XXXXXXXXX –∏–ª–∏ 0XXXXXXXXX)');
        }
      }

      if (customer_contact.email && customer_contact.email.trim().length > 0) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(customer_contact.email)) {
          errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    if (!['cash', 'card'].includes(payment_method)) {
      errors.push('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "cash" –∏–ª–∏ "card"');
    }

    if (errors.length > 0) {
      return res.status(400).json({
        result: false,
        message: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        errors
      });
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í –°–ï–†–í–ò–°–ê (—É–±—Ä–∞–ª–∏ sessionId)
    const result = await createOrderFromCart(user._id, {
      delivery_address: {
        address: delivery_address.address.trim(),
        lat: delivery_address.lat,
        lng: delivery_address.lng,
        apartment: delivery_address.apartment?.trim() || '',
        entrance: delivery_address.entrance?.trim() || '',
        intercom: delivery_address.intercom?.trim() || '',
        delivery_notes: delivery_address.delivery_notes?.trim() || ''
      },
      customer_contact: {
        name: customer_contact.name.trim(),
        phone: customer_contact.phone.replace(/\s/g, ''),
        email: customer_contact.email?.toLowerCase().trim() || ''
      },
      payment_method,
      special_requests: special_requests.trim()
    });

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –û–¢–í–ï–¢ –° –û–ë–†–ê–ë–û–¢–ö–û–ô –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô
    const response = {
      result: true,
      message: result.warnings ? 
        "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏" : 
        "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
      order: {
        id: result.order._id,
        order_number: result.order.order_number,
        status: result.order.status,
        total_price: result.order.total_price,
        estimated_delivery_time: result.estimatedDelivery,
        payment_status: result.order.payment_status
      },
      payment: result.payment,
      next_steps: [
        "–†–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ",
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç",
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
      ]
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
    if (result.warnings) {
      response.warnings = result.warnings;
      response.next_steps.unshift("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∑–∞–∫–∞–∑–∞");
    }

    res.status(201).json(response);

  } catch (error) {
    console.error('üö® CREATE ORDER Error:', error);
    
    let statusCode = 500;
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.message.includes('–∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞') || 
        error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) {
      statusCode = 400;
    } else if (error.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤') ||
               error.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')) {
      statusCode = 400;
    } else if (error.message.includes('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞')) {
      statusCode = 400;
    } else if (error.message.includes('–ø–ª–∞—Ç–µ–∂') || 
               error.message.includes('–ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')) {
      statusCode = 402; // Payment Required
    } else if (error.message.includes('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã') ||
               error.message.includes('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞",
      error_type: statusCode === 402 ? 'payment_error' : 
                  statusCode === 400 ? 'validation_error' : 'server_error'
    });
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ú–û–ò –ó–ê–ö–ê–ó–´
 * GET /api/orders/my
 */
const getMyOrders = async (req, res) => {
  try {
    const { user } = req;
    const { 
      status, 
      limit = 20, 
      offset = 0 
    } = req.query;

    console.log('üìã GET MY ORDERS:', {
      customer_id: user._id,
      status,
      limit,
      offset
    });

    const result = await getCustomerOrders(user._id, {
      status,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã",
      orders: result.orders,
      pagination: result.pagination
    });

  } catch (error) {
    console.error('üö® GET MY ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
    });
  }
};

/**
 * üîç –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê
 * GET /api/orders/:id
 */
const getOrderById = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('üîç GET ORDER BY ID:', {
      customer_id: user._id,
      order_id: id
    });

    const result = await getOrderDetails(id, user._id, 'customer');

    res.status(200).json({
      result: true,
      message: "–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      order: result.order,
      can_cancel: result.canCancel,
      can_rate: result.canRate,
      estimated_delivery: result.estimatedDelivery,
      availability_info: result.availability_info
    });

  } catch (error) {
    console.error('üö® GET ORDER BY ID Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚ùå –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/cancel
 */
const cancelOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { reason = '–û—Ç–º–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º', details = '' } = req.body;

    console.log('‚ùå CANCEL ORDER:', {
      customer_id: user._id,
      order_id: id,
      reason
    });

    const result = await cancelCustomerOrder(id, user._id, { reason, details });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      order: {
        id: result.order_id,
        order_number: result.order_number,
        status: result.status,
        cancelled_at: result.cancelled_at
      },
      stock_return_info: result.stock_return_info,
      refund_info: result.refund_info
    });

  } catch (error) {
    console.error('üö® CANCEL ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                      error.message.includes('–Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚≠ê –û–¶–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/rate
 */
const rateOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { partner_rating, courier_rating, comment = '' } = req.body;

    console.log('‚≠ê RATE ORDER:', {
      customer_id: user._id,
      order_id: id,
      partner_rating,
      courier_rating
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    if (partner_rating && (partner_rating < 1 || partner_rating > 5)) {
      return res.status(400).json({
        result: false,
        message: "–†–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5"
      });
    }

    if (courier_rating && (courier_rating < 1 || courier_rating > 5)) {
      return res.status(400).json({
        result: false,
        message: "–†–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5"
      });
    }

    const result = await rateCompletedOrder(id, user._id, {
      partner_rating,
      courier_rating,
      comment
    });

    res.status(200).json({
      result: true,
      message: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!",
      order: {
        id: result.order_id,
        order_number: result.order_number,
        ratings: result.ratings
      }
    });

  } catch (error) {
    console.error('üö® RATE ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                      error.message.includes('–æ—Ü–µ–Ω–µ–Ω') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞–∫–∞–∑–∞"
    });
  }
};

// ================ –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –†–ï–°–¢–û–†–ê–ù–ê
 * GET /api/orders/partner
 */
const getPartnerOrders = async (req, res) => {
  try {
    const { user } = req;
    const { 
      status, 
      date,
      limit = 20, 
      offset = 0 
    } = req.query;

    console.log('üìã GET PARTNER ORDERS:', {
      partner_user_id: user._id,
      status,
      date
    });

    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const { PartnerProfile } = await import('../../models/index.js');
    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partnerProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await getRestaurantOrders(partnerProfile._id, {
      status,
      date,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      orders: result.orders,
      pagination: result.pagination
    });

  } catch (error) {
    console.error('üö® GET PARTNER ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
    });
  }
};

/**
 * ‚úÖ –ü–†–ò–ù–Ø–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/accept
 */
const acceptOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { estimated_preparation_time = 20 } = req.body;

    console.log('‚úÖ ACCEPT ORDER:', {
      partner_user_id: user._id,
      order_id: id,
      estimated_preparation_time
    });

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const { PartnerProfile } = await import('../../models/index.js');
    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partnerProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await acceptRestaurantOrder(id, partnerProfile._id, {
      estimated_preparation_time: parseInt(estimated_preparation_time)
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ",
      order: {
        id: result.order_id,
        order_number: result.order_number,
        status: result.status,
        accepted_at: result.accepted_at
      },
      next_step: result.next_step
    });

  } catch (error) {
    console.error('üö® ACCEPT ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                      error.message.includes('–Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/reject
 */
const rejectOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { reason, details = '' } = req.body;

    console.log('‚ùå REJECT ORDER:', {
      partner_user_id: user._id,
      order_id: id,
      reason
    });

    if (!reason || reason.trim().length === 0) {
      return res.status(400).json({
        result: false,
        message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const { PartnerProfile } = await import('../../models/index.js');
    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partnerProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await rejectRestaurantOrder(id, partnerProfile._id, {
      reason: reason.trim(),
      details: details.trim()
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
      order: {
        id: result.order_id,
        order_number: result.order_number,
        status: result.status,
        cancelled_at: result.cancelled_at
      },
      stock_return_info: result.stock_return_info
    });

  } catch (error) {
    console.error('üö® REJECT ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                      error.message.includes('–Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * üç≥ –ó–ê–ö–ê–ó –ì–û–¢–û–í
 * POST /api/orders/:id/ready
 */
const markOrderReady = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('üç≥ MARK ORDER READY:', {
      partner_user_id: user._id,
      order_id: id
    });

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const { PartnerProfile } = await import('../../models/index.js');
    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partnerProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await markRestaurantOrderReady(id, partnerProfile._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –û–∂–∏–¥–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä.",
      order: {
        id: result.order_id,
        order_number: result.order_number,
        status: result.status,
        ready_at: result.ready_at
      },
      next_step: result.next_step
    });

  } catch (error) {
    console.error('üö® MARK ORDER READY Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                      error.message.includes('–Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"
    });
  }
};

// ================ –ö–£–†–¨–ï–†–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü–ù–´–ï –ó–ê–ö–ê–ó–´
 * GET /api/orders/available
 */
const getAvailableOrders = async (req, res) => {
  try {
    const { user } = req;
    const { 
      lat, 
      lng, 
      radius = 10 
    } = req.query;

    console.log('üìã GET AVAILABLE ORDERS:', {
      courier_user_id: user._id,
      lat,
      lng,
      radius
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (!lat || !lng) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞ (lat, lng) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞
    const { CourierProfile } = await import('../../models/index.js');
    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await getAvailableOrdersForCourier(courierProfile._id, {
      lat: parseFloat(lat),
      lng: parseFloat(lng),
      radius: parseFloat(radius)
    });

    res.status(200).json({
      result: true,
      message: `–ù–∞–π–¥–µ–Ω–æ ${result.available_orders.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤`,
      orders: result.available_orders,
      total: result.total,
      location_filter: result.location_filter
    });

  } catch (error) {
    console.error('üö® GET AVAILABLE ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    });
  }
};

/**
 * üì¶ –í–ó–Ø–¢–¨ –ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£
 * POST /api/orders/:id/take
 */
const acceptDelivery = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('üì¶ ACCEPT DELIVERY:', {
      courier_user_id: user._id,
      order_id: id
    });

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞
    const { CourierProfile } = await import('../../models/index.js');
    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await acceptOrderForDelivery(id, courierProfile._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –≤–∑—è—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
      order: {
        id: result.order_id,
        order_number: result.order_number,
        status: result.status
      },
      partner_info: result.partner_info,
      next_steps: [
        "–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É",
        "–ó–∞–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
        "–û—Ç–º–µ—Ç—å—Ç–µ '–ó–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑' –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
      ]
    });

  } catch (error) {
    console.error('üö® ACCEPT DELIVERY Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('—É–∂–µ –≤–∑—è—Ç') || 
                      error.message.includes('–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"
    });
  }
};

/**
 * üìç –ó–ê–ë–†–ê–õ –ó–ê–ö–ê–ó –£ –†–ï–°–¢–û–†–ê–ù–ê
 * POST /api/orders/:id/pickup
 */
const markOrderPickedUp = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('üìç MARK ORDER PICKED UP:', {
      courier_user_id: user._id,
      order_id: id
    });

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞
    const { CourierProfile } = await import('../../models/index.js');
    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await markOrderPickedUpByCourier(id, courierProfile._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
      order: {
        id: result.order_id,
        order_number: result.order_number,
        status: result.status,
        picked_up_at: result.picked_up_at
      },
      customer_info: result.customer_info,
      next_steps: [
        "–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É",
        "–î–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É",
        "–û—Ç–º–µ—Ç—å—Ç–µ '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞"
      ]
    });

  } catch (error) {
    console.error('üö® MARK ORDER PICKED UP Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                      error.message.includes('–Ω–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * üéØ –î–û–°–¢–ê–í–ò–õ –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–£
 * POST /api/orders/:id/deliver
 */
const markOrderDelivered = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { delivery_notes = '' } = req.body;

    console.log('üéØ MARK ORDER DELIVERED:', {
      courier_user_id: user._id,
      order_id: id,
      has_notes: !!delivery_notes
    });

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞
    const { CourierProfile } = await import('../../models/index.js');
    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await markOrderDeliveredByCourier(id, courierProfile._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!",
      order: {
        id: result.order_id,
        order_number: result.order_number,
        status: result.status,
        delivered_at: result.delivered_at,
        actual_delivery_time: result.actual_delivery_time
      },
      completion_message: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω."
    });

  } catch (error) {
    console.error('üö® MARK ORDER DELIVERED Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                      error.message.includes('–Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * üö¥ –ü–û–õ–£–ß–ò–¢–¨ –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´ –ö–£–†–¨–ï–†–ê
 * GET /api/orders/courier/active
 */
const getCourierOrders = async (req, res) => {
  try {
    const { user } = req;

    console.log('üö¥ GET COURIER ORDERS:', { courier_user_id: user._id });

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞
    const { CourierProfile } = await import('../../models/index.js');
    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await getCourierActiveOrders(courierProfile._id);

    res.status(200).json({
      result: true,
      message: "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      active_orders: result.active_orders,
      total: result.total
    });

  } catch (error) {
    console.error('üö® GET COURIER ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    });
  }
};

// ================ –û–ë–©–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üîç –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞)
 * GET /api/orders/track/:orderNumber
 */
const trackOrder = async (req, res) => {
  try {
    const { orderNumber } = req.params;
    const userId = req.user?._id || null; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    console.log('üîç TRACK ORDER:', { orderNumber, userId });

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É
    const { Order } = await import('../../models/index.js');
    const order = await Order.findOne({ order_number: orderNumber });
    
    if (!order) {
      return res.status(404).json({
        result: false,
        message: "–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await trackOrderStatus(order._id, userId);

    res.status(200).json({
      result: true,
      message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—É—á–µ–Ω–∞",
      tracking: {
        order_number: result.order_number,
        status: result.status,
        status_description: result.status_description,
        progress: result.progress,
        next_step: result.next_step,
        estimated_delivery_time: result.estimated_delivery_time,
        created_at: result.created_at
      },
      partner_info: result.partner_info,
      courier_info: result.courier_info
    });

  } catch (error) {
    console.error('üö® TRACK ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚ÑπÔ∏è –ü–û–õ–£–ß–ò–¢–¨ –¢–û–õ–¨–ö–û –°–¢–ê–¢–£–° –ó–ê–ö–ê–ó–ê (–±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥)
 * GET /api/orders/:id/status
 */
const getOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;

    console.log('‚ÑπÔ∏è GET ORDER STATUS:', { order_id: id });

    const result = await getOrderStatusOnly(id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω",
      status: {
        order_id: result.order_id,
        order_number: result.order_number,
        status: result.status,
        status_description: result.status_description,
        progress: result.progress,
        estimated_delivery_time: result.estimated_delivery_time,
        actual_delivery_time: result.actual_delivery_time
      }
    });

  } catch (error) {
    console.error('üö® GET ORDER STATUS Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
    });
  }
};

// ================ –≠–ö–°–ü–û–†–¢ –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í ================

export {
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  createOrder,
  getMyOrders,
  getOrderById,
  cancelOrder,
  rateOrder,
  
  // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã  
  getPartnerOrders,
  acceptOrder,
  rejectOrder,
  markOrderReady,
  
  // –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  getAvailableOrders,
  acceptDelivery,
  markOrderPickedUp,
  markOrderDelivered,
  getCourierOrders,
  
  // –û–±—â–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  trackOrder,
  getOrderStatus
};