// controllers/OrderController.js - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ú–∞—Ä—Å–µ–ª—è
import { 
  createOrderFromCart,
  getCustomerOrders,
  getOrderDetails,
  cancelCustomerOrder,
  rateCompletedOrder,
  getRestaurantOrders,
  acceptRestaurantOrder,
  rejectRestaurantOrder,
  markRestaurantOrderReady,
  getAvailableOrdersForCourier,
  acceptOrderForDelivery,
  markOrderPickedUpByCourier,
  markOrderDeliveredByCourier,
  getCourierActiveOrders,
  trackOrderStatus,
  getOrderStatusOnly
} from '../services/Order/order.service.js';

import { PartnerProfile, CourierProfile, CustomerProfile } from '../models/index.js';
import { getCustomerAddressById } from '../services/Address/address.service.js'; // ‚úÖ –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø

// ================ –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ú–ê–†–°–ï–õ–Ø ================

const MARSEILLE_BOUNDS = {
  lat: { min: 43.200, max: 43.350 },
  lng: { min: 5.200, max: 5.600 }
};

const MARSEILLE_CENTER = {
  lat: 43.2951, // Vieux Port
  lng: 5.3739
};

// ================ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üì¶ –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –ö–û–†–ó–ò–ù–´ - –û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –ú–ê–†–°–ï–õ–Ø
 * POST /api/orders
 */
const createOrder = async (req, res) => {
  try {
    const { user } = req;
    const {
      delivery_address,
      saved_address_id, // ‚úÖ –ù–û–í–û–ï: ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
      customer_contact,
      payment_method = 'card',
      special_requests = ''
    } = req.body;

    console.log('üì¶ CREATE ORDER (MARSEILLE):', {
      customer_id: user._id,
      payment_method,
      has_delivery_address: !!delivery_address,
      has_saved_address_id: !!saved_address_id
    });

    // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ
    let finalDeliveryAddress = null;

    if (saved_address_id) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
      try {
        const savedAddressResult = await getCustomerAddressById(user._id, saved_address_id);
        const savedAddress = savedAddressResult.address;
        
        finalDeliveryAddress = {
          address: savedAddress.address,
          lat: savedAddress.lat,
          lng: savedAddress.lng,
          apartment: savedAddress.details?.apartment || '',
          entrance: savedAddress.details?.entrance || '',
          intercom: savedAddress.details?.intercom || '',
          floor: savedAddress.details?.floor || '',
          delivery_notes: savedAddress.details?.delivery_notes || '',
          // ‚úÖ –ú–ï–¢–ê-–ò–ù–§–û–†–ú–ê–¶–ò–Ø
          address_source: 'saved_address',
          address_id: saved_address_id,
          address_name: savedAddress.name
        };
        
        console.log('üìç Using saved address:', { 
          address_id: saved_address_id, 
          address_name: savedAddress.name,
          zone: savedAddress.delivery_info?.zone 
        });
        
      } catch (addressError) {
        return res.status(400).json({
          result: false,
          message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞: ${addressError.message}`
        });
      }
    } else if (delivery_address) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
      finalDeliveryAddress = {
        ...delivery_address,
        address_source: 'manual_input'
      };
    } else {
      return res.status(400).json({
        result: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞'
      });
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–õ–Ø –ú–ê–†–°–ï–õ–Ø
    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    if (!finalDeliveryAddress.address || finalDeliveryAddress.address.trim().length === 0) {
      errors.push('–¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    if (!finalDeliveryAddress.lat || typeof finalDeliveryAddress.lat !== 'number') {
      errors.push('–®–∏—Ä–æ—Ç–∞ –∞–¥—Ä–µ—Å–∞ (lat) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }
    
    if (!finalDeliveryAddress.lng || typeof finalDeliveryAddress.lng !== 'number') {
      errors.push('–î–æ–ª–≥–æ—Ç–∞ –∞–¥—Ä–µ—Å–∞ (lng) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ú–ê–†–°–ï–õ–Ø (–≤–º–µ—Å—Ç–æ –ü–∞—Ä–∏–∂–∞)
    if (finalDeliveryAddress.lat && 
        (finalDeliveryAddress.lat < MARSEILLE_BOUNDS.lat.min || 
         finalDeliveryAddress.lat > MARSEILLE_BOUNDS.lat.max)) {
      errors.push(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–∞—Ä—Å–µ–ª—è (—à–∏—Ä–æ—Ç–∞: ${MARSEILLE_BOUNDS.lat.min}-${MARSEILLE_BOUNDS.lat.max})`);
    }
    
    if (finalDeliveryAddress.lng && 
        (finalDeliveryAddress.lng < MARSEILLE_BOUNDS.lng.min || 
         finalDeliveryAddress.lng > MARSEILLE_BOUNDS.lng.max)) {
      errors.push(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–∞—Ä—Å–µ–ª—è (–¥–æ–ª–≥–æ—Ç–∞: ${MARSEILLE_BOUNDS.lng.min}-${MARSEILLE_BOUNDS.lng.max})`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (!customer_contact) {
      errors.push('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    } else {
      if (!customer_contact.name || customer_contact.name.trim().length === 0) {
        errors.push('–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      }
      
      if (!customer_contact.phone || customer_contact.phone.trim().length === 0) {
        errors.push('–¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      } else {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤–º–µ—Å—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ)
        const phoneRegex = /^(?:(?:\+33|0)[1-9](?:[0-9]{8}))$/;
        if (!phoneRegex.test(customer_contact.phone.replace(/\s/g, ''))) {
          errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    if (!['card', 'cash'].includes(payment_method)) {
      errors.push('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å card –∏–ª–∏ cash');
    }

    if (errors.length > 0) {
      return res.status(400).json({
        result: false,
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞',
        errors: errors
      });
    }

    // ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const orderData = {
  delivery_address: finalDeliveryAddress,
  customer_contact,
  payment_method,
  special_requests: special_requests.trim()
};

const result = await createOrderFromCart(user._id, orderData);

    // ‚úÖ –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π)
    if (saved_address_id && result.success) {
      try {
        const customerProfile = await CustomerProfile.findOne({ user_id: user._id });
        if (customerProfile) {
          customerProfile.updateAddressStats(saved_address_id, {
            delivery_zone: result.order.delivery_zone,
            delivery_distance_km: result.order.delivery_distance_km
          });
          await customerProfile.save();
        }
      } catch (statsError) {
        console.warn('‚ö†Ô∏è Failed to update address stats:', statsError.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      }
    }

    res.status(201).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
      order: {
        id: result.order._id,
        order_number: result.order.order_number,
        status: result.order.status,
        total_price: result.order.total_price,
        delivery_zone: result.order.delivery_zone, // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï
        delivery_distance_km: result.order.delivery_distance_km, // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï
        estimated_delivery_time: result.order.estimated_delivery_time,
        payment_method: result.order.payment_method,
        // ‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–î–†–ï–°–ï
        delivery_address: {
          address: finalDeliveryAddress.address,
          source: finalDeliveryAddress.address_source,
          address_name: finalDeliveryAddress.address_name || null
        }
      },
      // ‚úÖ –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–ê–í–ö–ï
      delivery_info: {
        zone: result.order.delivery_zone,
        distance_km: result.order.delivery_distance_km,
        estimated_time: result.order.estimated_delivery_time,
        delivery_fee: result.order.delivery_fee,
        is_within_delivery_bounds: true
      }
    });

  } catch (error) {
    console.error('üö® CREATE ORDER Error:', error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    const statusCode = error.message.includes('–∫–æ—Ä–∑–∏–Ω–∞') ? 404 :
                      error.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞') ? 422 :
                      error.message.includes('–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã') ? 400 :
                      error.message.includes('–∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏') ? 422 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞",
      // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      debug_info: {
        marseille_bounds: MARSEILLE_BOUNDS,
        center_coordinates: MARSEILLE_CENTER
      }
    });
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ú–û–ò –ó–ê–ö–ê–ó–´
 * GET /api/orders/my
 */
const getMyOrders = async (req, res) => {
  try {
    const { user } = req;
    const { 
      status, 
      limit = 20, 
      offset = 0,
      include_delivery_info = false // ‚úÖ –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†
    } = req.query;

    console.log('üìã GET MY ORDERS:', { 
      customer_id: user._id, 
      status, 
      limit,
      include_delivery_info 
    });

    const result = await getCustomerOrders(user._id, {
      status,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    // ‚úÖ –î–û–ü–û–õ–ù–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û –î–û–°–¢–ê–í–ö–ï ESARGO
    const enhancedOrders = result.orders.map(order => ({
      ...order,
      // ‚úÖ –ö–†–ê–¢–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–ê–í–ö–ï
      delivery_summary: {
        zone: order.delivery_zone,
        distance_km: order.delivery_distance_km,
        address_preview: order.delivery_address?.address?.substring(0, 50) + '...'
      },
      // ‚úÖ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
      ...(include_delivery_info === 'true' && {
        full_delivery_info: {
          delivery_zone: order.delivery_zone,
          delivery_distance_km: order.delivery_distance_km,
          delivery_fee: order.delivery_fee,
          platform_commission: order.platform_commission
        }
      })
    }));

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
      orders: enhancedOrders,
      pagination: {
        total: result.total,
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: result.total > (parseInt(offset) + parseInt(limit))
      },
      // ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–û–ù–ê–ú –î–û–°–¢–ê–í–ö–ò
      delivery_zones_stats: {
        zone_1_orders: enhancedOrders.filter(o => o.delivery_zone === 1).length,
        zone_2_orders: enhancedOrders.filter(o => o.delivery_zone === 2).length,
        avg_distance: enhancedOrders.reduce((sum, o) => sum + (o.delivery_distance_km || 0), 0) / enhancedOrders.length || 0
      }
    });

  } catch (error) {
    console.error('üö® GET MY ORDERS Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
    });
  }
};

/**
 * üîç –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê
 * GET /api/orders/:id
 */
const getOrderById = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('üîç GET ORDER BY ID:', { order_id: id, customer_id: user._id });

    const result = await getOrderDetails(id, user._id);

    // ‚úÖ –î–û–ü–û–õ–ù–Ø–ï–ú –î–ê–ù–ù–´–ú–ò –°–ò–°–¢–ï–ú–´ ESARGO
    const enhancedOrder = {
      ...result.order,
      // ‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï –î–û–°–¢–ê–í–ö–ò ESARGO
      esargo_delivery_info: {
        delivery_zone: result.order.delivery_zone,
        zone_description: result.order.delivery_zone === 1 ? '–¶–µ–Ω—Ç—Ä –ú–∞—Ä—Å–µ–ª—è (0-5–∫–º)' : '–ë–æ–ª—å—à–æ–π –ú–∞—Ä—Å–µ–ª—å (5-10–∫–º)',
        delivery_distance_km: result.order.delivery_distance_km,
        delivery_fee: result.order.delivery_fee,
        platform_commission: result.order.platform_commission,
        courier_earnings: result.order.courier_earnings,
        peak_hour_surcharge: result.order.peak_hour_surcharge || 0
      },
      // ‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–î–†–ï–°–ï –î–û–°–¢–ê–í–ö–ò
      delivery_address_details: {
        ...result.order.delivery_address,
        coordinates: {
          lat: result.order.delivery_address.lat,
          lng: result.order.delivery_address.lng
        },
        distance_from_center: calculateDistanceFromCenter(
          result.order.delivery_address.lat, 
          result.order.delivery_address.lng
        )
      }
    };

    res.status(200).json({
      result: true,
      message: "–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      order: enhancedOrder
    });

  } catch (error) {
    console.error('üö® GET ORDER BY ID Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"
    });
  }
};

// ================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ú–∞—Ä—Å–µ–ª—è
 */
function calculateDistanceFromCenter(lat, lng) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = (lat - MARSEILLE_CENTER.lat) * Math.PI / 180;
  const dLng = (lng - MARSEILLE_CENTER.lng) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
           Math.cos(MARSEILLE_CENTER.lat * Math.PI / 180) * Math.cos(lat * Math.PI / 180) *
           Math.sin(dLng/2) * Math.sin(dLng/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return Math.round(R * c * 100) / 100;
}

// ================ –û–°–¢–ê–õ–¨–ù–´–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ================

/**
 * ‚ùå –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 * PATCH /api/orders/:id/cancel
 */
const cancelOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { cancel_reason = 'customer_request' } = req.body;

    console.log('‚ùå CANCEL ORDER:', { order_id: id, customer_id: user._id, reason: cancel_reason });

    const result = await cancelCustomerOrder(id, user._id, cancel_reason);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
      order: result.order,
      refund_info: result.refund_info || null
    });

  } catch (error) {
    console.error('üö® CANCEL ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å') ? 400 :
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚≠ê –û–¶–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/rate
 */
const rateOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { rating, comment = '', delivery_rating = null } = req.body; // ‚úÖ –ù–û–í–û–ï: –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

    console.log('‚≠ê RATE ORDER:', { order_id: id, customer_id: user._id, rating, delivery_rating });

    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({
        result: false,
        message: "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5"
      });
    }

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ô–¢–ò–ù–ì–ê –î–û–°–¢–ê–í–ö–ò
    if (delivery_rating && (delivery_rating < 1 || delivery_rating > 5)) {
      return res.status(400).json({
        result: false,
        message: "–†–µ–π—Ç–∏–Ω–≥ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5"
      });
    }

    const ratingData = {
      rating: parseInt(rating),
      comment: comment.trim(),
      delivery_rating: delivery_rating ? parseInt(delivery_rating) : null
    };

    const result = await rateCompletedOrder(id, user._id, ratingData);

    res.status(200).json({
      result: true,
      message: "–û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
      rating: result.rating,
      order_status: result.order.status
    });

  } catch (error) {
    console.error('üö® RATE ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('—É–∂–µ –æ—Ü–µ–Ω–µ–Ω') ? 400 :
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏"
    });
  }
};

// ================ –û–°–¢–ê–õ–¨–ù–´–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ (–ü–ê–†–¢–ù–ï–†–´, –ö–£–†–¨–ï–†–´, –û–ë–©–ò–ï) ================
// –≠—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏

const getPartnerOrders = async (req, res) => {
  try {
    const { user } = req;
    const { status, limit = 20, offset = 0 } = req.query;

    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    if (!partnerProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await getRestaurantOrders(partnerProfile._id, { status, limit: parseInt(limit), offset: parseInt(offset) });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      orders: result.orders,
      total: result.total
    });

  } catch (error) {
    console.error('üö® GET PARTNER ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
    });
  }
};

const acceptOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { estimated_preparation_time = 20 } = req.body;

    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    if (!partnerProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await acceptRestaurantOrder(id, partnerProfile._id, estimated_preparation_time);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç",
      order: result.order
    });

  } catch (error) {
    console.error('üö® ACCEPT ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

const rejectOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { reject_reason = 'restaurant_busy' } = req.body;

    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    if (!partnerProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await rejectRestaurantOrder(id, partnerProfile._id, reject_reason);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
      order: result.order
    });

  } catch (error) {
    console.error('üö® REJECT ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

const markOrderReady = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    const partnerProfile = await PartnerProfile.findOne({ user_id: user._id });
    if (!partnerProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await markRestaurantOrderReady(id, partnerProfile._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
      order: result.order
    });

  } catch (error) {
    console.error('üö® MARK ORDER READY Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"
    });
  }
};

const getAvailableOrders = async (req, res) => {
  try {
    const { user } = req;
    const { delivery_zone, limit = 10 } = req.query;

    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await getAvailableOrdersForCourier(courierProfile._id, {
      delivery_zone: delivery_zone ? parseInt(delivery_zone) : null,
      limit: parseInt(limit)
    });

    res.status(200).json({
      result: true,
      message: "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã",
      available_orders: result.available_orders,
      total: result.total
    });

  } catch (error) {
    console.error('üö® GET AVAILABLE ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    });
  }
};

const acceptDelivery = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await acceptOrderForDelivery(id, courierProfile._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∫ –¥–æ—Å—Ç–∞–≤–∫–µ",
      order: result.order
    });

  } catch (error) {
    console.error('üö® ACCEPT DELIVERY Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ"
    });
  }
};

const markOrderPickedUp = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await markOrderPickedUpByCourier(id, courierProfile._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
      order: result.order
    });

  } catch (error) {
    console.error('üö® MARK ORDER PICKED UP Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞"
    });
  }
};

const markOrderDelivered = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { delivery_notes = '', delivery_photo_url = '' } = req.body;

    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await markOrderDeliveredByCourier(id, courierProfile._id, {
      delivery_notes: delivery_notes.trim(),
      delivery_photo_url: delivery_photo_url.trim()
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
      order: result.order
    });

  } catch (error) {
    console.error('üö® MARK ORDER DELIVERED Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                      error.message.includes('–Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞"
    });
  }
};

const getCourierOrders = async (req, res) => {
  try {
    const { user } = req;

    const courierProfile = await CourierProfile.findOne({ user_id: user._id });
    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const result = await getCourierActiveOrders(courierProfile._id);

    res.status(200).json({
      result: true,
      message: "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      active_orders: result.active_orders,
      total: result.total
    });

  } catch (error) {
    console.error('üö® GET COURIER ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    });
  }
};

// ================ –û–ë–©–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

const trackOrder = async (req, res) => {
  try {
    const { orderNumber } = req.params;
    const userId = req.user?._id || null;

    console.log('üîç TRACK ORDER:', { orderNumber, userId });

    const result = await trackOrderStatus(orderNumber, userId);

    res.status(200).json({
      result: true,
      message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—É—á–µ–Ω–∞",
      tracking: {
        order_number: result.order_number,
        status: result.status,
        status_description: result.status_description,
        progress: result.progress,
        next_step: result.next_step,
        estimated_delivery_time: result.estimated_delivery_time,
        created_at: result.created_at,
        // ‚úÖ –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–ê–í–ö–ï ESARGO
        delivery_info: {
          zone: result.delivery_zone,
          distance_km: result.delivery_distance_km,
          delivery_fee: result.delivery_fee
        }
      },
      partner_info: result.partner_info,
      courier_info: result.courier_info
    });

  } catch (error) {
    console.error('üö® TRACK ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

const getOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;

    console.log('‚ÑπÔ∏è GET ORDER STATUS:', { order_id: id });

    const result = await getOrderStatusOnly(id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω",
      status: {
        order_id: result.order_id,
        order_number: result.order_number,
        status: result.status,
        status_description: result.status_description,
        progress: result.progress,
        estimated_delivery_time: result.estimated_delivery_time,
        actual_delivery_time: result.actual_delivery_time,
        // ‚úÖ –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–ê–í–ö–ï
        delivery_zone: result.delivery_zone,
        delivery_distance_km: result.delivery_distance_km
      }
    });

  } catch (error) {
    console.error('üö® GET ORDER STATUS Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
    });
  }
};

// ================ –≠–ö–°–ü–û–†–¢ –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í ================

export {
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  createOrder,
  getMyOrders,
  getOrderById,
  cancelOrder,
  rateOrder,
  
  // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã  
  getPartnerOrders,
  acceptOrder,
  rejectOrder,
  markOrderReady,
  
  // –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  getAvailableOrders,
  acceptDelivery,
  markOrderPickedUp,
  markOrderDelivered,
  getCourierOrders,
  
  // –û–±—â–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  trackOrder,
  getOrderStatus
};