// controllers/OrderController.js - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤
import { 
  createOrderFromCart,
  getCustomerOrders,
  getOrderDetails,
  cancelCustomerOrder,
  rateCompletedOrder,
  getRestaurantOrders,
  acceptRestaurantOrder,
  rejectRestaurantOrder,
  markRestaurantOrderReady,
  getAvailableOrdersForCourier,
  acceptOrderForDelivery,
  markOrderPickedUpByCourier,
  markOrderDeliveredByCourier,
  getCourierActiveOrders,
  trackOrderStatus,
  getOrderStatusOnly
} from '../services/Order/order.service.js';

// ================ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üì¶ –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó –ò–ó –ö–û–†–ó–ò–ù–´
 * POST /api/orders
 */
const createOrder = async (req, res) => {
  try {
    const { user } = req;
    const sessionId = req.sessionID;
    const {
      delivery_address,
      customer_contact,
      payment_method = 'card',
      special_requests = ''
    } = req.body;

    console.log('üì¶ CREATE ORDER:', {
      customer_id: user._id,
      payment_method,
      has_delivery_address: !!delivery_address
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!delivery_address || !delivery_address.address || !delivery_address.lat || !delivery_address.lng) {
      return res.status(400).json({
        result: false,
        message: "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
      });
    }

    if (!customer_contact || !customer_contact.name || !customer_contact.phone) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      });
    }

    const result = await createOrderFromCart(user._id, sessionId, {
      delivery_address,
      customer_contact,
      payment_method,
      special_requests: special_requests.trim()
    });

    res.status(201).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
      order: result.order,
      payment: result.payment,
      estimated_delivery: result.estimatedDelivery,
      next_steps: [
        "–†–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ",
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç",
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
      ]
    });

  } catch (error) {
    console.error('üö® CREATE ORDER Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞') || 
        error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ||
        error.message.includes('–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω')) {
      statusCode = 400;
    } else if (error.message.includes('–ø–ª–∞—Ç–µ–∂')) {
      statusCode = 402; // Payment Required
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ú–û–ò –ó–ê–ö–ê–ó–´
 * GET /api/orders/my
 */
const getMyOrders = async (req, res) => {
  try {
    const { user } = req;
    const { 
      status, 
      limit = 20, 
      offset = 0 
    } = req.query;

    console.log('üìã GET MY ORDERS:', {
      customer_id: user._id,
      status,
      limit,
      offset
    });

    const result = await getCustomerOrders(user._id, {
      status,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã",
      orders: result.orders,
      total: result.total,
      pagination: {
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: result.total > (parseInt(offset) + parseInt(limit))
      },
      summary: result.summary
    });

  } catch (error) {
    console.error('üö® GET MY ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
    });
  }
};

/**
 * üîç –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê
 * GET /api/orders/:id
 */
const getOrderById = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('üîç GET ORDER BY ID:', {
      customer_id: user._id,
      order_id: id
    });

    const result = await getOrderDetails(id, user._id, 'customer');

    res.status(200).json({
      result: true,
      message: "–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      order: result.order,
      can_cancel: result.canCancel,
      can_rate: result.canRate,
      estimated_delivery: result.estimatedDelivery
    });

  } catch (error) {
    console.error('üö® GET ORDER BY ID Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚ùå –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/cancel
 */
const cancelOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { reason } = req.body;

    console.log('‚ùå CANCEL ORDER:', {
      customer_id: user._id,
      order_id: id,
      reason
    });

    if (!reason || reason.trim() === '') {
      return res.status(400).json({
        result: false,
        message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      });
    }

    const result = await cancelCustomerOrder(id, user._id, reason.trim());

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
      order: result.order,
      refund: result.refund,
      cancellation_info: result.cancellationInfo
    });

  } catch (error) {
    console.error('üö® CANCEL ORDER Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚≠ê –û–¶–ï–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/rate
 */
const rateOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { 
      partner_rating, 
      courier_rating, 
      comment = '' 
    } = req.body;

    console.log('‚≠ê RATE ORDER:', {
      customer_id: user._id,
      order_id: id,
      partner_rating,
      courier_rating
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    if (partner_rating && (partner_rating < 1 || partner_rating > 5)) {
      return res.status(400).json({
        result: false,
        message: "–†–µ–π—Ç–∏–Ω–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5"
      });
    }

    if (courier_rating && (courier_rating < 1 || courier_rating > 5)) {
      return res.status(400).json({
        result: false,
        message: "–†–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5"
      });
    }

    const result = await rateCompletedOrder(id, user._id, {
      partner_rating,
      courier_rating,
      comment: comment.trim()
    });

    res.status(200).json({
      result: true,
      message: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!",
      order: result.order,
      ratings_updated: result.ratingsUpdated
    });

  } catch (error) {
    console.error('üö® RATE ORDER Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–Ω–µ–ª—å–∑—è –æ—Ü–µ–Ω–∏—Ç—å') || 
               error.message.includes('—É–∂–µ –æ—Ü–µ–Ω–µ–Ω')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞–∫–∞–∑–∞"
    });
  }
};

// ================ –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üè™ –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó–´ –†–ï–°–¢–û–†–ê–ù–ê
 * GET /api/orders/partner/list
 */
const getPartnerOrders = async (req, res) => {
  try {
    const { user } = req;
    const { 
      status, 
      limit = 20, 
      offset = 0 
    } = req.query;

    console.log('üè™ GET PARTNER ORDERS:', {
      partner_id: user._id,
      status,
      limit
    });

    const result = await getRestaurantOrders(user._id, {
      status,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      orders: result.orders,
      total: result.total,
      summary: result.summary,
      pagination: {
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: result.total > (parseInt(offset) + parseInt(limit))
      }
    });

  } catch (error) {
    console.error('üö® GET PARTNER ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
    });
  }
};

/**
 * ‚úÖ –ü–†–ò–ù–Ø–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/accept
 */
const acceptOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { estimated_preparation_time = 20 } = req.body;

    console.log('‚úÖ ACCEPT ORDER:', {
      partner_id: user._id,
      order_id: id,
      prep_time: estimated_preparation_time
    });

    if (estimated_preparation_time < 5 || estimated_preparation_time > 120) {
      return res.status(400).json({
        result: false,
        message: "–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 120 –º–∏–Ω—É—Ç"
      });
    }

    const result = await acceptRestaurantOrder(id, user._id, estimated_preparation_time);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É",
      order: result.order,
      estimated_ready_at: result.estimatedReadyAt,
      next_steps: [
        "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
        "–û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤—ã–º –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤",
        "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏"
      ]
    });

  } catch (error) {
    console.error('üö® ACCEPT ORDER Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨ –ó–ê–ö–ê–ó
 * POST /api/orders/:id/reject
 */
const rejectOrder = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { reason } = req.body;

    console.log('‚ùå REJECT ORDER:', {
      partner_id: user._id,
      order_id: id,
      reason
    });

    if (!reason || reason.trim() === '') {
      return res.status(400).json({
        result: false,
        message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      });
    }

    const result = await rejectRestaurantOrder(id, user._id, reason.trim());

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
      order: result.order,
      refund: result.refund
    });

  } catch (error) {
    console.error('üö® REJECT ORDER Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚úÖ –ó–ê–ö–ê–ó –ì–û–¢–û–í
 * POST /api/orders/:id/ready
 */
const markOrderReady = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('‚úÖ MARK ORDER READY:', {
      partner_id: user._id,
      order_id: id
    });

    const result = await markRestaurantOrderReady(id, user._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π",
      order: result.order,
      courier_search: result.courierSearch,
      next_steps: [
        "–°–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞",
        "–ö—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–º –∑–∞–∫–∞–∑–µ",
        "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–±—ã—Ç–∏—è –∫—É—Ä—å–µ—Ä–∞"
      ]
    });

  } catch (error) {
    console.error('üö® MARK ORDER READY Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"
    });
  }
};

// ================ –ö–£–†–¨–ï–†–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üöö –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü–ù–´–ï –ó–ê–ö–ê–ó–´
 * GET /api/orders/courier/available
 */
const getAvailableOrders = async (req, res) => {
  try {
    const { user } = req;
    const { 
      lat, 
      lng, 
      radius = 10 
    } = req.query;

    console.log('üöö GET AVAILABLE ORDERS:', {
      courier_id: user._id,
      lat,
      lng,
      radius
    });

    if (!lat || !lng) {
      return res.status(400).json({
        result: false,
        message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞ (lat, lng) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    const result = await getAvailableOrdersForCourier(user._id, {
      lat: parseFloat(lat),
      lng: parseFloat(lng),
      radius: parseFloat(radius)
    });

    res.status(200).json({
      result: true,
      message: `–ù–∞–π–¥–µ–Ω–æ ${result.orders.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤`,
      orders: result.orders,
      search_area: {
        center: { lat: parseFloat(lat), lng: parseFloat(lng) },
        radius_km: parseFloat(radius)
      }
    });

  } catch (error) {
    console.error('üö® GET AVAILABLE ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    });
  }
};

/**
 * üì¶ –í–ó–Ø–¢–¨ –ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£
 * POST /api/orders/:id/take
 */
const acceptDelivery = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('üì¶ ACCEPT DELIVERY:', {
      courier_id: user._id,
      order_id: id
    });

    const result = await acceptOrderForDelivery(id, user._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –≤–∑—è—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
      order: result.order,
      restaurant: result.restaurant,
      route: result.route,
      next_steps: [
        "–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É",
        "–ó–∞–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
        "–û—Ç–º–µ—Ç—å—Ç–µ '–ó–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑' –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
      ]
    });

  } catch (error) {
    console.error('üö® ACCEPT DELIVERY Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('—É–∂–µ –≤–∑—è—Ç') || 
               error.message.includes('–Ω–µ–ª—å–∑—è –≤–∑—è—Ç—å')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"
    });
  }
};

/**
 * üìç –ó–ê–ë–†–ê–õ –ó–ê–ö–ê–ó –£ –†–ï–°–¢–û–†–ê–ù–ê
 * POST /api/orders/:id/pickup
 */
const markOrderPickedUp = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;

    console.log('üìç MARK ORDER PICKED UP:', {
      courier_id: user._id,
      order_id: id
    });

    const result = await markOrderPickedUpByCourier(id, user._id);

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
      order: result.order,
      customer: result.customer,
      route_to_customer: result.routeToCustomer,
      next_steps: [
        "–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É",
        "–î–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É",
        "–û—Ç–º–µ—Ç—å—Ç–µ '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞"
      ]
    });

  } catch (error) {
    console.error('üö® MARK ORDER PICKED UP Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–Ω–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * üéØ –î–û–°–¢–ê–í–ò–õ –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–£
 * POST /api/orders/:id/deliver
 */
const markOrderDelivered = async (req, res) => {
  try {
    const { user } = req;
    const { id } = req.params;
    const { delivery_notes = '' } = req.body;

    console.log('üéØ MARK ORDER DELIVERED:', {
      courier_id: user._id,
      order_id: id,
      has_notes: !!delivery_notes
    });

    const result = await markOrderDeliveredByCourier(id, user._id, delivery_notes.trim());

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!",
      order: result.order,
      delivery_summary: result.deliverySummary,
      earnings: result.earnings,
      completion_message: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω."
    });

  } catch (error) {
    console.error('üö® MARK ORDER DELIVERED Error:', error);
    
    let statusCode = 500;
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      statusCode = 404;
    } else if (error.message.includes('–Ω–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å')) {
      statusCode = 400;
    }

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ú–û–ò –ó–ê–ö–ê–ó–´ (–ö–£–†–¨–ï–†)
 * GET /api/orders/courier/my
 */
const getCourierOrders = async (req, res) => {
  try {
    const { user } = req;
    const { 
      status, 
      limit = 20, 
      offset = 0 
    } = req.query;

    console.log('üìã GET COURIER ORDERS:', {
      courier_id: user._id,
      status,
      limit
    });

    const result = await getCourierActiveOrders(user._id, {
      status,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      orders: result.orders,
      total: result.total,
      summary: result.summary,
      pagination: {
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: result.total > (parseInt(offset) + parseInt(limit))
      }
    });

  } catch (error) {
    console.error('üö® GET COURIER ORDERS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞"
    });
  }
};

// ================ –û–ë–©–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´ ================

/**
 * üëÄ –û–¢–°–õ–ï–î–ò–¢–¨ –ó–ê–ö–ê–ó
 * GET /api/orders/:id/track
 */
const trackOrder = async (req, res) => {
  try {
    const { id } = req.params;

    console.log('üëÄ TRACK ORDER:', { order_id: id });

    const result = await trackOrderStatus(id);

    res.status(200).json({
      result: true,
      message: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
      order: result.order,
      timeline: result.timeline,
      current_status: result.currentStatus,
      estimated_delivery: result.estimatedDelivery,
      can_track: true
    });

  } catch (error) {
    console.error('üö® TRACK ORDER Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"
    });
  }
};

/**
 * ‚ÑπÔ∏è –ü–û–õ–£–ß–ò–¢–¨ –°–¢–ê–¢–£–° –ó–ê–ö–ê–ó–ê
 * GET /api/orders/:id/status
 */
const getOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;

    console.log('‚ÑπÔ∏è GET ORDER STATUS:', { order_id: id });

    const result = await getOrderStatusOnly(id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω",
      status: result.status,
      status_description: result.statusDescription,
      estimated_delivery: result.estimatedDelivery,
      last_update: result.lastUpdate
    });

  } catch (error) {
    console.error('üö® GET ORDER STATUS Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
    });
  }
};


export {
        createOrder,
        getMyOrders,
        getOrderById,    // –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´
        cancelOrder,
        rateOrder,

        getPartnerOrders,
        acceptOrder,
        rejectOrder,    // –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´
        markOrderReady,

        getAvailableOrders,
        acceptDelivery,
        markOrderPickedUp,  // –ö–£–†–¨–ï–†–°–ö–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´
        markOrderDelivered,
        getCourierOrders,

        trackOrder,      // –û–ë–©–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´
        getOrderStatus


}