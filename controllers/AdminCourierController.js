// controllers/AdminCourierController.js - –ü–û–õ–ù–´–ô –§–ê–ô–õ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
import { CourierApplication, CourierProfile, User } from '../models/index.js';
import { decryptString } from '../utils/crypto.js';
import mongoose from 'mongoose';

/**
 * 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤ - –° –†–ê–°–®–ò–§–†–û–í–ö–û–ô
 * GET /api/admin/couriers/applications
 */
const getAllCourierApplications = async (req, res) => {
  try {
    const { admin } = req;
    const { 
      status = 'all', 
      page = 1, 
      limit = 20, 
      sort_by = 'submitted_at',
      sort_order = 'desc',
      vehicle_type = 'all'
    } = req.query;

    console.log('üìã GET ALL COURIER APPLICATIONS WITH DECRYPTION:', {
      admin_id: admin._id,
      filters: { status, vehicle_type },
      pagination: { page, limit }
    });

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filters = {};
    
    if (status !== 'all') {
      filters.status = status;
    }
    
    if (vehicle_type !== 'all') {
      filters['vehicle_info.vehicle_type'] = vehicle_type;
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    const sortOptions = {};
    sortOptions[sort_by] = sort_order === 'desc' ? -1 : 1;
    const skip = (parseInt(page) - 1) * parseInt(limit);

    // üîê –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const [applications, totalCount] = await Promise.all([
      CourierApplication.find(filters)
        .sort(sortOptions)
        .skip(skip)
        .limit(parseInt(limit))
        .populate('user_id', 'role is_active createdAt')
        .lean(),
      CourierApplication.countDocuments(filters)
    ]);

    // üîê –†–ê–°–®–ò–§–†–û–í–ö–ê –î–ê–ù–ù–´–• –¥–ª—è –∞–¥–º–∏–Ω–∞
    const decryptedApplications = applications.map(app => {
      try {
        return {
          id: app._id,
          // ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –û–¢–ö–†–´–¢–´–ï –ü–û–ò–°–ö–û–í–´–ï –ü–û–õ–Ø  
          search_data: app.search_data, // –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ—Ç–∫—Ä—ã—Ç–æ
          
          // üîê –†–ê–°–®–ò–§–†–û–í–´–í–ê–ï–ú –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
          personal_data: {
            first_name: app.search_data?.first_name || '–ù/–î', // –ë–µ—Ä–µ–º –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            last_name: app.search_data?.last_name || '–ù/–î',   // –ë–µ—Ä–µ–º –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            email: app.personal_data?.email ? decryptString(app.personal_data.email) : '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
            phone: app.personal_data?.phone ? decryptString(app.personal_data.phone) : '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
            city: app.search_data?.city || '–ù/–î' // –ë–µ—Ä–µ–º –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          },
          
          vehicle_type: app.vehicle_info?.vehicle_type,
          status: app.status,
          verification_status: app.verification?.overall_verification_status,
          submitted_at: app.submitted_at,
          reviewed_at: app.review_info?.reviewed_at,
          user_info: app.user_id
        };
      } catch (decryptError) {
        console.error('üö® DECRYPTION ERROR for application:', app._id, decryptError);
        return {
          id: app._id,
          search_data: app.search_data,
          personal_data: {
            first_name: app.search_data?.first_name || '–ù/–î',
            last_name: app.search_data?.last_name || '–ù/–î',
            email: '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
            phone: '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
            city: app.search_data?.city || '–ù/–î'
          },
          vehicle_type: app.vehicle_info?.vehicle_type,
          status: app.status,
          error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
        };
      }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = await CourierApplication.aggregate([
      { $group: { _id: '$status', count: { $sum: 1 } } }
    ]);

    const stats = {
      total: totalCount,
      pending: 0,
      approved: 0,
      rejected: 0
    };

    statusStats.forEach(stat => {
      if (stats.hasOwnProperty(stat._id)) {
        stats[stat._id] = stat.count;
      }
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã (—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π)",
      applications: decryptedApplications,
      pagination: {
        current_page: parseInt(page),
        total_pages: Math.ceil(totalCount / parseInt(limit)),
        total_items: totalCount,
        items_per_page: parseInt(limit)
      },
      statistics: stats
    });

  } catch (error) {
    console.error('üö® GET ALL COURIER APPLICATIONS - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤",
      error: error.message
    });
  }
};

/**
 * 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ - –° –ü–û–õ–ù–û–ô –†–ê–°–®–ò–§–†–û–í–ö–û–ô
 * GET /api/admin/couriers/applications/:id
 */
const getCourierApplicationDetails = async (req, res) => {
  try {
    const { admin } = req;
    const { id } = req.params;

    console.log('üîç GET COURIER APPLICATION DETAILS WITH DECRYPTION:', {
      application_id: id,
      admin_id: admin._id
    });

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        result: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
      });
    }

    // üîê –ü–û–õ–£–ß–ê–ï–ú –ó–ê–®–ò–§–†–û–í–ê–ù–ù–£–Æ –ó–ê–Ø–í–ö–£
    const application = await CourierApplication.findById(id)
      .populate('user_id', 'role is_active createdAt last_login_at')
      .populate('review_info.reviewed_by', 'full_name role');

    if (!application) {
      return res.status(404).json({
        result: false,
        message: "–ó–∞—è–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    // üîê –ü–û–õ–ù–ê–Ø –†–ê–°–®–ò–§–†–û–í–ö–ê –í–°–ï–• –î–ê–ù–ù–´–•
    try {
      const decryptedApplication = {
        ...application.toObject(),
        
        // üîê –†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
        personal_data: {
          first_name: decryptString(application.personal_data.first_name),
          last_name: decryptString(application.personal_data.last_name),
          email: decryptString(application.personal_data.email),
          phone: decryptString(application.personal_data.phone),
          date_of_birth: application.personal_data.date_of_birth,
          address: {
            street: decryptString(application.personal_data.address.street),
            city: decryptString(application.personal_data.address.city),
            postal_code: decryptString(application.personal_data.address.postal_code),
            country: application.personal_data.address.country
          }
        },
        
        // üîê –†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´
        documents: {
          id_card_url: decryptString(application.documents.id_card_url),
          bank_rib_url: decryptString(application.documents.bank_rib_url),
          driver_license_url: application.documents.driver_license_url ? 
            decryptString(application.documents.driver_license_url) : null,
          insurance_url: application.documents.insurance_url ? 
            decryptString(application.documents.insurance_url) : null,
          vehicle_registration_url: application.documents.vehicle_registration_url ? 
            decryptString(application.documents.vehicle_registration_url) : null
        },
        
        // üîê –†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï –¢–†–ê–ù–°–ü–û–†–¢–ê
        vehicle_info: {
          ...application.vehicle_info,
          license_plate: application.vehicle_info.license_plate ? 
            decryptString(application.vehicle_info.license_plate) : null,
          insurance_policy_number: application.vehicle_info.insurance_policy_number ? 
            decryptString(application.vehicle_info.insurance_policy_number) : null
        }
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞
      const existingProfile = await CourierProfile.findOne({ 
        user_id: application.user_id._id 
      });

      res.status(200).json({
        result: true,
        message: "–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ)",
        application: decryptedApplication,
        has_courier_profile: !!existingProfile,
        courier_profile_id: existingProfile?._id
      });

    } catch (decryptError) {
      console.error('üö® FULL DECRYPTION ERROR:', decryptError);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      res.status(200).json({
        result: true,
        message: "–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã (—á–∞—Å—Ç–∏—á–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)",
        application: {
          ...application.toObject(),
          decryption_error: "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"
        }
      });
    }

  } catch (error) {
    console.error('üö® GET COURIER APPLICATION DETAILS - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏",
      error: error.message
    });
  }
};

/**
 * 3. –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞
 * POST /api/admin/couriers/applications/:id/approve
 */
const approveCourierApplication = async (req, res) => {
  try {
    const { admin } = req;
    const { id } = req.params;
    const { admin_notes = '' } = req.body;

    console.log('‚úÖ APPROVE COURIER APPLICATION:', {
      application_id: id,
      admin_id: admin._id
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!['manager', 'owner'].includes(admin.role)) {
      return res.status(403).json({
        result: false,
        message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤"
      });
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        result: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
      });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const application = await CourierApplication.findById(id);

    if (!application) {
      return res.status(404).json({
        result: false,
        message: "–ó–∞—è–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    if (application.status !== 'pending') {
      return res.status(400).json({
        result: false,
        message: `–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${application.status}`
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
    const existingProfile = await CourierProfile.findOne({ 
      user_id: application.user_id 
    });

    if (existingProfile) {
      return res.status(400).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
      });
    }

    // –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
    await application.approve(admin._id, admin_notes);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞
    const courierProfile = await application.createCourierProfile();

    console.log('‚úÖ COURIER APPROVED AND PROFILE CREATED:', {
      application_id: application._id,
      profile_id: courierProfile._id,
      user_id: application.user_id
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞—è–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω",
      application: {
        id: application._id,
        status: application.status,
        approved_at: application.review_info.approved_at,
        approved_by: admin._id
      },
      courier_profile: {
        id: courierProfile._id,
        first_name: courierProfile.first_name,
        last_name: courierProfile.last_name,
        is_approved: courierProfile.is_approved
      }
    });

  } catch (error) {
    console.error('üö® APPROVE COURIER APPLICATION - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞",
      error: error.message
    });
  }
};

/**
 * 4. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞
 * POST /api/admin/couriers/applications/:id/reject
 */
const rejectCourierApplication = async (req, res) => {
  try {
    const { admin } = req;
    const { id } = req.params;
    const { rejection_reason, admin_notes = '' } = req.body;

    console.log('‚ùå REJECT COURIER APPLICATION:', {
      application_id: id,
      admin_id: admin._id,
      reason: rejection_reason
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!['manager', 'owner'].includes(admin.role)) {
      return res.status(403).json({
        result: false,
        message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤"
      });
    }

    if (!rejection_reason || rejection_reason.trim().length === 0) {
      return res.status(400).json({
        result: false,
        message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      });
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        result: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
      });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const application = await CourierApplication.findById(id);

    if (!application) {
      return res.status(404).json({
        result: false,
        message: "–ó–∞—è–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    if (application.status !== 'pending') {
      return res.status(400).json({
        result: false,
        message: `–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${application.status}`
      });
    }

    // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
    await application.reject(admin._id, rejection_reason.trim(), admin_notes);

    console.log('‚ùå COURIER APPLICATION REJECTED:', {
      application_id: application._id,
      rejected_by: admin._id,
      reason: rejection_reason
    });

    res.status(200).json({
      result: true,
      message: "–ó–∞—è–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
      application: {
        id: application._id,
        status: application.status,
        rejected_at: application.review_info.reviewed_at,
        rejection_reason: application.review_info.rejection_reason,
        rejected_by: admin._id
      }
    });

  } catch (error) {
    console.error('üö® REJECT COURIER APPLICATION - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞",
      error: error.message
    });
  }
};

/**
 * 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∫—É—Ä—å–µ—Ä–æ–≤
 * GET /api/admin/couriers/profiles
 */
const getAllCourierProfiles = async (req, res) => {
  try {
    const { admin } = req;
    const { 
      page = 1, 
      limit = 20, 
      is_available = 'all',
      is_blocked = 'all',
      vehicle_type = 'all'
    } = req.query;

    console.log('üë• GET ALL COURIER PROFILES:', {
      admin_id: admin._id,
      filters: { is_available, is_blocked, vehicle_type }
    });

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filters = {};
    
    if (is_available !== 'all') {
      filters.is_available = is_available === 'true';
    }
    
    if (is_blocked !== 'all') {
      filters.is_blocked = is_blocked === 'true';
    }
    
    if (vehicle_type !== 'all') {
      filters.vehicle_type = vehicle_type;
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const skip = (parseInt(page) - 1) * parseInt(limit);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫—É—Ä—å–µ—Ä–æ–≤
    const [profiles, totalCount] = await Promise.all([
      CourierProfile.find(filters)
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(parseInt(limit))
        .populate('user_id', 'role is_active createdAt')
        .populate('approved_by', 'full_name role')
        .lean(),
      CourierProfile.countDocuments(filters)
    ]);

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ—Ñ–∏–ª–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã",
      profiles: profiles.map(profile => ({
        id: profile._id,
        user_id: profile.user_id,
        first_name: profile.first_name,
        last_name: profile.last_name,
        vehicle_type: profile.vehicle_type,
        is_available: profile.is_available,
        is_online: profile.is_online,
        is_approved: profile.is_approved,
        is_blocked: profile.is_blocked,
        location: profile.location,
        work_radius: profile.work_radius,
        ratings: profile.ratings,
        approved_by: profile.approved_by,
        approved_at: profile.approved_at,
        createdAt: profile.createdAt
      })),
      pagination: {
        current_page: parseInt(page),
        total_pages: Math.ceil(totalCount / parseInt(limit)),
        total_items: totalCount,
        items_per_page: parseInt(limit)
      }
    });

  } catch (error) {
    console.error('üö® GET ALL COURIER PROFILES - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∫—É—Ä—å–µ—Ä–æ–≤",
      error: error.message
    });
  }
};

/**
 * 6. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞
 * POST /api/admin/couriers/profiles/:id/block
 * POST /api/admin/couriers/profiles/:id/unblock
 */
const blockCourierProfile = async (req, res) => {
  try {
    const { admin } = req;
    const { id } = req.params;
    const { reason, duration_hours } = req.body;

    if (!['manager', 'owner'].includes(admin.role)) {
      return res.status(403).json({
        result: false,
        message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤"
      });
    }

    if (!reason) {
      return res.status(400).json({
        result: false,
        message: "–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      });
    }

    const courierProfile = await CourierProfile.findById(id);

    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–∞
    const duration = duration_hours ? duration_hours * 60 * 60 * 1000 : null;
    await courierProfile.block(reason, duration);

    res.status(200).json({
      result: true,
      message: "–ö—É—Ä—å–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
      profile: {
        id: courierProfile._id,
        is_blocked: courierProfile.is_blocked,
        blocked_reason: courierProfile.blocked_reason,
        blocked_until: courierProfile.blocked_until
      }
    });

  } catch (error) {
    console.error('BLOCK COURIER - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞",
      error: error.message
    });
  }
};

const unblockCourierProfile = async (req, res) => {
  try {
    const { admin } = req;
    const { id } = req.params;

    if (!['manager', 'owner'].includes(admin.role)) {
      return res.status(403).json({
        result: false,
        message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤"
      });
    }

    const courierProfile = await CourierProfile.findById(id);

    if (!courierProfile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    await courierProfile.unblock();

    res.status(200).json({
      result: true,
      message: "–ö—É—Ä—å–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
      profile: {
        id: courierProfile._id,
        is_blocked: courierProfile.is_blocked
      }
    });

  } catch (error) {
    console.error('UNBLOCK COURIER - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞",
      error: error.message
    });
  }
};

/**
 * 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤
 * GET /api/admin/couriers/statistics
 */
const getCourierStatistics = async (req, res) => {
  try {
    const { admin } = req;
    const { period = '30' } = req.query;

    const days = parseInt(period);
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);
    const endDate = new Date();

    console.log('üìä GET COURIER STATISTICS:', {
      admin_id: admin._id,
      period: `${days} days`,
      date_range: { startDate, endDate }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
    const applications = await CourierApplication.aggregate([
      {
        $match: {
          submitted_at: { $gte: startDate, $lte: endDate }
        }
      },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    const profiles = await CourierProfile.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: 1 },
          active: { $sum: { $cond: [{ $eq: ['$is_available', true] }, 1, 0] } },
          blocked: { $sum: { $cond: [{ $eq: ['$is_blocked', true] }, 1, 0] } },
          avg_rating: { $avg: '$ratings.average_rating' }
        }
      }
    ]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const vehicleStats = await CourierProfile.aggregate([
      {
        $group: {
          _id: '$vehicle_type',
          count: { $sum: 1 },
          avg_rating: { $avg: '$ratings.average_rating' }
        }
      }
    ]);

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    const applicationStats = applications.reduce((acc, item) => {
      acc[item._id] = item.count;
      return acc;
    }, { pending: 0, approved: 0, rejected: 0 });

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞",
      period: period,
      date_range: {
        start: startDate,
        end: endDate
      },
      statistics: {
        applications: {
          pending: applicationStats.pending || 0,
          approved: applicationStats.approved || 0,
          rejected: applicationStats.rejected || 0,
          total: Object.values(applicationStats).reduce((sum, count) => sum + count, 0)
        },
        profiles: profiles[0] || {
          total: 0,
          active: 0,
          blocked: 0,
          avg_rating: 0
        },
        vehicles: vehicleStats.reduce((acc, vehicle) => {
          acc[vehicle._id] = {
            count: vehicle.count,
            avg_rating: vehicle.avg_rating || 0
          };
          return acc;
        }, {})
      }
    });

  } catch (error) {
    console.error('GET COURIER STATISTICS - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤",
      error: error.message
    });
  }
};

export { 
  getAllCourierApplications,
  getCourierApplicationDetails,
  approveCourierApplication,
  rejectCourierApplication,
  getAllCourierProfiles,
  blockCourierProfile,
  unblockCourierProfile,
  getCourierStatistics
};