// controllers/PublicController.js - –ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
import { 
  getPublicCatalog,
  getRestaurantDetails,
  getPublicRestaurantMenu,
  searchPublicRestaurants,
  getRestaurantCategories,
  getPopularRestaurantsList,
  getRestaurantsByCategory as getRestaurantsByCategoryService
} from '../services/Public/public.service.js';

/**
 * üè™ –ü–û–õ–£–ß–ò–¢–¨ –ö–ê–¢–ê–õ–û–ì –†–ï–°–¢–û–†–ê–ù–û–í
 * GET /api/public/catalog
 */
 const getCatalog = async (req, res) => {
  try {
    const {
      lat,
      lng,
      category,
      limit = 20,
      offset = 0,
      sort = 'rating', // rating, distance, delivery_time
      radius = 10 // —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–º
    } = req.query;

    console.log('üìç GET CATALOG:', { lat, lng, category, sort, limit });

    const result = await getPublicCatalog({
      coordinates: lat && lng ? { lat: parseFloat(lat), lng: parseFloat(lng) } : null,
      category,
      limit: parseInt(limit),
      offset: parseInt(offset),
      sort,
      radius: parseFloat(radius)
    });

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω",
      restaurants: result.restaurants,
      total: result.total,
      filters_applied: result.filters,
      pagination: {
        limit: parseInt(limit),
        offset: parseInt(offset),
        has_more: result.total > (parseInt(offset) + parseInt(limit))
      }
    });

  } catch (error) {
    console.error('üö® GET CATALOG Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞"
    });
  }
};

/**
 * üèÜ –ü–û–ü–£–õ–Ø–†–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´
 * GET /api/public/restaurants/popular
 */
 const getPopularRestaurants = async (req, res) => {
  try {
    const { lat, lng, limit = 10 } = req.query;

    const result = await getPopularRestaurantsList({
      coordinates: lat && lng ? { lat: parseFloat(lat), lng: parseFloat(lng) } : null,
      limit: parseInt(limit)
    });

    res.status(200).json({
      result: true,
      message: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã",
      restaurants: result.restaurants,
      criteria: "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤"
    });

  } catch (error) {
    console.error('üö® GET POPULAR RESTAURANTS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"
    });
  }
};

/**
 * üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò –†–ï–°–¢–û–†–ê–ù–û–í
 * GET /api/public/restaurants/categories
 */
 const getCategories = async (req, res) => {
  try {
    const result = await getRestaurantCategories();

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã",
      categories: result.categories,
      total: result.total
    });

  } catch (error) {
    console.error('üö® GET CATEGORIES Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    });
  }
};

/**
 * üè∑Ô∏è –†–ï–°–¢–û–†–ê–ù–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò
 * GET /api/public/restaurants/category/:category
 */
 const getRestaurantsByCategory = async (req, res) => {
  try {
    const { category } = req.params;
    const { lat, lng, limit = 20, offset = 0 } = req.query;

    const result = await getRestaurantsByCategoryService({
      category,
      coordinates: lat && lng ? { lat: parseFloat(lat), lng: parseFloat(lng) } : null,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: `–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –ø–æ–ª—É—á–µ–Ω—ã`,
      restaurants: result.restaurants,
      category: result.categoryInfo,
      total: result.total
    });

  } catch (error) {
    console.error('üö® GET RESTAURANTS BY CATEGORY Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    });
  }
};

/**
 * üîç –ü–û–ò–°–ö –†–ï–°–¢–û–†–ê–ù–û–í
 * GET /api/public/restaurants/search
 */
 const searchRestaurants = async (req, res) => {
  try {
    const {
      q, // –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      lat,
      lng,
      category,
      limit = 20,
      offset = 0
    } = req.query;

    if (!q || q.trim() === '') {
      return res.status(400).json({
        result: false,
        message: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
      });
    }

    const result = await searchPublicRestaurants({
      query: q.trim(),
      coordinates: lat && lng ? { lat: parseFloat(lat), lng: parseFloat(lng) } : null,
      category,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
      restaurants: result.restaurants,
      query: q.trim(),
      total: result.total,
      search_in: result.searchFields
    });

  } catch (error) {
    console.error('üö® SEARCH RESTAURANTS Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"
    });
  }
};

/**
 * üè™ –î–ï–¢–ê–õ–ò –†–ï–°–¢–û–†–ê–ù–ê
 * GET /api/public/restaurants/:id
 */
 const getRestaurantById = async (req, res) => {
  try {
    const { id } = req.params;
    const { lat, lng } = req.query;

    console.log('üîç GET RESTAURANT DETAILS:', { id, lat, lng });

    const result = await getRestaurantDetails({
      restaurantId: id,
      coordinates: lat && lng ? { lat: parseFloat(lat), lng: parseFloat(lng) } : null
    });

    res.status(200).json({
      result: true,
      message: "–î–µ—Ç–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã",
      restaurant: result.restaurant,
      distance: result.distance,
      estimated_delivery: result.estimatedDelivery
    });

  } catch (error) {
    console.error('üö® GET RESTAURANT BY ID Error:', error);
    
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      return res.status(404).json({
        result: false,
        message: error.message
      });
    }

    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
    });
  }
};

/**
 * üìã –ú–ï–ù–Æ –†–ï–°–¢–û–†–ê–ù–ê
 * GET /api/public/restaurants/:id/menu
 */
 const getRestaurantMenu = async (req, res) => {
  try {
    const { id } = req.params;

    console.log('üçΩÔ∏è GET RESTAURANT MENU:', { id });

    const result = await getPublicRestaurantMenu(id);

    res.status(200).json({
      result: true,
      message: "–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω–æ",
      restaurant: {
        id: result.restaurant._id,
        name: result.restaurant.business_name,
        category: result.restaurant.category,
        working_hours: result.restaurant.working_hours,
        is_open: result.isOpen
      },
      menu: {
        categories: result.menu.categories,
        total_products: result.menu.totalProducts,
        total_categories: result.menu.totalCategories
      }
    });

  } catch (error) {
    console.error('üö® GET RESTAURANT MENU Error:', error);
    
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      return res.status(404).json({
        result: false,
        message: error.message
      });
    }

    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
    });
  }
};

export { getCatalog,
         getPopularRestaurants,
         getCategories,
         getRestaurantsByCategory,
         searchRestaurants,
         getRestaurantById,
         getRestaurantMenu
       }