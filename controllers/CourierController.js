// controllers/CourierController.js
import {
  createCourierApplication,
  loginCourier,
  getCourierApplicationStatus,
  getCourierProfile,
  toggleCourierAvailability,
  updateCourierLocation
} from '../services/Courier/courier.service.js';
import { generateCourierToken } from '../services/token.service.js';

/**
 * –≠–¢–ê–ü 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê
 * POST /api/couriers/register
 */
const registerCourier = async (req, res) => {
  try {
    const applicationData = {
      ...req.body,
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      ip_address: req.ip || req.connection.remoteAddress,
      user_agent: req.get('User-Agent') || 'Unknown',
      source: req.body.source || 'web'
    };

    console.log('üìã REGISTER COURIER - Start:', {
      email: req.body.email,
      vehicle_type: req.body.vehicle_type,
      has_documents: {
        id_card: !!req.body.id_card_url,
        bank_rib: !!req.body.bank_rib_url,
        driver_license: !!req.body.driver_license_url
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    const result = await createCourierApplication(applicationData);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
    const token = generateCourierToken({
      user_id: result.user.id,
      _id: result.user.id,
      email: result.user.email,
      role: result.user.role
    }, '30d');

    res.status(201).json({
      result: true,
      message: "–ó–∞—è–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
      user: result.user,
      application: result.application,
      token,
      workflow_info: {
        current_stage: "document_review",
        status: "pending",
        description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 24 —á–∞—Å–∞."
      },
      next_step: {
        action: "wait_for_approval",
        expected_time: "24 —á–∞—Å–∞",
        description: "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
      }
    });

  } catch (error) {
    console.error('üö® REGISTER COURIER - Error:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if (error.message.includes('—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω') || error.message.includes('—É–∂–µ –ø–æ–¥–∞–Ω–∞')) {
      return res.status(409).json({
        result: false,
        message: error.message
      });
    }
    
    if (error.message.includes('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')) {
      return res.status(400).json({
        result: false,
        message: error.message
      });
    }

    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞",
      error: error.message
    });
  }
};

/**
 * –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê
 * POST /api/couriers/login
 */
const loginCourierController = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        result: false,
        message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    console.log('üîê LOGIN COURIER - Start:', { email });

    const result = await loginCourier({ email, password });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = generateCourierToken({
      user_id: result.user.id,
      _id: result.user.id,
      email: result.user.email,
      role: result.user.role
    }, '7d');

    res.status(200).json({
      result: true,
      message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
      user: result.user,
      courier: result.courier,
      token
    });

  } catch (error) {
    console.error('üö® LOGIN COURIER - Error:', error);
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 
                      error.message.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω') ? 423 :
                      error.message.includes('–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω') ? 403 : 401;

    res.status(statusCode).json({
      result: false,
      message: error.message
    });
  }
};

/**
 * –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê –ö–£–†–¨–ï–†–ê
 * GET /api/couriers/verify
 */
const verifyCourier = async (req, res) => {
  try {
    const { user } = req; // –ò–∑ middleware

    res.status(200).json({
      result: true,
      message: "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω",
      user: {
        id: user._id,
        email: user.email,
        role: user.role,
        is_active: user.is_active
      }
    });

  } catch (error) {
    console.error('üö® VERIFY COURIER - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"
    });
  }
};

/**
 * –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–Ø–í–ö–ò
 * GET /api/couriers/application-status
 */
const getApplicationStatus = async (req, res) => {
  try {
    const { user } = req;

    console.log('üìã GET APPLICATION STATUS:', { user_id: user._id });

    const statusInfo = await getCourierApplicationStatus(user._id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω",
      ...statusInfo
    });

  } catch (error) {
    console.error('üö® GET APPLICATION STATUS - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏",
      error: error.message
    });
  }
};

/**
 * –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ö–£–†–¨–ï–†–ê
 * GET /api/couriers/profile
 */
const getProfile = async (req, res) => {
  try {
    const { user } = req;

    const result = await getCourierProfile(user._id);

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω",
      profile: result.profile
    });

  } catch (error) {
    console.error('üö® GET COURIER PROFILE - Error:', error);
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;
    
    res.status(statusCode).json({
      result: false,
      message: error.message
    });
  }
};

/**
 * –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò (On-e/Off-e)
 * PATCH /api/couriers/availability
 */
const toggleAvailability = async (req, res) => {
  try {
    const { user } = req;

    console.log('üîÑ TOGGLE AVAILABILITY:', { user_id: user._id });

    const result = await toggleCourierAvailability(user._id);

    res.status(200).json({
      result: true,
      message: `–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ${result.is_available ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`,
      availability: {
        is_available: result.is_available,
        is_online: result.is_online
      }
    });

  } catch (error) {
    console.error('üö® TOGGLE AVAILABILITY - Error:', error);
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–Ω–µ –æ–¥–æ–±—Ä–µ–Ω') ? 403 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message
    });
  }
};

/**
 * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–ï–û–õ–û–ö–ê–¶–ò–ò
 * PATCH /api/couriers/location
 */
const updateLocation = async (req, res) => {
  try {
    const { user } = req;
    const { latitude, longitude } = req.body;

    if (typeof latitude !== 'number' || typeof longitude !== 'number') {
      return res.status(400).json({
        result: false,
        message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
      });
    }

    console.log('üìç UPDATE LOCATION:', { 
      user_id: user._id, 
      lat: latitude, 
      lng: longitude 
    });

    const result = await updateCourierLocation(user._id, { latitude, longitude });

    res.status(200).json({
      result: true,
      message: "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      location: result.location
    });

  } catch (error) {
    console.error('üö® UPDATE LOCATION - Error:', error);
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message
    });
  }
};

/**
 * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ö–£–†–¨–ï–†–ê
 * PUT /api/couriers/profile
 */
const updateProfile = async (req, res) => {
  try {
    const { user } = req;
    const { first_name, last_name, phone, avatar_url, work_radius } = req.body;

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ toggleAvailability –∏ updateLocation

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)",
      updates: { first_name, last_name, phone, avatar_url, work_radius }
    });

  } catch (error) {
    console.error('üö® UPDATE PROFILE - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
    });
  }
};

/**
 * –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê–†–ê–ë–û–¢–ö–ê
 * GET /api/couriers/earnings
 */
const getEarnings = async (req, res) => {
  try {
    const { user } = req;
    
    const courierProfile = await getCourierProfile(user._id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞",
      earnings: courierProfile.profile.earnings,
      work_stats: courierProfile.profile.work_stats,
      ratings: courierProfile.profile.ratings
    });

  } catch (error) {
    console.error('üö® GET EARNINGS - Error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    });
  }
};


export { registerCourier,
         loginCourierController,
         verifyCourier,
         getApplicationStatus,
         getProfile,
         toggleAvailability,
         updateLocation,
         updateProfile,
         getEarnings 
        }