// controllers/AddressController.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏
import {
  addCustomerAddress,
  updateCustomerAddress,
  deleteCustomerAddress,
  getCustomerAddresses,
  getCustomerAddressById,
  setDefaultAddress as setDefaultAddressService, // ‚úÖ –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–û –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
  getDeliveryZones,
  generateMockAddresses
} from '../services/Address/address.service.js';

// ================ CRUD –û–ü–ï–†–ê–¶–ò–ò ================

/**
 * üìç –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ê–î–†–ï–°–ê
 * POST /api/customers/addresses
 */
export const addAddress = async (req, res) => {
  try {
    const { user } = req;
    const addressData = req.body;

    console.log('üìç ADD ADDRESS Controller:', { 
      userId: user._id, 
      address: addressData.address 
    });

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!addressData.address || addressData.address.trim().length === 0) {
      return res.status(400).json({
        result: false,
        message: '–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      });
    }

    if (!addressData.name) {
      addressData.name = '–î–æ–º'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    const result = await addCustomerAddress(user._id, addressData);

    res.status(201).json({
      result: true,
      message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
      address: result.address,
      total_addresses: result.profile.saved_addresses.length
    });

  } catch (error) {
    console.error('üö® ADD ADDRESS Controller Error:', error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (error.validationErrors) {
      return res.status(400).json({
        result: false,
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: error.validationErrors
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') ? 422 :
                      error.message.includes('–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω') ? 422 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞'
    });
  }
};

/**
 * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ê–î–†–ï–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
 * GET /api/customers/addresses
 */
export const getAddresses = async (req, res) => {
  try {
    const { user } = req;

    console.log('üìã GET ADDRESSES Controller:', { userId: user._id });

    const result = await getCustomerAddresses(user._id);

    res.status(200).json({
      result: true,
      message: '–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      addresses: result.addresses,
      total_count: result.total_count,
      delivery_zones_info: getDeliveryZones()
    });

  } catch (error) {
    console.error('üö® GET ADDRESSES Controller Error:', error);

    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤'
    });
  }
};

/**
 * üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ê–î–†–ï–°–ê
 * GET /api/customers/addresses/:addressId
 */
export const getAddressById = async (req, res) => {
  try {
    const { user } = req;
    const { addressId } = req.params;

    console.log('üéØ GET ADDRESS BY ID Controller:', { 
      userId: user._id, 
      addressId 
    });

    if (!addressId) {
      return res.status(400).json({
        result: false,
        message: 'ID –∞–¥—Ä–µ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const result = await getCustomerAddressById(user._id, addressId);

    res.status(200).json({
      result: true,
      message: '–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω',
      address: result.address
    });

  } catch (error) {
    console.error('üö® GET ADDRESS BY ID Controller Error:', error);

    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞'
    });
  }
};

/**
 * ‚úèÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–†–ï–°–ê
 * PUT /api/customers/addresses/:addressId
 */
export const updateAddress = async (req, res) => {
  try {
    const { user } = req;
    const { addressId } = req.params;
    const updateData = req.body;

    console.log('‚úèÔ∏è UPDATE ADDRESS Controller:', { 
      userId: user._id, 
      addressId,
      updateFields: Object.keys(updateData)
    });

    if (!addressId) {
      return res.status(400).json({
        result: false,
        message: 'ID –∞–¥—Ä–µ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (Object.keys(updateData).length === 0) {
      return res.status(400).json({
        result: false,
        message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
      });
    }

    const result = await updateCustomerAddress(user._id, addressId, updateData);

    res.status(200).json({
      result: true,
      message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      address: result.address
    });

  } catch (error) {
    console.error('üö® UPDATE ADDRESS Controller Error:', error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (error.validationErrors) {
      return res.status(400).json({
        result: false,
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: error.validationErrors
      });
    }

    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞'
    });
  }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ê–î–†–ï–°–ê
 * DELETE /api/customers/addresses/:addressId
 */
export const removeAddress = async (req, res) => {
  try {
    const { user } = req;
    const { addressId } = req.params;

    console.log('üóëÔ∏è DELETE ADDRESS Controller:', { 
      userId: user._id, 
      addressId 
    });

    if (!addressId) {
      return res.status(400).json({
        result: false,
        message: 'ID –∞–¥—Ä–µ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const result = await deleteCustomerAddress(user._id, addressId);

    res.status(200).json({
      result: true,
      message: result.message,
      remaining_addresses: result.profile.saved_addresses.length
    });

  } catch (error) {
    console.error('üö® DELETE ADDRESS Controller Error:', error);

    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞'
    });
  }
};

/**
 * üè† –£–°–¢–ê–ù–û–í–ö–ê –û–°–ù–û–í–ù–û–ì–û –ê–î–†–ï–°–ê
 * PATCH /api/customers/addresses/:addressId/default
 */
export const setDefaultAddressController = async (req, res) => {
  try {
    const { user } = req;
    const { addressId } = req.params;

    console.log('üè† SET DEFAULT ADDRESS Controller:', { 
      userId: user._id, 
      addressId 
    });

    if (!addressId) {
      return res.status(400).json({
        result: false,
        message: 'ID –∞–¥—Ä–µ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const result = await setDefaultAddressService(user._id, addressId);

    res.status(200).json({
      result: true,
      message: result.message,
      default_address: result.address
    });

  } catch (error) {
    console.error('üö® SET DEFAULT ADDRESS Controller Error:', error);

    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                      error.message.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID') ? 400 : 500;

    res.status(statusCode).json({
      result: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞'
    });
  }
};

// ================ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ================

/**
 * üó∫Ô∏è –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ó–û–ù–ê–• –î–û–°–¢–ê–í–ö–ò
 * GET /api/customers/addresses/delivery-zones
 */
export const getDeliveryZonesInfo = async (req, res) => {
  try {
    console.log('üó∫Ô∏è GET DELIVERY ZONES INFO Controller');

    const zonesInfo = getDeliveryZones();

    res.status(200).json({
      result: true,
      message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–æ–Ω–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏',
      delivery_zones: zonesInfo
    });

  } catch (error) {
    console.error('üö® GET DELIVERY ZONES Controller Error:', error);
    res.status(500).json({
      result: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏'
    });
  }
};

/**
 * üß™ –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –ê–î–†–ï–°–û–í (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 * GET /api/customers/addresses/mock-data
 */
export const getMockAddresses = async (req, res) => {
  try {
    console.log('üß™ GET MOCK ADDRESSES Controller');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'production') {
      return res.status(403).json({
        result: false,
        message: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
      });
    }

    const mockAddresses = generateMockAddresses();

    res.status(200).json({
      result: true,
      message: '–¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      mock_addresses: mockAddresses,
      note: '–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    });

  } catch (error) {
    console.error('üö® GET MOCK ADDRESSES Controller Error:', error);
    res.status(500).json({
      result: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
    });
  }
};

/**
 * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–î–†–ï–°–ê –ë–ï–ó –°–û–•–†–ê–ù–ï–ù–ò–Ø
 * POST /api/customers/addresses/validate
 */
export const validateAddress = async (req, res) => {
  try {
    const { address, lat, lng } = req.body;

    console.log('üîç VALIDATE ADDRESS Controller:', { address });

    if (!address || address.trim().length < 5) {
      return res.status(400).json({
        result: false,
        message: '–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
    const { mockGeocodeAddress, determineDeliveryZone } = await import('../services/Address/address.service.js');

    let validationResult;

    if (lat && lng) {
      // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
      const zone = determineDeliveryZone(lat, lng);
      validationResult = {
        success: true,
        coordinates: { lat, lng },
        zone: zone,
        is_deliverable: zone !== null,
        formatted_address: address
      };
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
      validationResult = mockGeocodeAddress(address);
      validationResult.is_deliverable = validationResult.zone !== null;
    }

    res.status(200).json({
      result: true,
      message: validationResult.is_deliverable ? '–ê–¥—Ä–µ—Å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏' : '–ê–¥—Ä–µ—Å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏',
      validation: validationResult
    });

  } catch (error) {
    console.error('üö® VALIDATE ADDRESS Controller Error:', error);
    res.status(500).json({
      result: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞'
    });
  }
};

// ================ –≠–ö–°–ü–û–†–¢ –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í ================



// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default {
  addAddress,
  getAddresses,
  getAddressById,
  updateAddress,
  removeAddress,
  setDefaultAddress: setDefaultAddressController, // ‚úÖ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ò–ú–ï–ù–ò
  getDeliveryZonesInfo,
  getMockAddresses,
  validateAddress
};