// controllers/PartnerMenuController.js - –ó–ê–í–ï–†–®–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ –ò –ü–†–û–î–£–ö–¢–ê–ú–ò üçΩÔ∏è
import { PartnerProfile, Product } from '../models/index.js';

// ================ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò –ú–ï–ù–Æ ================

/**
 * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô –ú–ï–ù–Æ –ü–ê–†–¢–ù–ï–†–ê
 * GET /api/partners/menu/categories
 */
export const getMenuCategories = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await partner.updateProductStats();

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω—ã",
      categories: partner.menu_categories,
      total_categories: partner.menu_categories.length,
      business_info: {
        business_name: partner.business_name,
        category: partner.category
      }
    });

  } catch (error) {
    console.error('Get menu categories error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é"
    });
  }
};

/**
 * ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–ù–Æ
 * POST /api/partners/menu/categories
 */
export const addMenuCategory = async (req, res) => {
  try {
    const { user } = req;
    const { name, description, image_url, sort_order } = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || name.trim().length === 0) {
      return res.status(400).json({
        result: false,
        message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
      });
    }

    if (name.length > 50) {
      return res.status(400).json({
        result: false,
        message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    await partner.addMenuCategory({
      name: name.trim(),
      description: description?.trim() || '',
      image_url: image_url || '',
      sort_order: sort_order || partner.menu_categories.length
    });

    res.status(201).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∞",
      category: partner.menu_categories[partner.menu_categories.length - 1],
      total_categories: partner.menu_categories.length
    });

  } catch (error) {
    console.error('Add menu category error:', error);
    
    if (error.message === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') {
      return res.status(400).json({
        result: false,
        message: error.message
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    });
  }
};

/**
 * ‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–ù–Æ
 * PUT /api/partners/menu/categories/:category_id
 */
export const updateMenuCategory = async (req, res) => {
  try {
    const { user } = req;
    const { category_id } = req.params;
    const { name, description, image_url, sort_order, is_active } = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    await partner.updateMenuCategory(category_id, {
      name: name?.trim(),
      description: description?.trim(),
      image_url,
      sort_order,
      is_active
    });

    const updatedCategory = partner.menu_categories.id(category_id);

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      category: updatedCategory
    });

  } catch (error) {
    console.error('Update menu category error:', error);
    
    if (error.message === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞') {
      return res.status(404).json({
        result: false,
        message: error.message
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    });
  }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–ù–Æ
 * DELETE /api/partners/menu/categories/:category_id
 */
export const deleteMenuCategory = async (req, res) => {
  try {
    const { user } = req;
    const { category_id } = req.params;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = partner.menu_categories.id(category_id);
    if (!category) {
      return res.status(404).json({
        result: false,
        message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    const productsInCategory = await Product.countDocuments({
      partner_id: partner._id,
      subcategory: category.slug
    });

    if (productsInCategory > 0) {
      return res.status(400).json({
        result: false,
        message: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í –Ω–µ–π ${productsInCategory} —Ç–æ–≤–∞—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã.`
      });
    }

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await partner.removeMenuCategory(category_id);

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞",
      remaining_categories: partner.menu_categories.length
    });

  } catch (error) {
    console.error('Delete menu category error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    });
  }
};

// ================ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê–ú–ò/–ë–õ–Æ–î–ê–ú–ò ================

/**
 * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í –ü–ê–†–¢–ù–ï–†–ê
 * GET /api/partners/menu/products
 */
export const getProducts = async (req, res) => {
  try {
    const { user } = req;
    const { category_slug, include_inactive } = req.query;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    let products;
    if (category_slug) {
      // –ü—Ä–æ–¥—É–∫—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      products = await Product.findByPartnerCategory(
        partner._id, 
        category_slug, 
        include_inactive === 'true'
      );
    } else {
      // –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      products = await Product.findByPartner(
        partner._id, 
        include_inactive === 'true'
      );
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const productsByCategory = {};
    partner.menu_categories.forEach(category => {
      productsByCategory[category.slug] = {
        category_info: category,
        products: products.filter(p => p.subcategory === category.slug)
      };
    });

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã",
      products_by_category: productsByCategory,
      total_products: products.length,
      business_info: {
        business_name: partner.business_name,
        category: partner.category
      }
    });

  } catch (error) {
    console.error('Get products error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    });
  }
};

/**
 * ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ü–†–û–î–£–ö–¢–ê/–ë–õ–Æ–î–ê
 * POST /api/partners/menu/products
 */
export const addProduct = async (req, res) => {
  try {
    const { user } = req;
    const {
      title,
      description,
      price,
      discount_price,
      image_url,
      subcategory, // slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
      preparation_time,
      options_groups, // ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
      dish_info,
      product_info,
      tags
    } = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    const requiredFields = { title, price, subcategory };
    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      return res.status(400).json({
        result: false,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
      });
    }

    if (price <= 0) {
      return res.status(400).json({
        result: false,
        message: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    const category = partner.menu_categories.find(cat => cat.slug === subcategory);
    if (!category) {
      return res.status(400).json({
        result: false,
        message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    let finalOptionsGroups = [];
    let validationWarnings = [];

    if (partner.category === 'restaurant') {
      // üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù: –†–∞–∑—Ä–µ—à–µ–Ω—ã –¥–æ–±–∞–≤–∫–∏
      if (options_groups && Array.isArray(options_groups)) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–±–∞–≤–æ–∫
        const validatedGroups = [];
        
        options_groups.forEach((group, groupIndex) => {
          if (!group.name || typeof group.name !== 'string') {
            validationWarnings.push(`–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–æ–∫ ${groupIndex + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
            return;
          }

          if (!group.options || !Array.isArray(group.options) || group.options.length === 0) {
            validationWarnings.push(`–ì—Ä—É–ø–ø–∞ "${group.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–∏`);
            return;
          }

          // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ü–∏–π –≤ –≥—Ä—É–ø–ø–µ
          const validatedOptions = [];
          group.options.forEach((option, optionIndex) => {
            if (!option.name || typeof option.name !== 'string') {
              validationWarnings.push(`–û–ø—Ü–∏—è ${optionIndex + 1} –≤ –≥—Ä—É–ø–ø–µ "${group.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
              return;
            }

            if (typeof option.price !== 'number' || option.price < 0) {
              validationWarnings.push(`–û–ø—Ü–∏—è "${option.name}": –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞`);
              return;
            }

            validatedOptions.push({
              name: option.name.trim(),
              price: parseFloat(option.price),
              is_available: option.is_available !== false // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
            });
          });

          if (validatedOptions.length > 0) {
            validatedGroups.push({
              name: group.name.trim(),
              description: group.description?.trim() || '',
              required: Boolean(group.required),
              multiple_choice: Boolean(group.multiple_choice),
              max_selections: parseInt(group.max_selections) || 1,
              options: validatedOptions
            });
          }
        });

        finalOptionsGroups = validatedGroups;
        
        console.log('üçΩÔ∏è RESTAURANT - Options groups processed:', {
          input_groups: options_groups.length,
          validated_groups: finalOptionsGroups.length,
          warnings: validationWarnings.length
        });
      }
      
    } else if (partner.category === 'store') {
      // üè™ –ú–ê–ì–ê–ó–ò–ù: –î–æ–±–∞–≤–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã
      if (options_groups && options_groups.length > 0) {
        return res.status(400).json({
          result: false,
          message: "–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø—Ü–∏–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º",
          business_rule: "–¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥–æ–±–∞–≤–∫–∏ –∫ –±–ª—é–¥–∞–º",
          partner_category: partner.category
        });
      }
      
      finalOptionsGroups = []; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      
      console.log('üè™ STORE - No options allowed:', {
        partner_category: partner.category,
        options_blocked: true
      });
    }

    // ‚úÖ –õ–û–ì–ò–ö–ê –í–†–ï–ú–ï–ù–ò –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–Ø –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –ö–ê–¢–ï–ì–û–†–ò–ò
    let finalPreparationTime = 0;
    
    if (partner.category === 'restaurant') {
      // –†–µ—Å—Ç–æ—Ä–∞–Ω—ã: –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ
      finalPreparationTime = preparation_time || 15; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç
    } else if (partner.category === 'store') {
      // –ú–∞–≥–∞–∑–∏–Ω—ã: –≤—Ä–µ–º—è –Ω–µ –≤–∞–∂–Ω–æ (—Ç–æ–≤–∞—Ä –≥–æ—Ç–æ–≤)
      finalPreparationTime = 0;
      if (preparation_time && preparation_time > 0) {
        validationWarnings.push('–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤');
      }
    }

    // ‚úÖ –°–û–ó–î–ê–ï–ú –ü–†–û–î–£–ö–¢ –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –õ–û–ì–ò–ö–û–ô
    const newProduct = new Product({
      partner_id: partner._id,
      title: title.trim(),
      description: description?.trim() || '',
      price: parseFloat(price),
      discount_price: discount_price ? parseFloat(discount_price) : null,
      image_url: image_url || '',
      category: partner.category, // restaurant/store
      subcategory: subcategory,
      menu_category_id: category._id,
      
      // ‚úÖ –í–†–ï–ú–Ø –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–Ø: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      preparation_time: finalPreparationTime,
      
      // ‚úÖ –î–û–ë–ê–í–ö–ò: —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
      options_groups: finalOptionsGroups,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
      dish_info: partner.category === 'restaurant' ? (dish_info || {}) : {},
      product_info: partner.category === 'store' ? (product_info || {}) : {},
      
      tags: tags || [],
      last_updated_by: user._id
    });

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    await newProduct.validateCategory();
    
    await newProduct.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    await partner.updateProductStats();

    console.log('‚úÖ PRODUCT CREATED:', {
      partner_category: partner.category,
      has_options: finalOptionsGroups.length > 0,
      preparation_time: finalPreparationTime,
      warnings_count: validationWarnings.length
    });

    // ‚úÖ –û–¢–í–ï–¢ –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û –ö–ê–¢–ï–ì–û–†–ò–ò
    res.status(201).json({
      result: true,
      message: "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
      product: newProduct,
      category_info: {
        name: category.name,
        slug: category.slug
      },
      business_rules: {
        partner_category: partner.category,
        supports_options: partner.category === 'restaurant',
        supports_preparation_time: partner.category === 'restaurant',
        options_groups_count: finalOptionsGroups.length,
        preparation_time: finalPreparationTime
      },
      warnings: validationWarnings.length > 0 ? validationWarnings : undefined
    });

  } catch (error) {
    console.error('Add product error:', error);
    
    if (error.message.includes('–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')) {
      return res.status(400).json({
        result: false,
        message: error.message
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
    });
  }
};

/**
 * ‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê
 * PUT /api/partners/menu/products/:product_id
 */
export const updateProduct = async (req, res) => {
  try {
    const { user } = req;
    const { product_id } = req.params;
    const updateData = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π —ç—Ç–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    const product = await Product.findOne({ 
      _id: product_id, 
      partner_id: partner._id 
    });

    if (!product) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    if (updateData.subcategory && updateData.subcategory !== product.subcategory) {
      const category = partner.menu_categories.find(cat => cat.slug === updateData.subcategory);
      if (!category) {
        return res.status(400).json({
          result: false,
          message: "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        });
      }
      updateData.menu_category_id = category._id;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    if (updateData.price && updateData.price <= 0) {
      return res.status(400).json({
        result: false,
        message: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
      });
    }

    // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    let validationWarnings = [];

    if (updateData.options_groups !== undefined) {
      if (partner.category === 'restaurant') {
        // üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù: –†–∞–∑—Ä–µ—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ–∫
        if (Array.isArray(updateData.options_groups)) {
          // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ addProduct)
          const validatedGroups = [];
          
          updateData.options_groups.forEach((group, groupIndex) => {
            if (!group.name || typeof group.name !== 'string') {
              validationWarnings.push(`–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–æ–∫ ${groupIndex + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
              return;
            }

            if (!group.options || !Array.isArray(group.options)) {
              validationWarnings.push(`–ì—Ä—É–ø–ø–∞ "${group.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–∏`);
              return;
            }

            const validatedOptions = group.options
              .filter(option => option.name && typeof option.name === 'string' && typeof option.price === 'number')
              .map(option => ({
                name: option.name.trim(),
                price: parseFloat(option.price),
                is_available: option.is_available !== false
              }));

            if (validatedOptions.length > 0) {
              validatedGroups.push({
                name: group.name.trim(),
                description: group.description?.trim() || '',
                required: Boolean(group.required),
                multiple_choice: Boolean(group.multiple_choice),
                max_selections: parseInt(group.max_selections) || 1,
                options: validatedOptions
              });
            }
          });

          updateData.options_groups = validatedGroups;
          
          console.log('üçΩÔ∏è RESTAURANT UPDATE - Options groups validated:', {
            input_groups: updateData.options_groups.length,
            validated_groups: validatedGroups.length
          });
        }
        
      } else if (partner.category === 'store') {
        // üè™ –ú–ê–ì–ê–ó–ò–ù: –ó–∞–ø—Ä–µ—â–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ–∫
        return res.status(400).json({
          result: false,
          message: "–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
          business_rule: "–¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥–æ–±–∞–≤–∫–∏",
          partner_category: partner.category
        });
      }
    }

    // ‚úÖ –õ–û–ì–ò–ö–ê –í–†–ï–ú–ï–ù–ò –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–Ø
    if (updateData.preparation_time !== undefined) {
      if (partner.category === 'store' && updateData.preparation_time > 0) {
        validationWarnings.push('–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ 0 –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤');
        updateData.preparation_time = 0;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è (–ª–æ–≥–∏–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∞)
    const allowedFields = [
      'title', 'description', 'price', 'discount_price', 'image_url',
      'subcategory', 'menu_category_id', 'preparation_time', 'options_groups',
      'dish_info', 'product_info', 'tags', 'is_active', 'is_available',
      'sort_order'
    ];

    allowedFields.forEach(field => {
      if (updateData[field] !== undefined) {
        product[field] = updateData[field];
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏–∑–º–µ–Ω–∏–ª (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    product.last_updated_by = user._id;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    if (updateData.subcategory) {
      await product.validateCategory();
    }

    await product.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
    await partner.updateProductStats();

    console.log('‚úÖ PRODUCT UPDATED:', {
      partner_category: partner.category,
      has_options: product.options_groups.length > 0,
      warnings_count: validationWarnings.length
    });

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω",
      product: product,
      business_rules: {
        partner_category: partner.category,
        supports_options: partner.category === 'restaurant',
        options_groups_count: product.options_groups.length
      },
      warnings: validationWarnings.length > 0 ? validationWarnings : undefined
    });

  } catch (error) {
    console.error('Update product error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
    });
  }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê
 * DELETE /api/partners/menu/products/:product_id
 */
export const deleteProduct = async (req, res) => {
  try {
    const { user } = req;
    const { product_id } = req.params;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π —ç—Ç–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
    const product = await Product.findOneAndDelete({ 
      _id: product_id, 
      partner_id: partner._id 
    });

    if (!product) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await partner.updateProductStats();

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω",
      deleted_product: {
        id: product._id,
        title: product.title,
        category: product.subcategory
      }
    });

  } catch (error) {
    console.error('Delete product error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
    });
  }
};

// ================ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–ù–Æ ================

/**
 * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ú–ï–ù–Æ
 * GET /api/partners/menu/stats
 */
export const getMenuStats = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await partner.updateProductStats();

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const allProducts = await Product.findByPartner(partner._id, true);
    const activeProducts = allProducts.filter(p => p.is_active && p.is_available);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats = partner.menu_categories.map(category => {
      const categoryProducts = allProducts.filter(p => p.subcategory === category.slug);
      const activeCategoryProducts = categoryProducts.filter(p => p.is_active && p.is_available);
      
      return {
        category: {
          id: category._id,
          name: category.name,
          slug: category.slug
        },
        products_count: {
          total: categoryProducts.length,
          active: activeCategoryProducts.length,
          inactive: categoryProducts.length - activeCategoryProducts.length
        },
        avg_price: categoryProducts.length > 0 
          ? (categoryProducts.reduce((sum, p) => sum + p.final_price, 0) / categoryProducts.length).toFixed(2)
          : 0,
        has_discounts: categoryProducts.some(p => p.discount_price > 0)
      };
    });

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = {
      overview: {
        total_categories: partner.menu_categories.length,
        total_products: allProducts.length,
        active_products: activeProducts.length,
        inactive_products: allProducts.length - activeProducts.length
      },
      pricing: {
        avg_price: activeProducts.length > 0 
          ? (activeProducts.reduce((sum, p) => sum + p.final_price, 0) / activeProducts.length).toFixed(2)
          : 0,
        min_price: activeProducts.length > 0 
          ? Math.min(...activeProducts.map(p => p.final_price)).toFixed(2)
          : 0,
        max_price: activeProducts.length > 0 
          ? Math.max(...activeProducts.map(p => p.final_price)).toFixed(2)
          : 0,
        products_with_discounts: allProducts.filter(p => p.discount_price > 0).length
      },
      categories: categoryStats,
      last_updated: new Date()
    };

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∞",
      stats: stats,
      business_info: {
        business_name: partner.business_name,
        category: partner.category
      }
    });

  } catch (error) {
    console.error('Get menu stats error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    });
  }
};

// ================ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ================
export default {
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
  getMenuCategories,
  addMenuCategory,
  updateMenuCategory,
  deleteMenuCategory,
  
  // –ü—Ä–æ–¥—É–∫—Ç—ã
  getProducts,
  addProduct,
  updateProduct,
  deleteProduct,
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getMenuStats
};