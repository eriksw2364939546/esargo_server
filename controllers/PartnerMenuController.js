// controllers/PartnerMenuController.js - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ –ò –ü–†–û–î–£–ö–¢–ê–ú–ò üçΩÔ∏è
import { PartnerProfile, Product } from '../models/index.js';

// ================ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò –ú–ï–ù–Æ ================

/**
 * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô –ú–ï–ù–Æ –ü–ê–†–¢–ù–ï–†–ê
 * GET /api/partners/menu/categories
 */
export const getMenuCategories = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await partner.updateProductStats();

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω—ã",
      categories: partner.menu_categories,
      total_categories: partner.menu_categories.length,
      business_info: {
        business_name: partner.business_name,
        category: partner.category
      }
    });

  } catch (error) {
    console.error('Get menu categories error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é"
    });
  }
};

/**
 * ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–ù–Æ
 * POST /api/partners/menu/categories
 */
export const addMenuCategory = async (req, res) => {
  try {
    const { user } = req;
    const { name, description, image_url, sort_order } = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || name.trim().length === 0) {
      return res.status(400).json({
        result: false,
        message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
      });
    }

    if (name.length > 50) {
      return res.status(400).json({
        result: false,
        message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    await partner.addMenuCategory({
      name: name.trim(),
      description: description?.trim() || '',
      image_url: image_url || '',
      sort_order: sort_order || partner.menu_categories.length
    });

    res.status(201).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∞",
      category: partner.menu_categories[partner.menu_categories.length - 1],
      total_categories: partner.menu_categories.length
    });

  } catch (error) {
    console.error('Add menu category error:', error);
    
    if (error.message === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') {
      return res.status(400).json({
        result: false,
        message: error.message
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    });
  }
};

/**
 * ‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–ù–Æ
 * PUT /api/partners/menu/categories/:category_id
 */
export const updateMenuCategory = async (req, res) => {
  try {
    const { user } = req;
    const { category_id } = req.params;
    const { name, description, image_url, sort_order, is_active } = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    await partner.updateMenuCategory(category_id, {
      name: name?.trim(),
      description: description?.trim(),
      image_url,
      sort_order,
      is_active
    });

    const updatedCategory = partner.menu_categories.id(category_id);

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      category: updatedCategory
    });

  } catch (error) {
    console.error('Update menu category error:', error);
    
    if (error.message === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞') {
      return res.status(404).json({
        result: false,
        message: error.message
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    });
  }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–ù–Æ
 * DELETE /api/partners/menu/categories/:category_id
 */
export const deleteMenuCategory = async (req, res) => {
  try {
    const { user } = req;
    const { category_id } = req.params;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = partner.menu_categories.id(category_id);
    if (!category) {
      return res.status(404).json({
        result: false,
        message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    const productsInCategory = await Product.countDocuments({
      partner_id: partner._id,
      subcategory: category.slug
    });

    if (productsInCategory > 0) {
      return res.status(400).json({
        result: false,
        message: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í –Ω–µ–π ${productsInCategory} —Ç–æ–≤–∞—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã.`
      });
    }

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await partner.removeMenuCategory(category_id);

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞",
      remaining_categories: partner.menu_categories.length
    });

  } catch (error) {
    console.error('Delete menu category error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    });
  }
};

// ================ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê–ú–ò/–ë–õ–Æ–î–ê–ú–ò ================

/**
 * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í –ü–ê–†–¢–ù–ï–†–ê
 * GET /api/partners/menu/products
 */
export const getProducts = async (req, res) => {
  try {
    const { user } = req;
    const { category_slug, include_inactive } = req.query;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    let products;
    if (category_slug) {
      // –ü—Ä–æ–¥—É–∫—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      products = await Product.findByPartnerCategory(
        partner._id, 
        category_slug, 
        include_inactive === 'true'
      );
    } else {
      // –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      products = await Product.findByPartner(
        partner._id, 
        include_inactive === 'true'
      );
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const productsByCategory = {};
    partner.menu_categories.forEach(category => {
      productsByCategory[category.slug] = {
        category_info: category,
        products: products.filter(p => p.subcategory === category.slug)
      };
    });

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã",
      products_by_category: productsByCategory,
      total_products: products.length,
      business_info: {
        business_name: partner.business_name,
        category: partner.category
      }
    });

  } catch (error) {
    console.error('Get products error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    });
  }
};

/**
 * ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ü–†–û–î–£–ö–¢–ê/–ë–õ–Æ–î–ê
 * POST /api/partners/menu/products
 */
export const addProduct = async (req, res) => {
  try {
    const { user } = req;
    const {
      title,
      description,
      price,
      discount_price,
      image_url,
      subcategory, // slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
      preparation_time,
      options_groups,
      dish_info,
      product_info,
      tags
    } = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = { title, price, subcategory };
    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      return res.status(400).json({
        result: false,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
      });
    }

    if (price <= 0) {
      return res.status(400).json({
        result: false,
        message: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = partner.menu_categories.find(cat => cat.slug === subcategory);
    if (!category) {
      return res.status(400).json({
        result: false,
        message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    const newProduct = new Product({
      partner_id: partner._id,
      title: title.trim(),
      description: description?.trim() || '',
      price: parseFloat(price),
      discount_price: discount_price ? parseFloat(discount_price) : null,
      image_url: image_url || '',
      category: partner.category, // restaurant/store
      subcategory: subcategory,
      menu_category_id: category._id,
      preparation_time: preparation_time || (partner.category === 'restaurant' ? 15 : 0),
      options_groups: options_groups || [],
      dish_info: dish_info || {},
      product_info: product_info || {},
      tags: tags || [],
      last_updated_by: user._id
    });

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await newProduct.validateCategory();
    
    await newProduct.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await partner.updateProductStats();

    res.status(201).json({
      result: true,
      message: "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
      product: newProduct,
      category_info: {
        name: category.name,
        slug: category.slug
      }
    });

  } catch (error) {
    console.error('Add product error:', error);
    
    if (error.message.includes('–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')) {
      return res.status(400).json({
        result: false,
        message: error.message
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
    });
  }
};

/**
 * ‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê
 * PUT /api/partners/menu/products/:product_id
 */
export const updateProduct = async (req, res) => {
  try {
    const { user } = req;
    const { product_id } = req.params;
    const updateData = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const product = await Product.findOne({
      _id: product_id,
      partner_id: partner._id
    });

    if (!product) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (updateData.subcategory && updateData.subcategory !== product.subcategory) {
      const category = partner.menu_categories.find(cat => cat.slug === updateData.subcategory);
      if (!category) {
        return res.status(400).json({
          result: false,
          message: "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        });
      }
      updateData.menu_category_id = category._id;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
    Object.assign(product, {
      ...updateData,
      last_updated_by: user._id
    });

    await product.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –º–µ–Ω—è–ª–∞—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if (updateData.subcategory) {
      await partner.updateProductStats();
    }

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω",
      product: product
    });

  } catch (error) {
    console.error('Update product error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
    });
  }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê
 * DELETE /api/partners/menu/products/:product_id
 */
export const deleteProduct = async (req, res) => {
  try {
    const { user } = req;
    const { product_id } = req.params;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    const product = await Product.findOneAndDelete({
      _id: product_id,
      partner_id: partner._id
    });

    if (!product) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await partner.updateProductStats();

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω",
      deleted_product: {
        id: product._id,
        title: product.title,
        category: product.subcategory
      }
    });

  } catch (error) {
    console.error('Delete product error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
    });
  }
};

// ================ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

/**
 * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–ù–Æ
 * GET /api/partners/menu/stats
 */
export const getMenuStats = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const partner = await PartnerProfile.findOne({ user_id: user._id });
    
    if (!partner) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await partner.updateProductStats();

    const categoryStats = await Promise.all(
      partner.menu_categories.map(async (category) => {
        const totalProducts = await Product.countDocuments({
          partner_id: partner._id,
          subcategory: category.slug
        });
        
        const activeProducts = await Product.countDocuments({
          partner_id: partner._id,
          subcategory: category.slug,
          is_active: true,
          is_available: true
        });

        return {
          category_name: category.name,
          category_slug: category.slug,
          total_products: totalProducts,
          active_products: activeProducts,
          inactive_products: totalProducts - activeProducts
        };
      })
    );

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∞",
      overall_stats: {
        total_categories: partner.stats.total_categories,
        total_products: partner.stats.total_products,
        active_products: partner.stats.active_products,
        content_ready: partner.isContentReady()
      },
      category_stats: categoryStats
    });

  } catch (error) {
    console.error('Get menu stats error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    });
  }
};