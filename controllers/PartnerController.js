// ================ controllers/PartnerController.js (–ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ================
import { createPartnerAccount, loginPartner, checkPartnerExists } from '../services/Partner/partner.auth.service.js';
import * as partnerService from '../services/Partner/partner.service.js';

/**
 * –≠–¢–ê–ü 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const registerPartner = async (req, res) => {
    try {
        const partnerData = req.body;
        
        console.log('üîç REGISTER PARTNER - Start:', {
            email: partnerData.email,
            business_name: partnerData.business_name,
            brand_name: partnerData.brand_name, // üÜï –ù–û–í–û–ï –ü–û–õ–ï
            category: partnerData.category
        });

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ–¥ —Å–∫—Ä–∏–Ω 1
        const requiredFields = [
            // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
            'first_name', 'last_name', 'email', 'password', 'confirm_password', 'phone',
            
            // –ë–∏–∑–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
            'address', 'business_name', 'brand_name', 'category',
            
            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ location)
            'latitude', 'longitude',
            
            // WhatsApp —Å–æ–≥–ª–∞—Å–∏–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
            'whatsapp_consent'
        ];

        const missingFields = requiredFields.filter(field => !partnerData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ —Å–∫—Ä–∏–Ω—É 1: ${missingFields.join(', ')}`
            });
        }

        // ‚úÖ –ù–û–í–ê–Ø —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const frenchPhoneRegex = /^(\+33|0)[1-9](\d{8})$/;
        const cleanPhone = partnerData.phone.replace(/\s/g, '');
        if (!frenchPhoneRegex.test(cleanPhone)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                examples: ["+33 1 42 34 56 78", "01 42 34 56 78"]
            });
        }

        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ location)
        const latitude = parseFloat(partnerData.latitude);
        const longitude = parseFloat(partnerData.longitude);
        
        if (isNaN(latitude) || isNaN(longitude) || latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (latitude: -90 –¥–æ 90, longitude: -180 –¥–æ 180)"
            });
        }

        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è WhatsApp —Å–æ–≥–ª–∞—Å–∏—è
        if (typeof partnerData.whatsapp_consent !== 'boolean') {
            return res.status(400).json({
                result: false,
                message: "WhatsApp —Å–æ–≥–ª–∞—Å–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true –∏–ª–∏ false"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        if (partnerData.password !== partnerData.confirm_password) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        if (!['restaurant', 'store'].includes(partnerData.category)) {
            return res.status(400).json({
                result: false,
                message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        const exists = await checkPartnerExists(partnerData.email);
        
        if (exists) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            });
        }

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç location –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        partnerData.location = {
            latitude: latitude,
            longitude: longitude
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        partnerData.registration_ip = req.ip;
        partnerData.user_agent = req.get('User-Agent');

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï (–Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        const result = await createPartnerAccount(partnerData);

        if (!result.isNewPartner) {
            return res.status(400).json({
                result: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            });
        }

        console.log('‚úÖ REGISTER PARTNER - Success with token');

        // ‚úÖ –û–¢–í–ï–¢ –û–ë–ù–û–í–õ–ï–ù: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        res.status(201).json({
            result: true,
            message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            token: result.token,
            user: {
                id: result.partner.id,
                email: result.partner.email,
                role: result.partner.role
            },
            business: {
                id: result.partner.request._id,
                business_name: result.partner.request.business_data.business_name,
                brand_name: partnerData.brand_name, // üÜï –ù–û–í–û–ï –ü–û–õ–ï –≤ –æ—Ç–≤–µ—Ç–µ
                category: result.partner.request.business_data.category,
                status: result.partner.request.status,
                has_floor_unit: !!partnerData.floor_unit, // üÜï –ù–û–í–û–ï –ü–û–õ–ï
                whatsapp_consent: partnerData.whatsapp_consent // üÜï –ù–û–í–û–ï –ü–û–õ–ï
            },
            next_step: {
                action: "wait_for_admin_approval",
                description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                current_status: "pending",
                available_endpoints: {
                    verify_token: "GET /api/partners/verify",
                    dashboard: "GET /api/partners/dashboard"
                }
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    }
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ä–≤–∏—Å
 */
const loginPartnerController = async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log('üîç LOGIN PARTNER - Start:', { email });

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const { token, partner } = await loginPartner({ email, password });

        console.log('‚úÖ LOGIN PARTNER - Success');

        res.status(200).json({
            result: true,
            message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            token,
            partner
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        res.status(error.statusCode || 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        });
    }
};

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
const verifyPartner = async (req, res) => {
    try {
        const { partner } = req;

        if (!partner) {
            return res.status(404).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!"
            });
        }

        console.log('üîç VERIFY PARTNER - Start:', {
            partner_id: partner._id,
            role: partner.role
        });

        // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        res.status(200).json({
            result: true,
            message: "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
            partner: {
                id: partner._id,
                role: partner.role,
                is_active: partner.is_active,
                is_email_verified: partner.is_email_verified,
                last_login: partner.last_login_at,
                registration_date: partner.createdAt
            },
            token_info: {
                valid: true,
                type: "access_token",
                expires_in: "30d"
            },
            next_steps: {
                dashboard: "GET /api/partners/dashboard",
                profile: "GET /api/partners/profile"
            }
        });

        console.log('‚úÖ VERIFY PARTNER - Success');

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞",
            error: error.message
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
 */
const getDashboardStatus = async (req, res) => {
    try {
        const { partner } = req;

        console.log('üîç GET DASHBOARD STATUS - Start:', {
            partner_id: partner._id
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        const partnerRequest = await partnerService.getPartnerRequest(partner._id);
        const partnerProfile = await partnerService.getPartnerProfile(partner._id);
        const legalInfo = await partnerService.getPartnerLegalInfo(partner._id);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const dashboard = {
            user: {
                id: partner._id,
                role: partner.role,
                is_active: partner.is_active,
                is_email_verified: partner.is_email_verified,
                registration_date: partner.createdAt
            },
            workflow: {
                current_stage: partnerRequest ? partnerRequest.workflow_stage : 0,
                status: partnerRequest ? partnerRequest.status : 'not_found',
                business_name: partnerRequest ? partnerRequest.business_data.business_name : null
            },
            permissions: {
                can_submit_legal: partnerRequest && partnerRequest.status === 'approved',
                can_create_profile: legalInfo && legalInfo.status === 'approved',
                can_manage_content: partnerProfile && partnerProfile.is_published
            },
            content_status: {
                has_request: !!partnerRequest,
                has_legal: !!legalInfo,
                has_profile: !!partnerProfile,
                is_published: partnerProfile ? partnerProfile.is_published : false
            }
        };

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        dashboard.next_actions = getNextActions(partnerRequest, legalInfo, partnerProfile);

        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞",
            dashboard: dashboard
        });

        console.log('‚úÖ GET DASHBOARD STATUS - Success:', {
            workflow_stage: dashboard.workflow.current_stage,
            status: dashboard.workflow.status,
            has_request: dashboard.content_status.has_request
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD STATUS - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞",
            error: error.message
        });
    }
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
const getNextActions = (request, legal, profile) => {
    const actions = [];

    if (!request) {
        actions.push({
            action: "submit_request",
            description: "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            status: "required",
            endpoint: "POST /api/partners/register"
        });
    } else if (request.status === 'pending') {
        actions.push({
            action: "wait_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            status: "waiting",
            estimated_time: "1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è"
        });
    } else if (request.status === 'approved' && !legal) {
        actions.push({
            action: "submit_legal",
            description: "–ü–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            status: "available",
            endpoint: `POST /api/partners/legal-info/${request._id}`
        });
    } else if (legal && legal.status === 'pending') {
        actions.push({
            action: "wait_legal_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            status: "waiting",
            estimated_time: "2-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
        });
    } else if (legal && legal.status === 'approved' && !profile) {
        actions.push({
            action: "create_profile",
            description: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "available",
            endpoint: "POST /api/partners/profile"
        });
    } else if (profile && !profile.is_published) {
        actions.push({
            action: "wait_publication",
            description: "–û–∂–∏–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            status: "waiting",
            estimated_time: "1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è"
        });
    } else if (profile && profile.is_published) {
        actions.push({
            action: "manage_content",
            description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "active",
            endpoints: {
                update_profile: `PUT /api/partners/profile/${profile._id}`,
                manage_products: "GET /api/partners/products",
                view_orders: "GET /api/partners/orders"
            }
        });
    }

    return actions;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
 */
const getProfile = async (req, res) => {
    try {
        const { partner } = req;
        
        res.status(200).json({
            result: true,
            message: "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            partner_id: partner._id
        });
        
    } catch (error) {
        console.error('üö® GET PROFILE - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
            error: error.message
        });
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
 */
const updateProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;
        
        res.status(200).json({
            result: true,
            message: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            partner_id: partner._id,
            profile_id: id
        });
        
    } catch (error) {
        console.error('üö® UPDATE PROFILE - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
            error: error.message
        });
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
 */
const deletePartner = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;
        
        res.status(200).json({
            result: true,
            message: "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            partner_id: partner._id,
            target_id: id
        });
        
    } catch (error) {
        console.error('üö® DELETE PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    }
};

/**
 * –ü–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
 */
const submitLegalInfo = async (req, res) => {
    try {
        const { partner } = req;
        const { request_id } = req.params;
        
        res.status(200).json({
            result: true,
            message: "–ü–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            partner_id: partner._id,
            request_id: request_id
        });
        
    } catch (error) {
        console.error('üö® SUBMIT LEGAL INFO - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getDashboardStatus,
    getProfile,
    updateProfile,
    deletePartner,
    submitLegalInfo
};