// controllers/PartnerController.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–¢–†–û–ì–û –ü–û –ê–†–•–ò–¢–ï–ö–¢–£–†–ï
import { createPartnerAccount, loginPartner, checkPartnerExists } from '../services/Partner/partner.auth.service.js';
import * as partnerService from '../services/Partner/partner.service.js';
import { submitPartnerLegalInfo } from '../services/Partner/partner.legal.service.js';

/**
 * ================== –ö–û–ù–¢–†–û–õ–õ–ï–†–´ –†–ê–ë–û–¢–ê–Æ–¢ –¢–û–õ–¨–ö–û –° REQ/RES ==================
 */

/**
 * üè™ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * POST /api/partners/register
 */
const registerPartner = async (req, res) => {
    try {
        console.log('üîç REGISTER PARTNER - Start:', {
            body_keys: Object.keys(req.body)
        });

        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const {
            first_name, last_name, email, password, phone,
            business_name, brand_name, category, address, floor_unit,
            latitude, longitude, whatsapp_consent
        } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!first_name || !last_name || !email || !password || !phone || 
            !business_name || !category || !address) {
            return res.status(400).json({
                result: false,
                message: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: first_name, last_name, email, password, phone, business_name, category, address"
            });
        }

        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Ä–≤–∏—Å
        const result = await createPartnerAccount({
            first_name,
            last_name,
            email,
            password,
            phone,
            business_name,
            brand_name,
            category,
            address,
            floor_unit,
            location: latitude && longitude ? { lat: latitude, lng: longitude } : null,
            whatsapp_consent
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(201).json({
            result: true,
            message: "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
            token: result.token,
            user: result.user,
            data: {
                user_id: result.user.id,
                request_id: result.request._id,
                next_step: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        
        const statusCode = error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') ? 409 :
                          error.message.includes('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è') ? 400 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞'
        });
    }
};

/**
 * üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * POST /api/partners/login
 */
const loginPartnerController = async (req, res) => {
    try {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Ä–≤–∏—Å
        const result = await loginPartner(email, password);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(200).json({
            result: true,
            message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
            ...result
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        
        const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                          error.message.includes('–Ω–µ–≤–µ—Ä–Ω—ã–π') ? 401 :
                          error.message.includes('–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω') ? 403 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
        });
    }
};

/**
 * üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê
 * GET /api/partners/verify
 */
const verifyPartner = async (req, res) => {
    try {
        // –î–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã middleware
        const { partner } = req;

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(200).json({
            result: true,
            message: "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω",
            partner: {
                id: partner._id,
                role: partner.role,
                is_active: partner.is_active,
                is_email_verified: partner.is_email_verified
            }
        });

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"
        });
    }
};

/**
 * üìä –°–¢–ê–¢–£–° –î–ê–®–ë–û–†–î–ê
 * GET /api/partners/dashboard
 */
const getDashboardStatus = async (req, res) => {
    try {
        // –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã middleware
        const { partner } = req;

        // –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å
        const dashboardData = await partnerService.getDashboardWorkflow(partner._id);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω",
            ...dashboardData
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞"
        });
    }
};

/**
 * üë§ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
 * GET /api/partners/profile
 */
const getProfile = async (req, res) => {
    try {
        // –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã middleware
        const { partner, partnerProfile } = req;

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω",
            profile: partnerProfile,
            user: {
                id: partner._id,
                role: partner.role,
                is_active: partner.is_active
            }
        });

    } catch (error) {
        console.error('üö® GET PROFILE - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * üìù –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
 * PUT /api/partners/profile/:id
 */
const updateProfile = async (req, res) => {
    try {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const { id } = req.params;
        const updateData = req.body;
        const { partner } = req;

        // –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å
        const updatedProfile = await partnerService.updatePartnerProfile(id, updateData, partner._id);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
            profile: updatedProfile
        });

    } catch (error) {
        console.error('üö® UPDATE PROFILE - Error:', error);
        
        const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                          error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–ê–†–¢–ù–ï–†–ê
 * DELETE /api/partners/profile/:id
 */
const deletePartner = async (req, res) => {
    try {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const { id } = req.params;
        const { partner } = req;

        // –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å
        const result = await partnerService.deletePartnerAccount(id, partner._id);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(200).json({
            result: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä —É–¥–∞–ª–µ–Ω",
            ...result
        });

    } catch (error) {
        console.error('üö® DELETE PARTNER - Error:', error);
        
        const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        });
    }
};

/**
 * üìã –ü–û–î–ê–ß–ê –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í
 * POST /api/partners/legal-info/:request_id
 */
const submitLegalInfo = async (req, res) => {
    try {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const { request_id } = req.params;
        const legalData = req.body;
        const { partner } = req;

        // –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å
        const result = await submitPartnerLegalInfo(partner._id, request_id, legalData);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(201).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ",
            legal_info_id: result.legal_info_id,
            verification_status: result.verification_status,
            workflow_stage: result.workflow_stage,
            next_step: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        });

    } catch (error) {
        console.error('üö® SUBMIT LEGAL INFO - Error:', error);
        
        const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                          error.message.includes('—É–∂–µ –ø–æ–¥–∞–Ω') ? 409 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        });
    }
};

// ================ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ================

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getDashboardStatus,
    getProfile,
    updateProfile,
    deletePartner,
    submitLegalInfo
};