// ================ controllers/PartnerController.js (–ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ================
import { createPartnerAccount, loginPartner, checkPartnerExists } from '../services/Partner/partner.auth.service.js';
import * as partnerService from '../services/Partner/partner.service.js';
import { PartnerLegalInfo } from '../models/index.js';
import { cryptoString } from '../utils/crypto.js';
import mongoose from 'mongoose';

/**
 * –≠–¢–ê–ü 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –∏–∑ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ InitialPartnerRequest
 */
const registerPartner = async (req, res) => {
    try {
        const partnerData = req.body;
        
        console.log('üîç REGISTER PARTNER - Start:', {
            email: partnerData.email,
            business_name: partnerData.business_name,
            brand_name: partnerData.brand_name, // üÜï –ù–û–í–û–ï –ü–û–õ–ï
            category: partnerData.category,
            has_floor_unit: !!partnerData.floor_unit // üÜï –ù–û–í–û–ï –ü–û–õ–ï
        });

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—Ç–æ—á–Ω–æ –ø–æ –º–æ–¥–µ–ª–∏ InitialPartnerRequest)
        const requiredFields = [
            // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (personal_data)
            'first_name', 'last_name', 'email', 'password', 'confirm_password', 'phone',
            
            // –ë–∏–∑–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ (business_data) 
            'address', 'business_name', 'brand_name', 'category',
            
            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–ª—è location)
            'latitude', 'longitude',
            
            // WhatsApp —Å–æ–≥–ª–∞—Å–∏–µ (marketing_consent.whatsapp_consent)
            'whatsapp_consent'
        ];

        const missingFields = requiredFields.filter(field => !partnerData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –º–æ–¥–µ–ª–∏ InitialPartnerRequest: ${missingFields.join(', ')}`
            });
        }

        // ‚úÖ –ù–û–í–ê–Ø —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª–∏)
        const frenchPhoneRegex = /^(\+33|0)[1-9](\d{8})$/;
        const cleanPhone = partnerData.phone.replace(/\s/g, '');
        if (!frenchPhoneRegex.test(cleanPhone)) {
            return res.status(400).json({
                result: false,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç",
                expected_format: "+33 1 42 34 56 78 –∏–ª–∏ 01 42 34 56 78"
            });
        }

        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–ª—è –ø–æ–ª—è location –≤ –º–æ–¥–µ–ª–∏)
        const latitude = parseFloat(partnerData.latitude);
        const longitude = parseFloat(partnerData.longitude);
        
        if (isNaN(latitude) || isNaN(longitude) || 
            latitude < -90 || latitude > 90 || 
            longitude < -180 || longitude > 180) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (latitude: -90 –¥–æ 90, longitude: -180 –¥–æ 180)"
            });
        }

        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è WhatsApp —Å–æ–≥–ª–∞—Å–∏—è (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç marketing_consent.whatsapp_consent)
        if (typeof partnerData.whatsapp_consent !== 'boolean') {
            return res.status(400).json({
                result: false,
                message: "whatsapp_consent –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true –∏–ª–∏ false"
            });
        }

        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è brand_name (–Ω–æ–≤–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        if (!partnerData.brand_name || partnerData.brand_name.trim().length === 0) {
            return res.status(400).json({
                result: false,
                message: "brand_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –º–æ–¥–µ–ª–∏"
            });
        }

        // floor_unit –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
        if (partnerData.floor_unit && typeof partnerData.floor_unit !== 'string') {
            return res.status(400).json({
                result: false,
                message: "floor_unit –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
            });
        }

        // ===== –í–°–Ø –û–°–¢–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ù–ï –¢–†–û–ù–£–¢–ê =====
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        if (partnerData.password !== partnerData.confirm_password) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        if (!['restaurant', 'store'].includes(partnerData.category)) {
            return res.status(400).json({
                result: false,
                message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        const exists = await checkPartnerExists(partnerData.email);
        
        if (exists) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            });
        }

        // ‚úÖ –§–û–†–ú–ò–†–£–ï–ú location –æ–±—ä–µ–∫—Ç –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º)
        partnerData.location = {
            latitude: latitude,
            longitude: longitude
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        partnerData.registration_ip = req.ip;
        partnerData.user_agent = req.get('User-Agent');

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï (–Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞)
        const result = await createPartnerAccount(partnerData);

        if (!result.isNewPartner) {
            return res.status(400).json({
                result: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            });
        }

        console.log('‚úÖ REGISTER PARTNER - Success with new fields');

        // ‚úÖ –û–¢–í–ï–¢ –û–ë–ù–û–í–õ–ï–ù: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ –º–æ–¥–µ–ª–∏
        res.status(201).json({
            result: true,
            message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            token: result.token,
            user: {
                id: result.partner.id,
                email: result.partner.email,
                role: result.partner.role
            },
            business: {
                id: result.partner.request._id,
                business_name: result.partner.request.business_data.business_name,
                brand_name: partnerData.brand_name, // üÜï –ù–û–í–û–ï –ü–û–õ–ï
                category: result.partner.request.business_data.category,
                status: result.partner.request.status,
                floor_unit: partnerData.floor_unit || null, // üÜï –ù–û–í–û–ï –ü–û–õ–ï
                whatsapp_consent: partnerData.whatsapp_consent, // üÜï –ù–û–í–û–ï –ü–û–õ–ï
                coordinates: {
                    latitude: latitude,
                    longitude: longitude
                }
            },
            next_step: {
                action: "wait_for_admin_approval",
                description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                current_status: "pending",
                available_endpoints: {
                    verify_token: "GET /api/partners/verify",
                    dashboard: "GET /api/partners/dashboard"
                }
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    }
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ä–≤–∏—Å
 */
const loginPartnerController = async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log('üîç LOGIN PARTNER - Start:', { email });

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const { token, partner } = await loginPartner({ email, password });

        console.log('‚úÖ LOGIN PARTNER - Success');

        res.status(200).json({
            result: true,
            message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            token,
            partner
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        res.status(error.statusCode || 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        });
    }
};

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
const verifyPartner = async (req, res) => {
    try {
        const { partner } = req;

        if (!partner) {
            return res.status(404).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!"
            });
        }

        console.log('üîç VERIFY PARTNER - Start:', {
            partner_id: partner._id,
            role: partner.role
        });

        // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        res.status(200).json({
            result: true,
            message: "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
            partner: {
                id: partner._id,
                role: partner.role,
                is_active: partner.is_active,
                is_email_verified: partner.is_email_verified,
                last_login: partner.last_login_at,
                registration_date: partner.createdAt
            },
            token_info: {
                valid: true,
                type: "access_token",
                expires_in: "30d"
            },
            next_steps: {
                dashboard: "GET /api/partners/dashboard",
                profile: "GET /api/partners/profile"
            }
        });

        console.log('‚úÖ VERIFY PARTNER - Success');

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞",
            error: error.message
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
 */
const getDashboardStatus = async (req, res) => {
    try {
        const { partner } = req;

        console.log('üîç GET DASHBOARD STATUS - Start:', {
            partner_id: partner._id
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        const partnerRequest = await partnerService.getPartnerRequest(partner._id);
        const partnerProfile = await partnerService.getPartnerProfile(partner._id);
        const legalInfo = await partnerService.getPartnerLegalInfo(partner._id);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const dashboard = {
            user: {
                id: partner._id,
                role: partner.role,
                is_active: partner.is_active,
                is_email_verified: partner.is_email_verified,
                registration_date: partner.createdAt
            },
            workflow: {
                current_stage: partnerRequest ? partnerRequest.workflow_stage : 0,
                status: partnerRequest ? partnerRequest.status : 'not_found',
                business_name: partnerRequest ? partnerRequest.business_data.business_name : null
            },
            permissions: {
                can_submit_legal: partnerRequest && partnerRequest.status === 'approved',
                can_create_profile: legalInfo && legalInfo.status === 'approved',
                can_manage_content: partnerProfile && partnerProfile.is_published
            },
            content_status: {
                has_request: !!partnerRequest,
                has_legal: !!legalInfo,
                has_profile: !!partnerProfile,
                is_published: partnerProfile ? partnerProfile.is_published : false
            }
        };

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        dashboard.next_actions = getNextActions(partnerRequest, legalInfo, partnerProfile);

        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞",
            dashboard: dashboard
        });

        console.log('‚úÖ GET DASHBOARD STATUS - Success:', {
            workflow_stage: dashboard.workflow.current_stage,
            status: dashboard.workflow.status,
            has_request: dashboard.content_status.has_request
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD STATUS - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞",
            error: error.message
        });
    }
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
const getNextActions = (request, legal, profile) => {
    const actions = [];

    if (!request) {
        actions.push({
            action: "submit_request",
            description: "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            status: "required",
            endpoint: "POST /api/partners/register"
        });
    } else if (request.status === 'pending') {
        actions.push({
            action: "wait_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            status: "waiting",
            estimated_time: "1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è"
        });
    } else if (request.status === 'approved' && !legal) {
        actions.push({
            action: "submit_legal",
            description: "–ü–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            status: "available",
            endpoint: `POST /api/partners/legal-info/${request._id}`
        });
    } else if (legal && legal.status === 'pending') {
        actions.push({
            action: "wait_legal_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            status: "waiting",
            estimated_time: "2-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
        });
    } else if (legal && legal.status === 'approved' && !profile) {
        actions.push({
            action: "create_profile",
            description: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "available",
            endpoint: "POST /api/partners/profile"
        });
    } else if (profile && !profile.is_published) {
        actions.push({
            action: "wait_publication",
            description: "–û–∂–∏–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            status: "waiting",
            estimated_time: "1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è"
        });
    } else if (profile && profile.is_published) {
        actions.push({
            action: "manage_content",
            description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "active",
            endpoints: {
                update_profile: `PUT /api/partners/profile/${profile._id}`,
                manage_products: "GET /api/partners/products",
                view_orders: "GET /api/partners/orders"
            }
        });
    }

    return actions;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const getProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç GET PROFILE - Start:', {
            partner_id: partner._id,
            requested_id: id
        });

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
        const targetPartnerId = id || partner._id;

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const profileData = await partnerService.getPartnerFullInfo(targetPartnerId);

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω",
            partner: profileData.partner,
            profile: profileData.profile,
            request: profileData.request,
            legal_info: profileData.legalInfo,
            permissions: {
                can_edit: targetPartnerId === partner._id.toString(),
                can_delete: targetPartnerId === partner._id.toString()
            }
        });
        
    } catch (error) {
        console.error('üö® GET PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏
 */
const updateProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;
        const updateData = req.body;

        console.log('üîç UPDATE PROFILE - Start:', {
            partner_id: partner._id,
            target_id: id,
            update_fields: Object.keys(updateData)
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å)
        if (id !== partner._id.toString()) {
            return res.status(403).json({
                result: false,
                message: "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
            });
        }

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const updatedProfile = await partnerService.updatePartnerProfile(partner._id, updateData);

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
            profile: updatedProfile,
            updated_fields: Object.keys(updateData)
        });
        
    } catch (error) {
        console.error('üö® UPDATE PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏
 */
const deletePartner = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç DELETE PARTNER - Start:', {
            partner_id: partner._id,
            target_id: id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç)
        if (id !== partner._id.toString()) {
            return res.status(403).json({
                result: false,
                message: "–ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç"
            });
        }

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const deleteResult = await partnerService.deletePartnerAccount(partner._id);

        res.status(200).json({
            result: true,
            message: "–ê–∫–∫–∞—É–Ω—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É–¥–∞–ª–µ–Ω",
            deleted_partner: deleteResult.deleted_partner,
            cleanup_info: deleteResult.cleanup_info
        });
        
    } catch (error) {
        console.error('üö® DELETE PARTNER - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        });
    }
};

/**
 * –ü–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * ‚úÖ –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏ PartnerLegalInfo
 */
const submitLegalInfo = async (req, res) => {
    try {
        const { partner } = req;
        const { request_id } = req.params;
        const legalData = req.body;

        console.log('üîç SUBMIT LEGAL INFO - Start:', {
            partner_id: partner._id,
            request_id: request_id,
            has_legal_name: !!legalData.legal_name,
            has_siret: !!legalData.siret_number,
            legal_form: legalData.legal_form
        });

        // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô (—Ç–æ—á–Ω–æ –ø–æ –º–æ–¥–µ–ª–∏ PartnerLegalInfo)
        const requiredFields = [
            // üè¢ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï (legal_data)
            'legal_name',           // "–ù–∞–∑–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"
            'siret_number',         // "SIRET –Ω–æ–º–µ—Ä"
            'legal_form',          // "–§–æ—Ä–º–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"
            'legal_address',       // "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å (si√®ge social)"
            'legal_representative', // "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —é—Ä. –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è"
            
            // üè¶ –ë–ê–ù–ö–û–í–°–ö–ò–ï –î–ê–ù–ù–´–ï (bank_details)
            'iban',                // "IBAN"
            'bic',                 // "BIC"
            
            // üìû –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï (legal_contact)
            'legal_email',         // "Email —é—Ä. –ª–∏—Ü–∞"
            'legal_phone'          // "–¢–µ–ª–µ—Ñ–æ–Ω —é—Ä. –ª–∏—Ü–∞"
        ];

        const missingFields = requiredFields.filter(field => !legalData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –º–æ–¥–µ–ª–∏ PartnerLegalInfo: ${missingFields.join(', ')}`
            });
        }

        // ‚úÖ –§–†–ê–ù–¶–£–ó–°–ö–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò

        // –í–∞–ª–∏–¥–∞—Ü–∏—è SIRET –Ω–æ–º–µ—Ä–∞ (14 —Ü–∏—Ñ—Ä)
        const cleanSiret = legalData.siret_number.replace(/\s/g, '');
        const siretRegex = /^\d{14}$/;
        if (!siretRegex.test(cleanSiret)) {
            return res.status(400).json({
                result: false,
                message: "SIRET –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 14 —Ü–∏—Ñ—Ä",
                example: "123 456 789 00014"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ IBAN
        const cleanIban = legalData.iban.replace(/\s/g, '');
        const frenchIbanRegex = /^FR\d{2}[A-Z0-9]{23}$/;
        if (!frenchIbanRegex.test(cleanIban)) {
            return res.status(400).json({
                result: false,
                message: "IBAN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
                example: "FR76 3000 6000 0112 3456 7890 189"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è TVA –Ω–æ–º–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (legalData.tva_number) {
            const cleanTva = legalData.tva_number.replace(/\s/g, '');
            const frenchTvaRegex = /^FR\d{11}$/;
            if (!frenchTvaRegex.test(cleanTva)) {
                return res.status(400).json({
                    result: false,
                    message: "TVA –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
                    example: "FR12 345678912"
                });
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
        const allowedLegalForms = [
            'Auto-entrepreneur', 'SASU', 'SARL', 'SAS', 'EURL', 
            'SA', 'SNC', 'SCI', 'SELARL', 'Micro-entreprise', 
            'EI', 'EIRL', 'Autre'
        ];
        
        if (!allowedLegalForms.includes(legalData.legal_form)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ñ–æ—Ä–º–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞",
                allowed_forms: allowedLegalForms
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —é—Ä. –ª–∏—Ü–∞
        const frenchPhoneRegex = /^(\+33|0)[1-9](\d{8})$/;
        const cleanLegalPhone = legalData.legal_phone.replace(/\s/g, '');
        if (!frenchPhoneRegex.test(cleanLegalPhone)) {
            return res.status(400).json({
                result: false,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω —é—Ä. –ª–∏—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º",
                example: "+33 1 42 34 56 78"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(legalData.legal_email)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email —é—Ä. –ª–∏—Ü–∞"
            });
        }

        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ó–ê–Ø–í–ö–£ –ü–ê–†–¢–ù–ï–†–ê
        if (!mongoose.Types.ObjectId.isValid(request_id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const partnerRequest = await InitialPartnerRequest.findOne({
            _id: request_id,
            user_id: partner._id
        });

        if (!partnerRequest) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        if (partnerRequest.status !== 'approved') {
            return res.status(400).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º",
                current_status: partnerRequest.status
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–¥–∞–Ω—ã –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        const existingLegal = await PartnerLegalInfo.findOne({
            user_id: partner._id,
            partner_request_id: request_id
        });

        if (existingLegal) {
            return res.status(400).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –ø–æ–¥–∞–Ω—ã",
                status: existingLegal.verification_status
            });
        }

        // ‚úÖ –°–û–ó–î–ê–ï–ú PartnerLegalInfo (—Ç–æ—á–Ω–æ –ø–æ –º–æ–¥–µ–ª–∏)
        const newLegalInfo = new PartnerLegalInfo({
            user_id: partner._id,
            partner_request_id: request_id,
            
            // üè¢ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏ legal_data)
            legal_data: {
                legal_name: cryptoString(legalData.legal_name),                    // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                siret_number: cryptoString(legalData.siret_number),                // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                legal_form: legalData.legal_form,                                  // ‚úÖ –û–¢–ö–†–´–¢–û
                tva_number: legalData.tva_number ? cryptoString(legalData.tva_number) : null, // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                legal_address: cryptoString(legalData.legal_address),              // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                legal_representative: cryptoString(legalData.legal_representative) // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
            },
            
            // üè¶ –ë–ê–ù–ö–û–í–°–ö–ò–ï –î–ê–ù–ù–´–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏ bank_details)
            bank_details: {
                iban: cryptoString(legalData.iban), // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                bic: cryptoString(legalData.bic)    // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
            },
            
            // üìû –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏ legal_contact)
            legal_contact: {
                email: cryptoString(legalData.legal_email), // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                phone: cryptoString(legalData.legal_phone)  // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
            },
            
            // üìÑ –°–¢–ê–¢–£–° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
            verification_status: 'pending',
            
            // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            validation_info: {
                siret_validated: siretRegex.test(cleanSiret),
                iban_validated: frenchIbanRegex.test(cleanIban),
                tva_status: legalData.tva_number ? 'pending' : 'not_applicable'
            },
            
            // üìÖ –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–ö–ò
            submitted_at: new Date(),
            updated_at: new Date()
        });

        await newLegalInfo.save();

        console.log('‚úÖ SUBMIT LEGAL INFO - Success:', {
            legal_info_id: newLegalInfo._id,
            verification_status: newLegalInfo.verification_status
        });

        // ‚úÖ –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢
        res.status(201).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω—ã",
            legal_info: {
                id: newLegalInfo._id,
                status: newLegalInfo.verification_status,
                legal_form: newLegalInfo.legal_data.legal_form,
                validation: {
                    siret_valid: newLegalInfo.validation_info.siret_validated,
                    iban_valid: newLegalInfo.validation_info.iban_validated,
                    tva_status: newLegalInfo.validation_info.tva_status
                }
            },
            next_step: {
                action: "wait_for_admin_verification",
                description: "–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                expected_time: "2-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
            }
        });

    } catch (error) {
        console.error('üö® SUBMIT LEGAL INFO - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getDashboardStatus,
    getProfile,
    updateProfile,
    deletePartner,
    submitLegalInfo
};