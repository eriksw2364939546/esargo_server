// controllers/PartnerController.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ù–¢–†–û–õ–õ–ï–† –ë–ï–ó –∏–º–ø–æ—Ä—Ç–∞
import { createPartnerAccount, loginPartner, checkPartnerExists } from '../services/Partner/partner.auth.service.js';
import * as partnerService from '../services/Partner/partner.service.js';
import { PartnerLegalInfo, InitialPartnerRequest } from '../models/index.js';
import { cryptoString, decryptString } from '../utils/crypto.js';
import mongoose from 'mongoose';

/**
 * üó∫Ô∏è –í–°–¢–†–û–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø
 * (–∫–æ–ø–∏—è –∏–∑ address.service.js –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º)
 */
const internalMockGeocode = (address) => {
  const addressLower = address.toLowerCase();
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const mockAddresses = {
    'vieux port marseille': { lat: 43.2951, lng: 5.3739, zone: 1 },
    'notre dame de la garde': { lat: 43.2842, lng: 5.3714, zone: 1 },
    'canebi√®re marseille': { lat: 43.2946, lng: 5.3758, zone: 1 },
    'rue de la r√©publique': { lat: 43.296482, lng: 5.36978, zone: 1 },
    'marseille': { lat: 43.296482, lng: 5.36978, zone: 1 },
    'ch√¢teau d\'if': { lat: 43.2799, lng: 5.3256, zone: 2 },
    'calanques marseille': { lat: 43.2109, lng: 5.4414, zone: 2 },
    'a√©roport marseille': { lat: 43.4393, lng: 5.2214, zone: 2 },
    'la joliette': { lat: 43.3067, lng: 5.3647, zone: 1 },
    'cours julien': { lat: 43.2929, lng: 5.3832, zone: 1 },
    'prado marseille': { lat: 43.2580, lng: 5.3927, zone: 1 },
    'castellane': { lat: 43.2884, lng: 5.3984, zone: 1 }
  };

  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const [mockAddr, coords] of Object.entries(mockAddresses)) {
    if (addressLower.includes(mockAddr) || mockAddr.includes(addressLower)) {
      return {
        success: true,
        coordinates: coords,
        formatted_address: address,
        zone: coords.zone
      };
    }
  }

  // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ mock –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–∞—Ä—Å–µ–ª—è
  const randomLat = 43.295 + (Math.random() - 0.5) * 0.02;
  const randomLng = 5.375 + (Math.random() - 0.5) * 0.02;
  
  return {
    success: true,
    coordinates: { lat: randomLat, lng: randomLng, zone: 1 },
    formatted_address: address,
    zone: 1,
    mock_warning: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
  };
};

/**
 * üè™ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * POST /api/partners/register
 */
const registerPartner = async (req, res) => {
    try {
        console.log('üîç REGISTER PARTNER - Start:', {
            body_keys: Object.keys(req.body),
            has_coordinates: !!(req.body.latitude && req.body.longitude)
        });

        const {
            first_name, last_name, email, password, phone,
            business_name, brand_name, category, address, floor_unit,
            latitude, longitude, whatsapp_consent
        } = req.body;

        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!first_name || !last_name || !email || !password || !phone || !business_name || !category || !address) {
            return res.status(400).json({
                result: false,
                message: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: first_name, last_name, email, password, phone, business_name, category, address"
            });
        }

        // ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const cleanPhone = phone.replace(/\D/g, '');

        // ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞
        const addressString = typeof address === 'object' ? 
            `${address.street || ''} ${address.number || ''}, ${address.city || ''} ${address.postal_code || ''}`.trim() :
            address;

        // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        let coordinates;
        if (latitude && longitude) {
            coordinates = {
                lat: parseFloat(latitude),
                lng: parseFloat(longitude)
            };
        } else {
            // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            coordinates = {
                lat: 48.8566,  // –ü–∞—Ä–∏–∂ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                lng: 2.3522
            };
        }

        // ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
        const serviceData = {
            // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            first_name,
            last_name, 
            email,
            password,
            phone: cleanPhone,

            // –ë–∏–∑–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ
            business_name,
            brand_name,
            category,
            address: addressString,
            floor_unit: floor_unit || null,

            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê LOCATION
            location: {
                type: 'Point',
                coordinates: [coordinates.lng, coordinates.lat] // [lng, lat] –¥–ª—è MongoDB
            },

            // –°–æ–≥–ª–∞—Å–∏–µ
            whatsapp_consent
        };

        console.log('‚úÖ VALIDATION COMPLETED - Calling service:', {
            email: serviceData.email,
            phone: serviceData.phone,
            location: serviceData.location,
            whatsapp_consent: serviceData.whatsapp_consent
        });

        // ‚úÖ –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        const result = await createPartnerAccount(serviceData);

        // üîë –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–û–ó–í–†–ê–©–ê–ï–ú –¢–û–ö–ï–ù –í –û–¢–í–ï–¢–ï!
        res.status(201).json({
            result: true,
            message: "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
            
            // üîë –î–û–ë–ê–í–õ–Ø–ï–ú –¢–û–ö–ï–ù –í –û–¢–í–ï–¢
            token: result.token,
            
            // üîë –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
            user: result.user,
            
            data: {
                user_id: result.user.id,
                request_id: result.request?.request_id || result.request?._id,
                next_step: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                coordinates_used: coordinates,
                geocoding_info: !latitude && !longitude ? "–ê–¥—Ä–µ—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω" : "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        
        const statusCode = error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') ? 409 :
                          error.message.includes('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è') ? 400 :
                          error.message.includes('–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ') ? 422 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞'
        });
    }
};

/**
 * üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * POST /api/partners/login
 */
const loginPartnerController = async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        console.log('üîç LOGIN PARTNER - Start:', { email });

        const result = await loginPartner(email, password);

        res.status(200).json({
            result: true,
            message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
            ...result
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        
        const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                          error.message.includes('–Ω–µ–≤–µ—Ä–Ω—ã–π') ? 401 :
                          error.message.includes('–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω') ? 403 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message
        });
    }
};

/**
 * ‚úÖ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê –ü–ê–†–¢–ù–ï–†–ê
 * GET /api/partners/verify
 */
const verifyPartner = async (req, res) => {
    try {
        const { partner } = req;

        console.log('üîç VERIFY PARTNER - Start:', {
            partner_id: partner._id,
            partner_email: partner.email
        });

        res.status(200).json({
            result: true,
            message: "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
            partner: {
                id: partner._id,
                email: partner.email,
                role: partner.role,
                is_active: partner.is_active
            }
        });

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(401).json({
            result: false,
            message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
        });
    }
};

/**
 * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê DASHBOARD
 * GET /api/partners/dashboard
 */
const getDashboardStatus = async (req, res) => {
    try {
        const { partner } = req;

        console.log('üîç GET DASHBOARD STATUS - Start:', {
            partner_id: partner._id
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const dashboardData = await partnerService.getPartnerDashboardData(partner._id);

        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å dashboard –ø–æ–ª—É—á–µ–Ω",
            dashboard: dashboardData
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD STATUS - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö dashboard"
        });
    }
};

/**
 * üìÑ –ü–û–î–ê–ß–ê –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í
 * POST /api/partners/legal-info/:request_id
 */
const submitLegalInfo = async (req, res) => {
    try {
        const { partner } = req;
        const { request_id } = req.params;
        const legalData = req.body;

        console.log('üîç SUBMIT LEGAL INFO - Start:', {
            partner_id: partner._id,
            request_id: request_id,
            has_siret: !!legalData.legal_data?.siret_number,
            has_iban: !!legalData.bank_details?.iban
        });

        // –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const { User, InitialPartnerRequest, PartnerLegalInfo } = await import('../models/index.js');
        const { cryptoString } = await import('../utils/crypto.js');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const request = await InitialPartnerRequest.findById(request_id);
        if (!request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        if (request.user_id.toString() !== partner._id.toString()) {
            return res.status(403).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É"
            });
        }

        if (request.status !== 'approved') {
            return res.status(400).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–Ω—ã –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        const existingLegalInfo = await PartnerLegalInfo.findOne({
            user_id: partner._id,
            partner_request_id: request_id
        });

        if (existingLegalInfo) {
            return res.status(409).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –ø–æ–¥–∞–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                legal_info_id: existingLegalInfo._id,
                status: existingLegalInfo.verification_status
            });
        }

        // –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const encryptedLegalData = {
            legal_name: cryptoString(legalData.legal_data.legal_name),
            siret_number: cryptoString(legalData.legal_data.siret_number),
            legal_form: legalData.legal_data.legal_form, // –ù–µ —à–∏—Ñ—Ä—É–µ–º enum
            tva_number: legalData.legal_data.tva_number ? 
                cryptoString(legalData.legal_data.tva_number) : null,
            legal_address: cryptoString(legalData.legal_data.legal_address),
            legal_representative: cryptoString(legalData.legal_data.legal_representative)
        };

        const encryptedBankDetails = {
            iban: cryptoString(legalData.bank_details.iban),
            bic: cryptoString(legalData.bank_details.bic)
        };

        const encryptedContactInfo = {
            email: cryptoString(legalData.legal_contact.email),
            phone: cryptoString(legalData.legal_contact.phone)
        };

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        let encryptedDocuments = {};
        if (legalData.documents) {
            if (legalData.documents.kbis_document) {
                encryptedDocuments.kbis_document = cryptoString(legalData.documents.kbis_document);
            }
            if (legalData.documents.id_document) {
                encryptedDocuments.id_document = cryptoString(legalData.documents.id_document);
            }
            if (legalData.documents.additional_documents) {
                encryptedDocuments.additional_documents = legalData.documents.additional_documents.map(doc => ({
                    name: doc.name,
                    url: cryptoString(doc.url),
                    uploaded_at: doc.uploaded_at || new Date()
                }));
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ PartnerLegalInfo
        const newLegalInfo = new PartnerLegalInfo({
            user_id: partner._id,
            partner_request_id: request_id,
            legal_data: encryptedLegalData,
            bank_details: encryptedBankDetails,
            legal_contact: encryptedContactInfo,
            documents: encryptedDocuments,
            verification_status: 'pending',
            submitted_at: new Date()
        });

        await newLegalInfo.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º workflow_stage –∑–∞—è–≤–∫–∏
        await InitialPartnerRequest.findByIdAndUpdate(request_id, {
            workflow_stage: 3,
            updated_at: new Date()
        });

        console.log('‚úÖ LEGAL INFO SUBMITTED:', {
            legal_info_id: newLegalInfo._id,
            partner_id: partner._id,
            request_id: request_id,
            verification_status: newLegalInfo.verification_status
        });

        res.status(201).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ",
            legal_info_id: newLegalInfo._id,
            verification_status: newLegalInfo.verification_status,
            workflow_stage: 3,
            next_step: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            admin_review_endpoint: `POST /api/admin/partners/legal/${newLegalInfo._id}/approve`
        });

    } catch (error) {
        console.error('üö® SUBMIT LEGAL INFO - Error:', error);
        
        const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                          error.message.includes('—É–∂–µ –ø–æ–¥–∞–Ω') ? 409 :
                          error.message.includes('–≤–∞–ª–∏–¥–∞—Ü–∏—è') ? 400 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        });
    }
};

/**
 * üë§ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–ê–†–¢–ù–ï–†–ê
 * GET /api/partners/profile
 * GET /api/partners/profile/:id
 */
const getProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        const profileId = id || partner._id;

        console.log('üîç GET PROFILE - Start:', {
            requester_id: partner._id,
            target_profile_id: profileId
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const profileData = await partnerService.getPartnerProfile(profileId);

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω",
            profile: profileData
        });

    } catch (error) {
        console.error('üö® GET PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * ‚úèÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–ê–†–¢–ù–ï–†–ê
 * PUT /api/partners/profile/:id
 */
const updateProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;
        const updateData = req.body;

        console.log('üîç UPDATE PROFILE - Start:', {
            partner_id: partner._id,
            profile_id: id,
            fields_to_update: Object.keys(updateData)
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const updatedProfile = await partnerService.updatePartnerProfile(partner._id, updateData);

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
            profile: updatedProfile
        });

    } catch (error) {
        console.error('üö® UPDATE PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–ê–†–¢–ù–ï–†–ê
 * DELETE /api/partners/profile/:id
 */
const deletePartner = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç DELETE PARTNER - Start:', {
            partner_id: partner._id,
            target_id: id
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const result = await partnerService.deletePartnerAccount(id, partner._id);

        res.status(200).json({
            result: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä —É–¥–∞–ª–µ–Ω",
            deleted_partner_id: result.deletedPartnerId
        });

    } catch (error) {
        console.error('üö® DELETE PARTNER - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        });
    }
};

// ================ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ================

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getDashboardStatus,
    getProfile,
    updateProfile,
    deletePartner,
    submitLegalInfo
};