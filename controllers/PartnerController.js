// ================ controllers/PartnerController.js (–ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ================
import { createPartnerAccount, loginPartner, checkPartnerExists } from '../services/Partner/partner.auth.service.js';
import * as partnerService from '../services/Partner/partner.service.js';
import { PartnerLegalInfo, InitialPartnerRequest } from '../models/index.js';
import { cryptoString, decryptString } from '../utils/crypto.js';
import mongoose from 'mongoose';

/**
 * –≠–¢–ê–ü 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ location
 */
const registerPartner = async (req, res) => {
    try {
        const partnerData = req.body;
        const {
            first_name, last_name, email, password, confirm_password, phone,
            business_name, brand_name, category, address, floor_unit,
            latitude, longitude, whatsapp_consent
        } = partnerData;
        
        console.log('üîç REGISTER PARTNER - Start:', {
            email: email,
            business_name: business_name,
            brand_name: brand_name,
            category: category,
            has_floor_unit: !!floor_unit,
            coordinates: { latitude, longitude }
        });

        // ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const requiredFields = [
            'first_name', 'last_name', 'email', 'password', 'confirm_password', 'phone',
            'address', 'business_name', 'brand_name', 'category',
            'latitude', 'longitude', 'whatsapp_consent'
        ];

        const missingFields = requiredFields.filter(field => !partnerData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const frenchPhoneRegex = /^(\+33|0)[1-9](\d{8})$/;
        const cleanPhone = phone.replace(/\s+/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
        
        if (!frenchPhoneRegex.test(cleanPhone)) {
            return res.status(400).json({
                result: false,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º –Ω–æ–º–µ—Ä–æ–º",
                format_examples: [
                    "+33 1 42 34 56 78",
                    "01 42 34 56 78",
                    "+33 6 12 34 56 78"
                ],
                provided_phone: phone
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
        if (password !== confirm_password) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            });
        }

        if (password.length < 6) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!['restaurant', 'store'].includes(category)) {
            return res.status(400).json({
                result: false,
                message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'"
            });
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ location
        const lat = parseFloat(latitude);
        const lng = parseFloat(longitude);
        
        if (isNaN(lat) || isNaN(lng)) {
            return res.status(400).json({
                result: false,
                message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –§—Ä–∞–Ω—Ü–∏–∏
        if (lat < 41.0 || lat > 51.5 || lng < -5.5 || lng > 10.0) {
            return res.status(400).json({
                result: false,
                message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –§—Ä–∞–Ω—Ü–∏–∏",
                provided_coordinates: { latitude: lat, longitude: lng },
                france_bounds: {
                    latitude: "41.0 - 51.5",
                    longitude: "-5.5 - 10.0"
                }
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è WhatsApp —Å–æ–≥–ª–∞—Å–∏—è
        if (typeof whatsapp_consent !== 'boolean') {
            return res.status(400).json({
                result: false,
                message: "WhatsApp —Å–æ–≥–ª–∞—Å–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true –∏–ª–∏ false"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const exists = await checkPartnerExists(email);
        
        if (exists) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            });
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ location –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
        partnerData.location = {
            latitude: lat,
            longitude: lng,
            coordinates: [lng, lat], // GeoJSON —Ñ–æ—Ä–º–∞—Ç: [longitude, latitude]
            type: 'Point'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        partnerData.registration_ip = req.ip;
        partnerData.user_agent = req.get('User-Agent');

        console.log('‚úÖ VALIDATION COMPLETED - Calling service:', {
            email: email,
            phone: cleanPhone,
            location: partnerData.location,
            whatsapp_consent: whatsapp_consent
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const result = await createPartnerAccount(partnerData);

        if (!result.isNewPartner) {
            return res.status(400).json({
                result: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            });
        }

        console.log('‚úÖ REGISTER PARTNER - Success');

        // ‚úÖ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢
        res.status(201).json({
            result: true,
            message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.",
            partner: {
                id: result.partner.id,
                email: result.partner.email,
                role: result.partner.role
            },
            request: {
                id: result.partner.request._id,
                status: result.partner.request.status,
                workflow_stage: result.partner.request.workflow_stage,
                business_name: result.partner.request.business_data?.business_name,
                category: result.partner.request.business_data?.category
            },
            token: result.token,
            next_step: {
                action: "wait_for_approval", 
                description: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                estimated_time: "1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è"
            },
            workflow_info: {
                current_stage: 1,
                total_stages: 6,
                stage_description: "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        });
    }
};

/**
 * –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * ‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
const loginPartnerController = async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        const result = await loginPartner({ email, password });

        res.status(200).json({
            result: true,
            message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            partner: result.partner,
            token: result.token
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        const statusCode = error.statusCode || 500;
        res.status(statusCode).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        });
    }
};

/**
 * –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê
 * ‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
const verifyPartner = async (req, res) => {
    try {
        const { user } = req;

        res.status(200).json({
            result: true,
            message: "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω",
            partner: {
                id: user._id,
                email: user.email,
                role: user.role,
                is_active: user.is_active
            }
        });

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"
        });
    }
};

/**
 * –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –î–ê–®–ë–û–†–î–ê
 * ‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
const getDashboardStatus = async (req, res) => {
    try {
        const { user } = req;

        console.log('üîç GET DASHBOARD STATUS:', { user_id: user._id });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const dashboardData = await partnerService.getDashboardWorkflow(user._id);

        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω",
            user: dashboardData.user,
            workflow: dashboardData.workflow
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD STATUS - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞"
        });
    }
};

/**
 * –≠–¢–ê–ü 3: –ü–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * ‚úÖ –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏ PartnerLegalInfo
 */
const submitLegalInfo = async (req, res) => {
    try {
        const { partner } = req;
        const { request_id } = req.params;
        const legalData = req.body;

        console.log('üîç SUBMIT LEGAL INFO - Start:', {
            partner_id: partner._id,
            request_id: request_id,
            has_legal_name: !!legalData.legal_name,
            has_siret: !!legalData.siret_number,
            legal_form: legalData.legal_form
        });

        // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô (—Ç–æ—á–Ω–æ –ø–æ –º–æ–¥–µ–ª–∏ PartnerLegalInfo)
        const requiredFields = [
            // üè¢ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï (legal_data)
            'legal_name',           // "–ù–∞–∑–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"
            'siret_number',         // "SIRET –Ω–æ–º–µ—Ä"
            'legal_form',          // "–§–æ—Ä–º–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"
            'legal_address',       // "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å (si√®ge social)"
            'legal_representative', // "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —é—Ä. –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è"
            
            // üè¶ –ë–ê–ù–ö–û–í–°–ö–ò–ï –î–ê–ù–ù–´–ï (bank_details)
            'iban',                // "IBAN"
            'bic',                 // "BIC"
            
            // üìû –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï (legal_contact)
            'legal_email',         // "Email —é—Ä. –ª–∏—Ü–∞"
            'legal_phone'          // "–¢–µ–ª–µ—Ñ–æ–Ω —é—Ä. –ª–∏—Ü–∞"
        ];

        const missingFields = requiredFields.filter(field => !legalData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // ‚úÖ –§–†–ê–ù–¶–£–ó–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è SIRET (14 —Ü–∏—Ñ—Ä)
        const siretRegex = /^\d{14}$/;
        const cleanSiret = legalData.siret_number.replace(/\s/g, '');
        if (!siretRegex.test(cleanSiret)) {
            return res.status(400).json({
                result: false,
                message: "SIRET –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 14 —Ü–∏—Ñ—Ä",
                example: "123 456 789 00014"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ IBAN
        const frenchIbanRegex = /^FR\d{2}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{3}$/;
        const cleanIban = legalData.iban.replace(/\s/g, '');
        if (!frenchIbanRegex.test(cleanIban)) {
            return res.status(400).json({
                result: false,
                message: "IBAN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º",
                example: "FR76 3000 6000 0112 3456 7890 189"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è BIC (8-11 —Å–∏–º–≤–æ–ª–æ–≤)
        const bicRegex = /^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/;
        if (!bicRegex.test(legalData.bic.toUpperCase())) {
            return res.status(400).json({
                result: false,
                message: "BIC –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8-11 —Å–∏–º–≤–æ–ª–æ–≤",
                example: "AGRIFRPPXXX"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è TVA –Ω–æ–º–µ—Ä–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if (legalData.tva_number) {
            const tvaRegex = /^FR\d{2}\s?\d{9}$/;
            const cleanTva = legalData.tva_number.replace(/\s/g, '');
            if (!tvaRegex.test(cleanTva)) {
                return res.status(400).json({
                    result: false,
                    message: "TVA –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º",
                    example: "FR12 345678912"
                });
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —é—Ä. –ª–∏—Ü–∞
        const frenchPhoneRegex2 = /^(\+33|0)[1-9](\d{8})$/;
        const cleanLegalPhone = legalData.legal_phone.replace(/\s/g, '');
        if (!frenchPhoneRegex2.test(cleanLegalPhone)) {
            return res.status(400).json({
                result: false,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω —é—Ä. –ª–∏—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º",
                example: "+33 1 42 34 56 78"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(legalData.legal_email)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email —é—Ä. –ª–∏—Ü–∞"
            });
        }

        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ó–ê–Ø–í–ö–£ –ü–ê–†–¢–ù–ï–†–ê
        if (!mongoose.Types.ObjectId.isValid(request_id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const partnerRequest = await InitialPartnerRequest.findOne({
            _id: request_id,
            user_id: partner._id
        });

        if (!partnerRequest) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        if (partnerRequest.status !== 'approved') {
            return res.status(400).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º",
                current_status: partnerRequest.status
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–¥–∞–Ω—ã –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        const existingLegal = await PartnerLegalInfo.findOne({
            user_id: partner._id,
            partner_request_id: request_id
        });

        if (existingLegal) {
            return res.status(400).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –ø–æ–¥–∞–Ω—ã",
                status: existingLegal.verification_status
            });
        }

        // ‚úÖ –°–û–ó–î–ê–ï–ú PartnerLegalInfo (—Ç–æ—á–Ω–æ –ø–æ –º–æ–¥–µ–ª–∏)
        const newLegalInfo = new PartnerLegalInfo({
            user_id: partner._id,
            partner_request_id: request_id,
            
            // üè¢ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏ legal_data)
            legal_data: {
                legal_name: cryptoString(legalData.legal_name),                    // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                siret_number: cryptoString(legalData.siret_number),                // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                legal_form: legalData.legal_form,                                  // ‚úÖ –û–¢–ö–†–´–¢–û
                tva_number: legalData.tva_number ? 
                    cryptoString(legalData.tva_number) : null,                     // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                legal_address: cryptoString(legalData.legal_address),              // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                legal_representative: cryptoString(legalData.legal_representative) // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
            },
            
            // üè¶ –ë–ê–ù–ö–û–í–°–ö–ò–ï –î–ê–ù–ù–´–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏ bank_details)
            bank_details: {
                iban: cryptoString(legalData.iban), // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                bic: cryptoString(legalData.bic)    // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
            },
            
            // üìû –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏ legal_contact)
            legal_contact: {
                email: cryptoString(legalData.legal_email), // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
                phone: cryptoString(legalData.legal_phone)  // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–û
            },
            
            // üìÑ –°–¢–ê–¢–£–° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
            verification_status: 'pending',
            
            // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            validation_info: {
                siret_validated: siretRegex.test(cleanSiret),
                iban_validated: frenchIbanRegex.test(cleanIban),
                tva_status: legalData.tva_number ? 'pending' : 'not_applicable'
            },
            
            // üìÖ –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–ö–ò
            submitted_at: new Date(),
            updated_at: new Date()
        });

        await newLegalInfo.save();

        console.log('‚úÖ SUBMIT LEGAL INFO - Success:', {
            legal_info_id: newLegalInfo._id,
            verification_status: newLegalInfo.verification_status
        });

        // ‚úÖ –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢
        res.status(201).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω—ã",
            legal_info: {
                id: newLegalInfo._id,
                status: newLegalInfo.verification_status,
                legal_form: newLegalInfo.legal_data.legal_form,
                validation: {
                    siret_valid: newLegalInfo.validation_info.siret_validated,
                    iban_valid: newLegalInfo.validation_info.iban_validated,
                    tva_status: newLegalInfo.validation_info.tva_status
                }
            },
            next_step: {
                action: "wait_for_admin_verification",
                description: "–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                expected_time: "2-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
            },
            workflow_info: {
                current_stage: 3,
                total_stages: 6,
                stage_description: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–∞–Ω—ã –∏ –æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
            }
        });

    } catch (error) {
        console.error('üö® SUBMIT LEGAL INFO - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

/**
 * –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–ê–†–¢–ù–ï–†–ê
 * ‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
const getProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç GET PROFILE - Start:', {
            partner_id: partner._id,
            requested_id: id
        });

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
        const targetPartnerId = id || partner._id;

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const profileData = await partnerService.getPartnerFullInfo(targetPartnerId);

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω",
            partner: profileData.partner,
            profile: profileData.profile,
            request: profileData.request,
            legal_info: profileData.legalInfo,
            permissions: {
                can_edit: targetPartnerId === partner._id.toString(),
                can_delete: targetPartnerId === partner._id.toString()
            }
        });
        
    } catch (error) {
        console.error('üö® GET PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–ê–†–¢–ù–ï–†–ê
 * ‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
const updateProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;
        const updateData = req.body;

        console.log('üîç UPDATE PROFILE - Start:', {
            partner_id: partner._id,
            profile_id: id,
            fields_to_update: Object.keys(updateData)
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const updatedProfile = await partnerService.updatePartnerProfile(id, updateData, partner._id);

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
            profile: updatedProfile
        });

    } catch (error) {
        console.error('üö® UPDATE PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * –£–î–ê–õ–ï–ù–ò–ï –ü–ê–†–¢–ù–ï–†–ê
 * ‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
const deletePartner = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç DELETE PARTNER - Start:', {
            partner_id: partner._id,
            target_id: id
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const result = await partnerService.deletePartnerAccount(id, partner._id);

        res.status(200).json({
            result: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä —É–¥–∞–ª–µ–Ω",
            deleted_partner_id: result.deletedPartnerId
        });

    } catch (error) {
        console.error('üö® DELETE PARTNER - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        });
    }
};

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getDashboardStatus,
    getProfile,
    updateProfile,
    deletePartner,
    submitLegalInfo
};