// controllers/PartnerController.js - –ü–û–õ–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ù–¢–†–û–õ–õ–ï–† üéØ
import { 
  registerPartnerWithInitialRequest,
  getPartnerDashboardStatus,
  checkPartnerAccess,
  getDecryptedPartnerData,
  encryptLegalData
} from '../services/partner.register.service.js';
import { loginPartner, getPartnerById } from '../services/partner.service.js';
import { InitialPartnerRequest, PartnerLegalInfo } from '../models/index.js';
import { cryptoString } from '../utils/crypto.js';
import mongoose from 'mongoose';

// ================ 1Ô∏è‚É£ –≠–¢–ê–ü: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ================

/**
 * ‚úÖ –≠–¢–ê–ü 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * üîê –°–æ–∑–¥–∞–µ—Ç: User + Meta + InitialPartnerRequest
 * ‚ùå –ù–ï —Å–æ–∑–¥–∞–µ—Ç: PartnerProfile (—Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≠–¢–ê–ü–ï 3!)
 */
export const registerPartner = async (req, res) => {
  try {
    const {
      // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      first_name,
      last_name,
      email,
      password,
      confirm_password,
      phone,
      
      // –î–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å–∞
      business_name,
      brand_name,
      category, // restaurant/store
      address,
      location, // {lat, lng}
      floor_unit,
      whatsapp_consent
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = {
      first_name, last_name, email, password, confirm_password,
      phone, business_name, category, address, location
    };

    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      return res.status(400).json({
        result: false,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password !== confirm_password) {
      return res.status(400).json({
        result: false,
        message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!['restaurant', 'store'].includes(category)) {
      return res.status(400).json({
        result: false,
        message: "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'"
      });
    }

    // üéØ –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û User + InitialPartnerRequest
    const result = await registerPartnerWithInitialRequest({
      first_name, last_name, email, password, phone,
      business_name, brand_name, category, address, location, floor_unit,
      whatsapp_consent, registration_ip: req.ip, user_agent: req.get('User-Agent')
    });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–û–ó–í–†–ê–©–ê–ï–ú –¢–û–ö–ï–ù –í –û–¢–í–ï–¢–ï!
    res.status(201).json({
      result: true,
      message: "üéØ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
      user: result.user,
      request: result.request,
      token: result.token, // üî• –í–û–¢ –û–ù –¢–û–ö–ï–ù!
      workflow: {
        current_step: 1,
        step_name: "–û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
        next_steps: result.next_steps
      }
    });

  } catch (error) {
    console.error('Register partner error:', error);
    
    if (error.statusCode === 400) {
      return res.status(400).json({
        result: false,
        message: error.message
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
    });
  }
};

/**
 * ‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * –ú–æ–∂–µ—Ç –≤–æ–π—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞)
 */
export const loginPartnerUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        result: false,
        message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    const result = await loginPartner(email, password);

    res.status(200).json({
      result: true,
      message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
      user: result.user,
      token: result.token
    });

  } catch (error) {
    console.error('Login partner error:', error);
    
    if (error.statusCode === 401 || error.statusCode === 404) {
      return res.status(401).json({
        result: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    });
  }
};

// ================ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ ================

/**
 * ‚úÖ –°–¢–ê–¢–£–° –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä
 */
export const getDashboardStatus = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const status = await getPartnerDashboardStatus(user._id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç—É—Å –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω",
      ...status
    });

  } catch (error) {
    console.error('Get dashboard status error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞"
    });
  }
};

/**
 * ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• (–†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–•)
 * –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export const getPartnerPersonalData = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const personalData = await getDecryptedPartnerData(user._id);

    res.status(200).json({
      result: true,
      message: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",
      personal_data: personalData,
      security_note: "–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"
    });

  } catch (error) {
    console.error('Get partner personal data error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    });
  }
};

/**
 * ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –§–£–ù–ö–¶–ò–Ø–ú
 * GET /api/partners/access/:feature
 */
export const checkFeatureAccess = async (req, res) => {
  try {
    const { user } = req;
    const { feature } = req.params;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const access = await checkPartnerAccess(user._id, feature);

    res.status(200).json({
      result: true,
      feature,
      access
    });

  } catch (error) {
    console.error('Check feature access error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"
    });
  }
};

// ================ 2Ô∏è‚É£ –≠–¢–ê–ü: –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï ================

/**
 * ‚úÖ –≠–¢–ê–ü 2: –ü–û–î–ê–ß–ê –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•
 * üîê –°–æ–∑–¥–∞–µ—Ç: PartnerLegalInfo (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
 * üìã –°—Ç–∞—Ç—É—Å: InitialPartnerRequest.status = "under_review"
 */
export const submitPartnerLegalInfo = async (req, res) => {
  try {
    const { request_id } = req.params;
    const { user } = req;
    const {
      legal_name,
      siret_number,
      legal_form,
      business_address,
      contact_person,
      contact_phone,
      bank_details,
      tax_number,
      additional_info
    } = req.body;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = { legal_name, siret_number, legal_form, business_address, contact_person, contact_phone };
    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      return res.status(400).json({
        result: false,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const request = await InitialPartnerRequest.findOne({
      _id: request_id,
      user_id: user._id
    });

    if (!request) {
      return res.status(404).json({
        result: false,
        message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    if (request.status !== 'approved') {
      return res.status(400).json({
        result: false,
        message: "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
        current_status: request.status
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–¥–∞–Ω—ã –ª–∏ —É–∂–µ —é—Ä.–¥–∞–Ω–Ω—ã–µ
    const existingLegal = await PartnerLegalInfo.findOne({
      user_id: user._id,
      partner_request_id: request_id
    });

    if (existingLegal) {
      return res.status(400).json({
        result: false,
        message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–¥–∞–Ω—ã",
        legal_info_id: existingLegal._id,
        status: existingLegal.verification_status
      });
    }

    // üîê –®–∏—Ñ—Ä—É–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    const encryptedLegalData = encryptLegalData({
      legal_name, siret_number, legal_form, business_address,
      contact_person, contact_phone, bank_details, tax_number, additional_info
    });

    // –°–æ–∑–¥–∞–µ–º PartnerLegalInfo
    const legalInfo = new PartnerLegalInfo({
      user_id: user._id,
      partner_request_id: request_id,
      legal_data: encryptedLegalData,
      verification_status: 'pending',
      submitted_at: new Date(),
      submission_ip: req.ip,
      submission_user_agent: req.get('User-Agent')
    });

    await legalInfo.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    request.status = 'under_review';
    await request.save();

    res.status(201).json({
      result: true,
      message: "üéØ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞–Ω—ã! –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
      legal_info_id: legalInfo._id,
      request_status: request.status,
      workflow: {
        current_step: 3,
        step_name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        next_step: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–¥–æ–±—Ä–∏—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
      },
      security_note: "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞—â–∏—â–µ–Ω—ã"
    });

  } catch (error) {
    console.error('Error in submitPartnerLegalInfo:', error);
    
    if (error.code === 11000) {
      return res.status(400).json({ 
        result: false, 
        message: "–î–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ"
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
    });
  }
};

// ================ –ü–†–û–§–ò–õ–¨ (–î–û–°–¢–£–ü–ï–ù –ü–û–°–õ–ï –≠–¢–ê–ü–ê 3) ================

/**
 * ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–ê–†–¢–ù–ï–†–ê
 * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —é—Ä.–¥–∞–Ω–Ω—ã—Ö (–≠–¢–ê–ü 4+)
 */
export const getPartnerProfileData = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é
    const access = await checkPartnerAccess(user._id, 'profile_viewing');
    
    if (!access.has_access) {
      return res.status(403).json({
        result: false,
        message: access.reason || "–ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
      });
    }

    const partnerData = await getPartnerById(user._id);

    if (!partnerData || !partnerData.profile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω"
      });
    }

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω",
      user: {
        id: partnerData._id,
        email: partnerData.email,
        role: partnerData.role,
        is_email_verified: partnerData.is_email_verified
      },
      partner: partnerData.profile
    });

  } catch (error) {
    console.error('Get partner profile error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
    });
  }
};

// ================ LEGACY/DEPRECATED ================

/**
 * ‚ùå –£–°–¢–ê–†–ï–í–®–ò–ô: –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 */
export const getRequestStatus = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
      });
    }

    const status = await getPartnerDashboardStatus(user._id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dashboard)",
      status,
      deprecated: true,
      use_instead: "GET /api/partners/dashboard"
    });

  } catch (error) {
    console.error('Get request status error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
    });
  }
};

/**
 * ‚ùå –£–°–¢–ê–†–ï–í–®–ò–ô: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏
 */
export const createInitialPartnerRequest = async (req, res) => {
  return res.status(400).json({
    result: false,
    message: "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/partners/register –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
    new_endpoint: "POST /api/partners/register",
    deprecated: true
  });
};

// ================ –≠–ö–°–ü–û–†–¢ ================
export default {
  // ‚úÖ –û–°–ù–û–í–ù–û–ô WORKFLOW –ü–ê–†–¢–ù–ï–†–û–í
  
  // 1Ô∏è‚É£ –≠–¢–ê–ü: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
  registerPartner,          // –°–æ–∑–¥–∞–µ—Ç User + InitialPartnerRequest
  loginPartnerUser,         // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  
  // –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
  getDashboardStatus,       // –°—Ç–∞—Ç—É—Å –∫–∞–±–∏–Ω–µ—Ç–∞ (—á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ)
  getPartnerPersonalData,   // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ)
  checkFeatureAccess,       // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
  
  // 2Ô∏è‚É£ –≠–¢–ê–ü: –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï
  submitPartnerLegalInfo,   // –ü–æ–¥–∞—á–∞ —é—Ä.–¥–∞–Ω–Ω—ã—Ö (–≠–¢–ê–ü 2)
  
  // 4Ô∏è‚É£+ –≠–¢–ê–ü–´: –ü–†–û–§–ò–õ–¨ –ò –ö–û–ù–¢–ï–ù–¢
  getPartnerProfileData,    // –ü—Ä–æ—Ñ–∏–ª—å (–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≠–¢–ê–ü–ê 3)
  
  // DEPRECATED
  getRequestStatus,         // –£—Å—Ç–∞—Ä–µ–≤—à–∏–π (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ getDashboardStatus)
  createInitialPartnerRequest // –£—Å—Ç–∞—Ä–µ–≤—à–∏–π (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ registerPartner)
};