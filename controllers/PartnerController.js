// ================ controllers/PartnerController.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ================
import { createPartnerAccount, loginPartner, checkPartnerExists } from '../services/Partner/partner.auth.service.js';
import * as partnerService from '../services/Partner/partner.service.js';
// ================== –ö–û–ù–¢–†–û–õ–õ–ï–†–´ –†–ê–ë–û–¢–ê–Æ–¢ –¢–û–õ–¨–ö–û –° REQ/RES ==================
// –í—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö



// –≠–¢–ê–ü 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
// –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ —Å–µ—Ä–≤–∏—Å
 
const registerPartner = async (req, res) => {
    try {
        const partnerData = req.body;
        
        console.log('üîç REGISTER PARTNER - Start:', {
            email: partnerData.email,
            business_name: partnerData.business_name,
            category: partnerData.category
        });

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const requiredFields = [
            'first_name', 'last_name', 'email', 'password', 'confirm_password',
            'phone', 'business_name', 'category', 'address', 'location'
        ];

        const missingFields = requiredFields.filter(field => !partnerData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π
        if (partnerData.password !== partnerData.confirm_password) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!['restaurant', 'store'].includes(partnerData.category)) {
            return res.status(400).json({
                result: false,
                message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const exists = await checkPartnerExists(partnerData.email);
        
        if (exists) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        partnerData.registration_ip = req.ip;
        partnerData.user_agent = req.get('User-Agent');

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const result = await createPartnerAccount(partnerData);

        if (!result.isNewPartner) {
            return res.status(400).json({
                result: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            });
        }

        console.log('‚úÖ REGISTER PARTNER - Success');

        res.status(201).json({
            result: true,
            message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –ø–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            user: {
                id: result.user._id,
                email: result.user.email,
                role: result.user.role
            },
            request: {
                id: result.request._id,
                status: result.request.status,
                business_name: result.request.business_data.business_name
            },
            token: result.token,
            next_step: {
                action: "submit_legal_info",
                endpoint: `POST /api/partners/legal-info/${result.request._id}`,
                description: "–ü–æ–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    }
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ä–≤–∏—Å
 */
const loginPartnerController = async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log('üîç LOGIN PARTNER - Start:', { email });

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const { token, partner } = await loginPartner({ email, password });

        console.log('‚úÖ LOGIN PARTNER - Success');

        res.status(200).json({
            result: true,
            message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            token,
            partner
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        res.status(error.statusCode || 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        });
    }
};

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ middleware
 */
const verifyPartner = async (req, res) => {
    try {
        const { partner } = req;

        if (!partner) {
            return res.status(404).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!"
            });
        }

        // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ü–û–õ–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –ß–ï–†–ï–ó –°–ï–†–í–ò–°
        const partnerInfo = await partnerService.getPartnerFullInfo(partner._id);

        res.status(200).json({
            result: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
            partner: partnerInfo.partner,
            profile: partnerInfo.profile,
            request: partnerInfo.request,
            legal_info: partnerInfo.legalInfo
        });

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            error: error.message
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –õ–æ–≥–∏–∫–∞ workflow –≤ —Å–µ—Ä–≤–∏—Å–µ
 */
const getDashboardStatus = async (req, res) => {
    try {
        const { partner } = req;

        console.log('üîç GET DASHBOARD - Start:', { partner_id: partner._id });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê WORKFLOW –í –°–ï–†–í–ò–°–ï
        const dashboardData = await partnerService.getDashboardWorkflow(partner._id);

        console.log('‚úÖ GET DASHBOARD - Success');

        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω",
            workflow: dashboardData.workflow,
            partner_info: dashboardData.partner_info
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞",
            error: error.message
        });
    }
};

/**
 * –ü–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ —Å–µ—Ä–≤–∏—Å
 */
const submitLegalInfo = async (req, res) => {
    try {
        const { request_id } = req.params;
        const legalData = req.body;

        console.log('üîç SUBMIT LEGAL INFO - Start:', { request_id });

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!request_id) {
            return res.status(400).json({
                result: false,
                message: "ID –∑–∞—è–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            });
        }

        const requiredFields = ['company_name', 'legal_address', 'tax_number'];
        const missingFields = requiredFields.filter(field => !legalData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const metadata = {
            ip: req.ip,
            userAgent: req.get('User-Agent')
        };

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const result = await partnerService.submitLegalDocuments(request_id, legalData, metadata);

        console.log('‚úÖ SUBMIT LEGAL INFO - Success');

        res.status(201).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–∞–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
            legal_info: result.legal_info,
            next_step: {
                action: "wait_verification",
                description: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            }
        });

    } catch (error) {
        console.error('üö® SUBMIT LEGAL INFO - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ middleware
 */
const getProfile = async (req, res) => {
    try {
        const { id } = req.params;
        const { partnerProfile } = req; // –ò–∑ middleware checkProfileAccess

        console.log('üîç GET PROFILE - Start:', { profile_id: id });

        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤ middleware, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (partnerProfile) {
            console.log('‚úÖ GET PROFILE - Success (from middleware)');
            return res.status(200).json({
                result: true,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω",
                profile: partnerProfile,
                permissions: ['view', 'edit', 'delete']
            });
        }

        // –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const result = await partnerService.getPartnerProfileById(id);

        console.log('‚úÖ GET PROFILE - Success');

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω",
            profile: result.profile,
            permissions: result.permissions
        });

    } catch (error) {
        console.error('üö® GET PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ middleware checkProfileAccess
 */
const updateProfile = async (req, res) => {
    try {
        const { id } = req.params;
        const updateData = req.body;

        console.log('üîç UPDATE PROFILE - Start:', { profile_id: id });

        if (!updateData || Object.keys(updateData).length === 0) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            });
        }

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï, –ü–†–ê–í–ê –£–ñ–ï –ü–†–û–í–ï–†–ï–ù–´ –í MIDDLEWARE
        const result = await partnerService.updatePartnerProfile(id, updateData);

        console.log('‚úÖ UPDATE PROFILE - Success');

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
            profile: result.profile,
            updated_fields: result.updated_fields
        });

    } catch (error) {
        console.error('üö® UPDATE PROFILE - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ middleware (–ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è)
 */
const deletePartner = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç DELETE PARTNER - Start:', {
            requester_id: partner._id,
            target_id: id
        });

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è
        if (id !== partner._id.toString()) {
            return res.status(403).json({
                result: false,
                message: "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç"
            });
        }

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï, –ë–ï–ó –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í
        const result = await partnerService.deletePartnerCompletely(id);

        console.log('‚úÖ DELETE PARTNER - Success');

        res.status(200).json({
            result: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            deleted_partner: result
        });

    } catch (error) {
        console.error('üö® DELETE PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        });
    }
};

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getProfile,
    updateProfile,
    deletePartner,
    getDashboardStatus,
    submitLegalInfo
};