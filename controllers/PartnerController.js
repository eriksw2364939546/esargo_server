// ================ controllers/PartnerController.js (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô) ================
import { createPartnerAccount, loginPartner, checkPartnerExists } from '../services/Partner/partner.auth.service.js';
import * as partnerService from '../services/Partner/partner.service.js';

/**
 * –≠–¢–ê–ü 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
const registerPartner = async (req, res) => {
    try {
        const partnerData = req.body;
        
        console.log('üîç REGISTER PARTNER - Start:', {
            email: partnerData.email,
            business_name: partnerData.business_name,
            category: partnerData.category
        });

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const requiredFields = [
            'first_name', 'last_name', 'email', 'password', 'confirm_password',
            'phone', 'business_name', 'category', 'address', 'location'
        ];

        const missingFields = requiredFields.filter(field => !partnerData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π
        if (partnerData.password !== partnerData.confirm_password) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!['restaurant', 'store'].includes(partnerData.category)) {
            return res.status(400).json({
                result: false,
                message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const exists = await checkPartnerExists(partnerData.email);
        
        if (exists) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        partnerData.registration_ip = req.ip;
        partnerData.user_agent = req.get('User-Agent');

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const result = await createPartnerAccount(partnerData);

        if (!result.isNewPartner) {
            return res.status(400).json({
                result: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            });
        }

        console.log('‚úÖ REGISTER PARTNER - Success with token');

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        res.status(201).json({
            result: true,
            message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            token: result.token, // üÜï –ù–û–í–û–ï: –¢–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            user: {
                id: result.partner.id,
                email: result.partner.email,
                role: result.partner.role
            },
            request: {
                id: result.partner.request._id,
                status: result.partner.request.status,
                business_name: result.partner.request.business_data.business_name
            },
            next_step: {
                action: "wait_for_admin_approval",
                description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                current_status: "pending",
                available_endpoints: {
                    verify_token: "GET /api/partners/verify",
                    dashboard: "GET /api/partners/dashboard"
                }
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    }
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ä–≤–∏—Å
 */
const loginPartnerController = async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log('üîç LOGIN PARTNER - Start:', { email });

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const { token, partner } = await loginPartner({ email, password });

        console.log('‚úÖ LOGIN PARTNER - Success');

        res.status(200).json({
            result: true,
            message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            token,
            partner
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        res.status(error.statusCode || 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        });
    }
};

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ middleware
 */
const verifyPartner = async (req, res) => {
    try {
        const { partner } = req;

        if (!partner) {
            return res.status(404).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        const partnerRequest = await partnerService.getPartnerRequest(partner._id);
        const partnerProfile = await partnerService.getPartnerProfile(partner._id);

        res.status(200).json({
            result: true,
            message: "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
            partner: {
                id: partner._id,
                role: partner.role,
                is_active: partner.is_active,
                is_email_verified: partner.is_email_verified,
                request_status: partnerRequest ? partnerRequest.status : null,
                has_profile: !!partnerProfile,
                workflow_stage: partnerRequest ? partnerRequest.workflow_stage : null
            }
        });

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞",
            error: error.message
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
 */
const getDashboardStatus = async (req, res) => {
    try {
        const { partner } = req;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const partnerRequest = await partnerService.getPartnerRequest(partner._id);
        const partnerProfile = await partnerService.getPartnerProfile(partner._id);
        const legalInfo = await partnerService.getPartnerLegalInfo(partner._id);

        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞",
            dashboard: {
                user: {
                    id: partner._id,
                    role: partner.role,
                    is_active: partner.is_active,
                    is_email_verified: partner.is_email_verified,
                    registration_date: partner.createdAt
                },
                workflow: {
                    current_stage: partnerRequest ? partnerRequest.workflow_stage : 0,
                    status: partnerRequest ? partnerRequest.status : 'not_found',
                    business_name: partnerRequest ? partnerRequest.business_data.business_name : null
                },
                permissions: {
                    can_submit_legal: partnerRequest && partnerRequest.status === 'approved',
                    can_create_profile: legalInfo && legalInfo.status === 'approved',
                    can_manage_content: partnerProfile && partnerProfile.is_published
                },
                next_actions: getNextActions(partnerRequest, legalInfo, partnerProfile)
            }
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD STATUS - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞",
            error: error.message
        });
    }
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */
const getNextActions = (request, legal, profile) => {
    const actions = [];

    if (!request) {
        actions.push({
            action: "submit_request",
            description: "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            status: "required"
        });
    } else if (request.status === 'pending') {
        actions.push({
            action: "wait_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            status: "waiting"
        });
    } else if (request.status === 'approved' && !legal) {
        actions.push({
            action: "submit_legal",
            description: "–ü–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            status: "available"
        });
    } else if (legal && legal.status === 'pending') {
        actions.push({
            action: "wait_legal_approval",
            description: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            status: "waiting"
        });
    } else if (legal && legal.status === 'approved' && !profile) {
        actions.push({
            action: "create_profile",
            description: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "available"
        });
    } else if (profile && !profile.is_published) {
        actions.push({
            action: "wait_publication",
            description: "–û–∂–∏–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            status: "waiting"
        });
    } else if (profile && profile.is_published) {
        actions.push({
            action: "manage_content",
            description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è",
            status: "active"
        });
    }

    return actions;
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
const getProfile = async (req, res) => {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
};

const updateProfile = async (req, res) => {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
};

const deletePartner = async (req, res) => {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
};

const submitLegalInfo = async (req, res) => {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∞—á–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
};

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getDashboardStatus,
    getProfile,
    updateProfile,
    deletePartner,
    submitLegalInfo
};