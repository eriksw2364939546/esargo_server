// controllers/PartnerController.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
import { 
  registerPartnerWithInitialRequest,
  getPartnerDashboardStatus,
  checkPartnerAccess
} from '../services/partner.register.service.js'; // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
import { InitialPartnerRequest, PartnerLegalInfo } from '../models/index.js';
import mongoose from 'mongoose';

// ================ –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ================

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–¥–∞–Ω–Ω—ã–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1)
 * –°–æ–∑–¥–∞–µ—Ç User + InitialPartnerRequest, –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç
 */
export const registerPartner = async (req, res) => {
  try {
    const {
      // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      first_name,
      last_name,
      email,
      password,
      confirm_password,
      phone,
      
      // –î–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å–∞ (–∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ 1)
      business_name,
      brand_name,
      category, // restaurant/store
      address,
      location, // {lat, lng}
      floor_unit, // —ç—Ç–∞–∂/–ª—é–∫—Å (–∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏)
      whatsapp_consent
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const requiredFields = {
      first_name,
      last_name,
      email,
      password,
      confirm_password,
      phone,
      business_name,
      category,
      address,
      location
    };

    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      return res.status(400).json({
        result: false,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
      });
    }

    if (password !== confirm_password) {
      return res.status(400).json({
        result: false,
        message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
      });
    }

    if (!['restaurant', 'store'].includes(category)) {
      return res.status(400).json({
        result: false,
        message: "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'"
      });
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
    const result = await registerPartnerWithInitialRequest({
      first_name,
      last_name,
      email,
      password,
      phone,
      business_name,
      brand_name,
      category,
      address,
      location,
      floor_unit,
      whatsapp_consent,
      registration_ip: req.ip,
      user_agent: req.get('User-Agent')
    });

    res.status(201).json({
      result: true,
      message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
      user: result.user,
      request: result.request,
      token: result.token,
      next_steps: [
        "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
      ]
    });

  } catch (error) {
    console.error('Register partner error:', error);
    
    if (error.statusCode === 400) {
      return res.status(400).json({
        result: false,
        message: error.message
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
    });
  }
};

/**
 * ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
 */
export const loginPartnerUser = async (req, res) => {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const { loginPartner } = await import('../services/partner.service.js');
    
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        result: false,
        message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    const result = await loginPartner(email, password);

    res.status(200).json({
      result: true,
      message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
      user: result.user,
      token: result.token
    });

  } catch (error) {
    console.error('Login partner error:', error);
    
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') || error.message.includes('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')) {
      return res.status(401).json({
        result: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
      });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    });
  }
};

/**
 * üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
 */
export const getDashboardStatus = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const status = await getPartnerDashboardStatus(user._id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç—É—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω",
      dashboard: status
    });

  } catch (error) {
    console.error('Get dashboard status error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞"
    });
  }
};

/**
 * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export const getRequestStatus = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
      });
    }

    const status = await getPartnerDashboardStatus(user._id);

    res.status(200).json({
      result: true,
      message: "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω",
      status
    });

  } catch (error) {
    console.error('Get request status error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
    });
  }
};

/**
 * ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏
 */
export const checkFeatureAccess = async (req, res) => {
  try {
    const { user } = req;
    const { feature } = req.params;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    const access = await checkPartnerAccess(user._id, feature);

    res.status(200).json({
      result: true,
      feature,
      access
    });

  } catch (error) {
    console.error('Check feature access error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"
    });
  }
};

/**
 * ‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–∞–Ω–Ω—ã–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 2)
 * –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –û–î–û–ë–†–ï–ù–ò–Ø –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
export const submitPartnerLegalInfo = async (req, res) => {
  try {
    const { request_id } = req.params;
    const {
      // –î–∞–Ω–Ω—ã–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 2
      legal_name, // –ù–∞–∑–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
      siret_number, // SIRET –Ω–æ–º–µ—Ä (14 —Ü–∏—Ñ—Ä)
      legal_form, // SASU, SARL, etc.
      business_address, // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å
      contact_person, // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
      contact_phone, // –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏
      bank_details, // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      tax_number, // –ù–∞–ª–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä
      additional_info // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = {
      legal_name,
      siret_number,
      legal_form,
      business_address,
      contact_person,
      contact_phone
    };

    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      return res.status(400).json({
        result: false,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ–¥–æ–±—Ä–µ–Ω–∞
    const request = await InitialPartnerRequest.findById(request_id);
    
    if (!request) {
      return res.status(404).json({
        result: false,
        message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      });
    }

    if (request.status !== 'approved') {
      return res.status(400).json({
        result: false,
        message: "–°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –ø–æ–¥–∞–Ω—ã
    const existingLegalInfo = await PartnerLegalInfo.findOne({ 
      partner_request_id: request_id 
    });

    if (existingLegalInfo) {
      return res.status(400).json({
        result: false,
        message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–¥–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏"
      });
    }

    // –°–æ–∑–¥–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const legalInfo = new PartnerLegalInfo({
      user_id: request.user_id,
      partner_request_id: request_id,
      legal_name,
      siret_number,
      legal_form,
      business_address,
      contact_person,
      contact_phone,
      bank_details,
      tax_number,
      additional_info,
      verification_status: 'pending',
      submitted_at: new Date()
    });

    await legalInfo.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    request.status = 'under_review';
    await request.save();

    res.status(201).json({
      result: true,
      message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
      legal_info_id: legalInfo._id,
      request_status: request.status,
      next_step: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–¥–æ–±—Ä–∏—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
    });

  } catch (error) {
    console.error('Error in submitPartnerLegalInfo:', error);
    
    if (error.code === 11000) {
      const duplicateField = Object.keys(error.keyPattern)[0];
      let message = "–î–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è";
      if (duplicateField.includes('siret_number')) {
        message = "SIRET –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ";
      }
      return res.status(400).json({ result: false, message });
    }
    
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
      error: error.message
    });
  }
};

/**
 * ‚úÖ –£–°–¢–ê–†–ï–õ–û: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏
 * –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ registerPartner, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export const createInitialPartnerRequest = async (req, res) => {
  return res.status(400).json({
    result: false,
    message: "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/partners/register –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
    new_endpoint: "POST /api/partners/register"
  });
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
 */
export const getPartnerProfileData = async (req, res) => {
  try {
    const { user } = req;

    if (!user || user.role !== 'partner') {
      return res.status(403).json({
        result: false,
        message: "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é
    const access = await checkPartnerAccess(user._id, 'profile_viewing');
    
    if (!access.has_access) {
      return res.status(403).json({
        result: false,
        message: access.reason || "–ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
      });
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const { getPartnerById } = await import('../services/partner.service.js');
    const partnerData = await getPartnerById(user._id);

    if (!partnerData || !partnerData.profile) {
      return res.status(404).json({
        result: false,
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω"
      });
    }

    res.status(200).json({
      result: true,
      message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω",
      user: {
        id: partnerData._id,
        email: partnerData.email,
        role: partnerData.role,
        is_email_verified: partnerData.is_email_verified
      },
      partner: partnerData.profile
    });

  } catch (error) {
    console.error('Get partner profile error:', error);
    res.status(500).json({
      result: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
    });
  }
};

// ================ –≠–ö–°–ü–û–†–¢ ================
export default {
  // ‚úÖ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–ê–†–¢–ù–ï–†–û–í (–ø–æ—à–∞–≥–æ–≤–æ)
  
  // 1Ô∏è‚É£ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
  registerPartner, // –°–æ–∑–¥–∞–µ—Ç User + InitialPartnerRequest 
  loginPartnerUser, // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  
  // 2Ô∏è‚É£ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
  getDashboardStatus, // –°—Ç–∞—Ç—É—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
  getRequestStatus, // –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
  checkFeatureAccess, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
  
  // 3Ô∏è‚É£ –≠–¢–ê–ü–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
  submitPartnerLegalInfo, // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
  getPartnerProfileData, // –ü—Ä–æ—Ñ–∏–ª—å (–ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
  
  // 4Ô∏è‚É£ –£–°–¢–ê–†–ï–í–®–ò–ï
  createInitialPartnerRequest // DEPRECATED
  
  // üîÑ –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ï–¢–û–î–´ –î–û–ë–ê–í–ò–ú –ü–û–ó–ñ–ï
};