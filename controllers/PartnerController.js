// ================ controllers/PartnerController.js (–° META) ================
import { User, PartnerProfile, InitialPartnerRequest, PartnerLegalInfo } from '../models/index.js';
import Meta from '../models/Meta.model.js';
import { createPartnerAccount, loginPartner } from '../services/partner.auth.service.js';
import { cryptoString, decryptString } from '../utils/crypto.js';
import { hashMeta } from '../utils/hash.js';
import mongoose from 'mongoose';

/**
 * –≠–¢–ê–ü 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * –°–æ–∑–¥–∞–µ—Ç User + Meta + InitialPartnerRequest
 */
const registerPartner = async (req, res) => {
    try {
        const partnerData = req.body;
        
        console.log('üîç REGISTER PARTNER - Start:', {
            email: partnerData.email,
            business_name: partnerData.business_name,
            category: partnerData.category
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const requiredFields = [
            'first_name', 'last_name', 'email', 'password', 'confirm_password',
            'phone', 'business_name', 'category', 'address', 'location'
        ];

        const missingFields = requiredFields.filter(field => !partnerData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π
        if (partnerData.password !== partnerData.confirm_password) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!['restaurant', 'store'].includes(partnerData.category)) {
            return res.status(400).json({
                result: false,
                message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Meta
        const normalizedEmail = partnerData.email.toLowerCase().trim();
        const existingMeta = await Meta.findByEmailAndRole(hashMeta(normalizedEmail), 'partner');
        
        if (existingMeta) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º IP –∏ User-Agent
        partnerData.registration_ip = req.ip;
        partnerData.user_agent = req.get('User-Agent');

        // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const result = await createPartnerAccount(partnerData);

        if (!result.isNewPartner) {
            return res.status(400).json({
                result: false,
                message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            });
        }

        console.log('‚úÖ REGISTER PARTNER - Success:', {
            user_id: result.user._id,
            request_id: result.request._id,
            meta_id: result.meta._id,
            has_token: !!result.token
        });

        res.status(201).json({
            result: true,
            message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –ø–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            user: {
                id: result.user._id,
                email: result.user.email,
                role: result.user.role
            },
            request: {
                id: result.request._id,
                status: result.request.status,
                business_name: result.request.business_data.business_name
            },
            token: result.token,
            next_step: {
                action: "submit_legal_info",
                endpoint: `POST /api/partners/legal-info/${result.request._id}`,
                description: "–ü–æ–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    }
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const loginPartnerController = async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log('üîç LOGIN PARTNER - Start:', {
            email: email
        });

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        const { token, partner } = await loginPartner({ email, password });

        console.log('‚úÖ LOGIN PARTNER - Success:', {
            partner_id: partner.id,
            has_profile: !!partner.profile
        });

        res.status(200).json({
            result: true,
            message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            token,
            partner
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        res.status(error.statusCode || 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        });
    }
};

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const verifyPartner = async (req, res) => {
    try {
        const { partner, metaInfo } = req;

        if (!partner) {
            return res.status(404).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const partnerProfile = await PartnerProfile.findOne({ user_id: partner._id });
        const partnerRequest = await InitialPartnerRequest.findOne({ user_id: partner._id });

        res.status(200).json({
            result: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
            partner: {
                id: partner._id,
                email: partner.email,
                role: partner.role,
                is_active: partner.is_active
            },
            profile: partnerProfile,
            request: partnerRequest ? {
                id: partnerRequest._id,
                status: partnerRequest.status,
                stage: partnerRequest.workflow_stage
            } : null
        });

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            error: error.message
        });
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const getProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç GET PROFILE - Start:', {
            partner_id: partner._id,
            requested_id: id
        });

        // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID
        let targetPartnerId = partner._id;
        if (id && mongoose.Types.ObjectId.isValid(id)) {
            targetPartnerId = id;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        if (targetPartnerId.toString() !== partner._id.toString()) {
            return res.status(403).json({
                result: false,
                message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
            });
        }

        const partnerProfile = await PartnerProfile.findOne({ 
            user_id: targetPartnerId 
        });

        if (!partnerProfile) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            });
        }

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω",
            profile: partnerProfile
        });

    } catch (error) {
        console.error('üö® GET PROFILE - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
            error: error.message
        });
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const updateProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;
        const updateData = req.body;

        console.log('üîç UPDATE PROFILE - Start:', {
            partner_id: partner._id,
            profile_id: id,
            fields: Object.keys(updateData)
        });

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Ñ–∏–ª—è"
            });
        }

        const partnerProfile = await PartnerProfile.findOne({
            _id: id,
            user_id: partner._id
        });

        if (!partnerProfile) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            });
        }

        // –ó–∞–ø—Ä–µ—â–∞–µ–º –º–µ–Ω—è—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        const protectedFields = ['user_id', 'status', 'is_active', 'is_approved'];
        protectedFields.forEach(field => delete updateData[field]);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        Object.assign(partnerProfile, updateData);
        await partnerProfile.save();

        console.log('‚úÖ UPDATE PROFILE - Success');

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
            profile: partnerProfile
        });

    } catch (error) {
        console.error('üö® UPDATE PROFILE - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
            error: error.message
        });
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã)
 */
const deletePartner = async (req, res) => {
    const session = await mongoose.startSession();
    
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç DELETE PARTNER - Start:', {
            requester_id: partner._id,
            target_id: id
        });

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            });
        }

        // –ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è
        if (id !== partner._id.toString()) {
            return res.status(403).json({
                result: false,
                message: "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç"
            });
        }

        await session.withTransaction(async () => {
            // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const partnerToDelete = await User.findById(id).session(session);
            
            if (!partnerToDelete) {
                throw new Error("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            // 2. –£–¥–∞–ª—è–µ–º Meta –∑–∞–ø–∏—Å—å
            await Meta.deleteOne({ partner: id }).session(session);
            console.log('‚úÖ Meta –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');

            // 3. –£–¥–∞–ª—è–µ–º InitialPartnerRequest
            await InitialPartnerRequest.deleteOne({ user_id: id }).session(session);
            console.log('‚úÖ –ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞');

            // 4. –£–¥–∞–ª—è–µ–º PartnerLegalInfo
            await PartnerLegalInfo.deleteOne({ user_id: id }).session(session);
            console.log('‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

            // 5. –£–¥–∞–ª—è–µ–º PartnerProfile
            await PartnerProfile.deleteOne({ user_id: id }).session(session);
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É–¥–∞–ª–µ–Ω');

            // 6. –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await User.findByIdAndDelete(id).session(session);
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
        });

        console.log('‚úÖ DELETE PARTNER - Success');

        res.status(200).json({
            result: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            deletedPartner: {
                id: id,
                email: partner.email
            }
        });

    } catch (error) {
        console.error('üö® DELETE PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    } finally {
        await session.endSession();
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 */
const getDashboardStatus = async (req, res) => {
    try {
        const { partner } = req;

        console.log('üîç GET DASHBOARD - Start:', {
            partner_id: partner._id
        });

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const partnerRequest = await InitialPartnerRequest.findOne({ 
            user_id: partner._id 
        });
        
        const legalInfo = await PartnerLegalInfo.findOne({ 
            user_id: partner._id 
        });
        
        const partnerProfile = await PartnerProfile.findOne({ 
            user_id: partner._id 
        });

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
        let currentStage = 1;
        let nextAction = null;
        let availableFeatures = [];

        if (!partnerRequest) {
            currentStage = 0;
            nextAction = {
                action: "register",
                description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä"
            };
        } else if (partnerRequest.status === 'pending') {
            currentStage = 1;
            nextAction = {
                action: "wait_approval",
                description: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            };
        } else if (partnerRequest.status === 'approved' && !legalInfo) {
            currentStage = 2;
            nextAction = {
                action: "submit_legal_info",
                endpoint: `POST /api/partners/legal-info/${partnerRequest._id}`,
                description: "–ü–æ–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            };
            availableFeatures = ['dashboard', 'personal_data'];
        } else if (legalInfo && legalInfo.verification_status === 'pending') {
            currentStage = 3;
            nextAction = {
                action: "wait_legal_verification",
                description: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
            };
            availableFeatures = ['dashboard', 'personal_data'];
        } else if (legalInfo && legalInfo.verification_status === 'verified' && !partnerProfile) {
            currentStage = 3.5;
            nextAction = {
                action: "profile_creation",
                description: "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            };
            availableFeatures = ['dashboard', 'personal_data'];
        } else if (partnerProfile && partnerProfile.status === 'draft') {
            currentStage = 4;
            nextAction = {
                action: "fill_profile",
                description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –º–µ–Ω—é"
            };
            availableFeatures = ['dashboard', 'personal_data', 'profile', 'menu'];
        } else if (partnerProfile && partnerProfile.status === 'pending_approval') {
            currentStage = 5;
            nextAction = {
                action: "wait_content_approval",
                description: "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            };
            availableFeatures = ['dashboard', 'personal_data', 'profile', 'menu'];
        } else if (partnerProfile && partnerProfile.status === 'active') {
            currentStage = 6;
            nextAction = {
                action: "manage_business",
                description: "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º –±–∏–∑–Ω–µ—Å–æ–º"
            };
            availableFeatures = ['dashboard', 'personal_data', 'profile', 'menu', 'orders', 'analytics'];
        }

        console.log('‚úÖ GET DASHBOARD - Success:', {
            current_stage: currentStage,
            available_features: availableFeatures
        });

        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω",
            dashboard: {
                current_stage: currentStage,
                stage_name: getStageNameByNumber(currentStage),
                next_action: nextAction,
                available_features: availableFeatures,
                partner_request: partnerRequest ? {
                    id: partnerRequest._id,
                    status: partnerRequest.status,
                    created_at: partnerRequest.createdAt
                } : null,
                legal_info: legalInfo ? {
                    id: legalInfo._id,
                    status: legalInfo.verification_status,
                    submitted_at: legalInfo.createdAt
                } : null,
                profile: partnerProfile ? {
                    id: partnerProfile._id,
                    status: partnerProfile.status,
                    is_active: partnerProfile.is_active
                } : null
            }
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞",
            error: error.message
        });
    }
};

/**
 * –≠–¢–ê–ü 2: –ü–æ–¥–∞—á–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
const submitLegalInfo = async (req, res) => {
    try {
        const { partner, partnerRequest } = req;
        const legalData = req.body;

        console.log('üîç SUBMIT LEGAL INFO - Start:', {
            partner_id: partner._id,
            request_id: partnerRequest._id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        if (partnerRequest.status !== 'approved') {
            return res.status(403).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–¥–∞–Ω—ã –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        const existingLegal = await PartnerLegalInfo.findOne({ 
            user_id: partner._id 
        });

        if (existingLegal) {
            return res.status(400).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –ø–æ–¥–∞–Ω—ã",
                legal_status: existingLegal.verification_status
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const requiredFields = [
            'legal_name', 'siret_number', 'legal_form', 
            'business_address', 'bank_details'
        ];

        const missingFields = requiredFields.filter(field => !legalData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const newLegalInfo = new PartnerLegalInfo({
            user_id: partner._id,
            partner_request_id: partnerRequest._id,
            legal_data: {
                legal_name: cryptoString(legalData.legal_name),
                siret_number: cryptoString(legalData.siret_number),
                legal_form: legalData.legal_form,
                business_address: cryptoString(legalData.business_address),
                bank_details: cryptoString(JSON.stringify(legalData.bank_details)),
                tax_number: legalData.tax_number ? cryptoString(legalData.tax_number) : null,
                contact_person: legalData.contact_person ? cryptoString(legalData.contact_person) : null,
                contact_phone: legalData.contact_phone ? cryptoString(legalData.contact_phone) : null
            },
            verification_status: 'pending',
            security_info: {
                submitted_ip: req.ip,
                user_agent: req.get('User-Agent')
            }
        });

        await newLegalInfo.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        partnerRequest.status = 'under_review';
        partnerRequest.workflow_stage = 3;
        await partnerRequest.save();

        console.log('‚úÖ SUBMIT LEGAL INFO - Success:', {
            legal_id: newLegalInfo._id
        });

        res.status(201).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–∞–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
            legal_info: {
                id: newLegalInfo._id,
                status: newLegalInfo.verification_status
            },
            next_step: {
                action: "wait_verification",
                description: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            }
        });

    } catch (error) {
        console.error('üö® SUBMIT LEGAL INFO - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

// ================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================

function getStageNameByNumber(stage) {
    const stages = {
        0: "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
        1: "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞",
        2: "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
        3: "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
        3.5: "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
        4: "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        5: "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
        6: "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä"
    };
    return stages[stage] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø";
}

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getProfile,
    updateProfile,
    deletePartner,
    getDashboardStatus,
    submitLegalInfo
};