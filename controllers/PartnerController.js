// controllers/PartnerController.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ù–¢–†–û–õ–õ–ï–† –ë–ï–ó –∏–º–ø–æ—Ä—Ç–∞
import { createPartnerAccount, loginPartner, checkPartnerExists } from '../services/Partner/partner.auth.service.js';
import * as partnerService from '../services/Partner/partner.service.js';
import { PartnerLegalInfo, InitialPartnerRequest } from '../models/index.js';
import { cryptoString, decryptString } from '../utils/crypto.js';
import mongoose from 'mongoose';

/**
 * üó∫Ô∏è –í–°–¢–†–û–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø
 * (–∫–æ–ø–∏—è –∏–∑ address.service.js –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º)
 */
const internalMockGeocode = (address) => {
  const addressLower = address.toLowerCase();
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const mockAddresses = {
    'vieux port marseille': { lat: 43.2951, lng: 5.3739, zone: 1 },
    'notre dame de la garde': { lat: 43.2842, lng: 5.3714, zone: 1 },
    'canebi√®re marseille': { lat: 43.2946, lng: 5.3758, zone: 1 },
    'rue de la r√©publique': { lat: 43.296482, lng: 5.36978, zone: 1 },
    'marseille': { lat: 43.296482, lng: 5.36978, zone: 1 },
    'ch√¢teau d\'if': { lat: 43.2799, lng: 5.3256, zone: 2 },
    'calanques marseille': { lat: 43.2109, lng: 5.4414, zone: 2 },
    'a√©roport marseille': { lat: 43.4393, lng: 5.2214, zone: 2 },
    'la joliette': { lat: 43.3067, lng: 5.3647, zone: 1 },
    'cours julien': { lat: 43.2929, lng: 5.3832, zone: 1 },
    'prado marseille': { lat: 43.2580, lng: 5.3927, zone: 1 },
    'castellane': { lat: 43.2884, lng: 5.3984, zone: 1 }
  };

  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const [mockAddr, coords] of Object.entries(mockAddresses)) {
    if (addressLower.includes(mockAddr) || mockAddr.includes(addressLower)) {
      return {
        success: true,
        coordinates: coords,
        formatted_address: address,
        zone: coords.zone
      };
    }
  }

  // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ mock –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–∞—Ä—Å–µ–ª—è
  const randomLat = 43.295 + (Math.random() - 0.5) * 0.02;
  const randomLng = 5.375 + (Math.random() - 0.5) * 0.02;
  
  return {
    success: true,
    coordinates: { lat: randomLat, lng: randomLng, zone: 1 },
    formatted_address: address,
    zone: 1,
    mock_warning: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
  };
};

/**
 * üè™ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * POST /api/partners/register
 */
const registerPartner = async (req, res) => {
    try {
        const partnerData = req.body;
        const {
            first_name, last_name, email, password, confirm_password, phone,
            business_name, brand_name, category, address, floor_unit,
            latitude, longitude, whatsapp_consent
        } = partnerData;
        
        console.log('üîç REGISTER PARTNER - Start:', {
            email: email,
            business_name: business_name,
            brand_name: brand_name,
            category: category,
            has_address: !!address,
            has_coordinates: !!(latitude && longitude)
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ë–ï–ó latitude/longitude
        const requiredFields = [
            'first_name', 'last_name', 'email', 'password', 'confirm_password', 'phone',
            'address', 'business_name', 'brand_name', 'category', 'whatsapp_consent'
        ];

        const missingFields = requiredFields.filter(field => !partnerData[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                result: false,
                message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const frenchPhoneRegex = /^(\+33|0)[1-9](\d{8})$/;
        const cleanPhone = phone.replace(/\s+/g, '');
        
        if (!frenchPhoneRegex.test(cleanPhone)) {
            return res.status(400).json({
                result: false,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º –Ω–æ–º–µ—Ä–æ–º",
                format_examples: [
                    "+33 1 42 34 56 78",
                    "01 42 34 56 78",
                    "+33 6 12 34 56 78"
                ],
                provided_phone: phone
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
        if (password !== confirm_password) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            });
        }

        if (password.length < 6) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"
            });
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –¢–û–õ–¨–ö–û restaurant –∏–ª–∏ store
        if (!['restaurant', 'store'].includes(category)) {
            return res.status(400).json({
                result: false,
                message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'restaurant' –∏–ª–∏ 'store'",
                allowed_categories: ['restaurant', 'store'],
                provided_category: category
            });
        }

        // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ê–≤—Ç–æ–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        let coordinates;
        let addressString = '';

        if (typeof address === 'object') {
            // –ï—Å–ª–∏ address - –æ–±—ä–µ–∫—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            addressString = `${address.street || ''}, ${address.city || ''}, ${address.postal_code || ''}, ${address.country || ''}`.trim();
        } else {
            // –ï—Å–ª–∏ address - —Å—Ç—Ä–æ–∫–∞
            addressString = address.toString();
        }

        if (latitude && longitude) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if (typeof latitude !== 'number' || typeof longitude !== 'number') {
                return res.status(400).json({
                    result: false,
                    message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –§—Ä–∞–Ω—Ü–∏–∏
            if (latitude < 41.0 || latitude > 51.5 || longitude < -5.5 || longitude > 9.6) {
                return res.status(400).json({
                    result: false,
                    message: "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –§—Ä–∞–Ω—Ü–∏–∏"
                });
            }

            coordinates = { lat: latitude, lng: longitude };
        } else {
            // ‚úÖ –ê–í–¢–û–ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–ï –ê–î–†–ï–°–ê
            console.log('üó∫Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞:', addressString);
            
            const geocodeResult = internalMockGeocode(addressString);
            
            if (!geocodeResult.success) {
                return res.status(400).json({
                    result: false,
                    message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞",
                    provided_address: addressString,
                    suggestion: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é"
                });
            }

            coordinates = geocodeResult.coordinates;
            
            console.log('‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', {
                address: addressString,
                coordinates: coordinates,
                zone: geocodeResult.zone
            });
        }

        // ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
        const serviceData = {
            // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            first_name,
            last_name, 
            email,
            password,
            phone: cleanPhone,

            // –ë–∏–∑–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ
            business_name,
            brand_name,
            category,
            address: addressString, // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
            floor_unit: floor_unit || null,

            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê LOCATION
            location: {
                type: 'Point',
                coordinates: [coordinates.lng, coordinates.lat] // [lng, lat] –¥–ª—è MongoDB
            },

            // –°–æ–≥–ª–∞—Å–∏–µ
            whatsapp_consent
        };

        console.log('‚úÖ VALIDATION COMPLETED - Calling service:', {
            email: serviceData.email,
            phone: serviceData.phone,
            location: serviceData.location,
            whatsapp_consent: serviceData.whatsapp_consent
        });

        // –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        const result = await createPartnerAccount(serviceData);

        res.status(201).json({
            result: true,
            message: "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
            data: {
                user_id: result.user_id,
                request_id: result.request_id,
                next_step: "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                coordinates_used: coordinates,
                geocoding_info: !latitude && !longitude ? "–ê–¥—Ä–µ—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω" : "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
            }
        });

    } catch (error) {
        console.error('üö® REGISTER PARTNER - Error:', error);
        
        const statusCode = error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') ? 409 :
                          error.message.includes('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è') ? 400 :
                          error.message.includes('–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ') ? 422 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞'
        });
    }
};

/**
 * üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–ê–†–¢–ù–ï–†–ê
 * POST /api/partners/login
 */
const loginPartnerController = async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({
                result: false,
                message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        console.log('üîç LOGIN PARTNER - Start:', { email });

        const result = await loginPartner(email, password);

        res.status(200).json({
            result: true,
            message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
            ...result
        });

    } catch (error) {
        console.error('üö® LOGIN PARTNER - Error:', error);
        
        const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                          error.message.includes('–Ω–µ–≤–µ—Ä–Ω—ã–π') ? 401 :
                          error.message.includes('–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω') ? 403 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message
        });
    }
};

/**
 * ‚úÖ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê –ü–ê–†–¢–ù–ï–†–ê
 * GET /api/partners/verify
 */
const verifyPartner = async (req, res) => {
    try {
        const { partner } = req;

        console.log('üîç VERIFY PARTNER - Start:', {
            partner_id: partner._id,
            partner_email: partner.email
        });

        res.status(200).json({
            result: true,
            message: "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
            partner: {
                id: partner._id,
                email: partner.email,
                role: partner.role,
                is_active: partner.is_active
            }
        });

    } catch (error) {
        console.error('üö® VERIFY PARTNER - Error:', error);
        res.status(401).json({
            result: false,
            message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
        });
    }
};

/**
 * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê DASHBOARD
 * GET /api/partners/dashboard
 */
const getDashboardStatus = async (req, res) => {
    try {
        const { partner } = req;

        console.log('üîç GET DASHBOARD STATUS - Start:', {
            partner_id: partner._id
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const dashboardData = await partnerService.getPartnerDashboardData(partner._id);

        res.status(200).json({
            result: true,
            message: "–°—Ç–∞—Ç—É—Å dashboard –ø–æ–ª—É—á–µ–Ω",
            dashboard: dashboardData
        });

    } catch (error) {
        console.error('üö® GET DASHBOARD STATUS - Error:', error);
        res.status(500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö dashboard"
        });
    }
};

/**
 * üìÑ –ü–û–î–ê–ß–ê –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í
 * POST /api/partners/legal-info/:request_id
 */
const submitLegalInfo = async (req, res) => {
    try {
        const { partner } = req;
        const { request_id } = req.params;
        const legalData = req.body;

        console.log('üîç SUBMIT LEGAL INFO - Start:', {
            partner_id: partner._id,
            request_id: request_id,
            has_siret: !!legalData.siret_number
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const result = await partnerService.submitPartnerLegalInfo(partner._id, request_id, legalData);

        res.status(201).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–∞–Ω—ã",
            legal_info_id: result.legal_info_id,
            next_step: "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        });

    } catch (error) {
        console.error('üö® SUBMIT LEGAL INFO - Error:', error);
        
        const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 :
                          error.message.includes('—É–∂–µ –ø–æ–¥–∞–Ω') ? 409 :
                          error.message.includes('–≤–∞–ª–∏–¥–∞—Ü–∏—è') ? 400 : 500;

        res.status(statusCode).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        });
    }
};

/**
 * üë§ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–ê–†–¢–ù–ï–†–ê
 * GET /api/partners/profile
 * GET /api/partners/profile/:id
 */
const getProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        const profileId = id || partner._id;

        console.log('üîç GET PROFILE - Start:', {
            requester_id: partner._id,
            target_profile_id: profileId
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const profileData = await partnerService.getPartnerProfile(profileId);

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω",
            profile: profileData
        });

    } catch (error) {
        console.error('üö® GET PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * ‚úèÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–ê–†–¢–ù–ï–†–ê
 * PUT /api/partners/profile/:id
 */
const updateProfile = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;
        const updateData = req.body;

        console.log('üîç UPDATE PROFILE - Start:', {
            partner_id: partner._id,
            profile_id: id,
            fields_to_update: Object.keys(updateData)
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const updatedProfile = await partnerService.updatePartnerProfile(partner._id, updateData);

        res.status(200).json({
            result: true,
            message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
            profile: updatedProfile
        });

    } catch (error) {
        console.error('üö® UPDATE PROFILE - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        });
    }
};

/**
 * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–ê–†–¢–ù–ï–†–ê
 * DELETE /api/partners/profile/:id
 */
const deletePartner = async (req, res) => {
    try {
        const { partner } = req;
        const { id } = req.params;

        console.log('üîç DELETE PARTNER - Start:', {
            partner_id: partner._id,
            target_id: id
        });

        // ‚úÖ –í–°–Ø –õ–û–ì–ò–ö–ê –í –°–ï–†–í–ò–°–ï
        const result = await partnerService.deletePartnerAccount(id, partner._id);

        res.status(200).json({
            result: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä —É–¥–∞–ª–µ–Ω",
            deleted_partner_id: result.deletedPartnerId
        });

    } catch (error) {
        console.error('üö® DELETE PARTNER - Error:', error);
        res.status(error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500).json({
            result: false,
            message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
        });
    }
};

// ================ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ================

export {
    registerPartner,
    loginPartnerController,
    verifyPartner,
    getDashboardStatus,
    getProfile,
    updateProfile,
    deletePartner,
    submitLegalInfo
};