// ================ controllers/AdminPartnerController.js ================
import { InitialPartnerRequest, PartnerLegalInfo, PartnerProfile, Product } from '../models/index.js';
import { 
    updatePartnerRequestStatus,
    updateLegalInfoStatus,
    createPartnerProfile,
    publishPartnerProfile,
    getPartnerRequests,
    getPartnerRequestDetails
} from '../services/Partner/admin.partner.service.js';
import * as partnerService from '../services/Partner/partner.service.js';
import { decryptString, cryptoString } from '../utils/crypto.js';

import mongoose from 'mongoose';

/**
 * 1. –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * POST /api/admin/partners/requests/:id/approve
 */
const approvePartnerRequest = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { approval_notes } = req.body;

        console.log('üîç APPROVE REQUEST - Start:', {
            request_id: id,
            admin_id: admin._id,
            admin_role: admin.role
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ manager –∏ owner)
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        const request = await InitialPartnerRequest.findById(id);
        
        if (!request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (request.status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const updateData = {
            status: 'approved',
            workflow_stage: 2,
            approved_by: admin._id,
            approved_at: new Date(),
            approval_notes: approval_notes || '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
        };

        const updatedRequest = await updatePartnerRequestStatus(id, updateData);

        console.log('‚úÖ APPROVE REQUEST - Success:', {
            request_id: updatedRequest._id,
            new_status: updatedRequest.status
        });

        res.status(200).json({
            result: true,
            message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
            request: {
                id: updatedRequest._id,
                status: updatedRequest.status,
                workflow_stage: updatedRequest.workflow_stage
            },
            next_step: {
                action: "submit_legal_info",
                description: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            }
        });

    } catch (error) {
        console.error('üö® APPROVE REQUEST - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
            error: error.message
        });
    }
};

/**
 * 2. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * POST /api/admin/partners/requests/:id/reject
 */
const rejectPartnerRequest = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { rejection_reason } = req.body;

        console.log('üîç REJECT REQUEST - Start:', {
            request_id: id,
            admin_id: admin._id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!rejection_reason) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        const request = await InitialPartnerRequest.findById(id);
        
        if (!request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (request.status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const updateData = {
            status: 'rejected',
            workflow_stage: 0,
            rejected_by: admin._id,
            rejected_at: new Date(),
            rejection_reason: rejection_reason
        };

        const updatedRequest = await updatePartnerRequestStatus(id, updateData);

        console.log('‚úÖ REJECT REQUEST - Success');

        res.status(200).json({
            result: true,
            message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            request: {
                id: updatedRequest._id,
                status: updatedRequest.status,
                rejection_reason: updatedRequest.rejection_reason
            }
        });

    } catch (error) {
        console.error('üö® REJECT REQUEST - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
            error: error.message
        });
    }
};


// controllers/AdminPartnerController.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

// ============ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AdminPartnerController.js - approveLegalInfo ============

/**
 * –≠–¢–ê–ü 4: –û–¥–æ–±—Ä–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * POST /api/admin/partners/legal/:id/approve
 * ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö + —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è + –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π
 */
const approveLegalInfo = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { approval_notes } = req.body;

        console.log('üîç APPROVE LEGAL - Start:', {
            legal_id: id,
            admin_id: admin._id,
            admin_role: admin.role
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
        const legalInfo = await PartnerLegalInfo.findById(id)
            .populate('user_id')
            .populate('partner_request_id');
        
        if (!legalInfo) {
            return res.status(404).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            });
        }

        console.log('üîç LEGAL INFO LOADED:', {
            id: legalInfo._id,
            verification_status: legalInfo.verification_status,
            has_user: !!legalInfo.user_id,
            has_request: !!legalInfo.partner_request_id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if (legalInfo.verification_status === 'verified') {
            const existingProfile = await PartnerProfile.findOne({ 
                user_id: legalInfo.user_id._id 
            });

            if (existingProfile) {
                return res.status(400).json({
                    result: false,
                    message: "–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã –∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω",
                    status: legalInfo.verification_status,
                    profile_id: existingProfile._id
                });
            }
        } else if (legalInfo.verification_status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å—Ç–∞—Ç—É—Å–µ: ${legalInfo.verification_status}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
        const existingProfile = await PartnerProfile.findOne({ 
            user_id: legalInfo.user_id._id 
        });

        if (existingProfile) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω",
                profile_id: existingProfile._id
            });
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        const request = legalInfo.partner_request_id;
        
        console.log('üîç DECRYPTING DATA - Start');

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏
        const decryptedPersonalData = {
            first_name: decryptString(request.personal_data.first_name),
            last_name: decryptString(request.personal_data.last_name),
            email: decryptString(request.personal_data.email),
            phone: decryptString(request.personal_data.phone)
        };

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –±–∏–∑–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏
        const decryptedBusinessData = {
            address: decryptString(request.business_data.address),
            floor_unit: request.business_data.floor_unit ? 
                decryptString(request.business_data.floor_unit) : null
        };

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        const decryptedLegalData = {
            legal_name: decryptString(legalInfo.legal_data.legal_name),
            siret_number: decryptString(legalInfo.legal_data.siret_number),
            legal_address: decryptString(legalInfo.legal_data.legal_address),
            legal_representative: decryptString(legalInfo.legal_data.legal_representative),
            tva_number: legalInfo.legal_data.tva_number ? 
                decryptString(legalInfo.legal_data.tva_number) : null
        };

        console.log('‚úÖ DATA DECRYPTED:', {
            personal: {
                has_first_name: !!decryptedPersonalData.first_name,
                has_last_name: !!decryptedPersonalData.last_name,
                has_email: !!decryptedPersonalData.email,
                has_phone: !!decryptedPersonalData.phone
            },
            business: {
                has_address: !!decryptedBusinessData.address,
                has_floor_unit: !!decryptedBusinessData.floor_unit
            },
            legal: {
                has_legal_name: !!decryptedLegalData.legal_name,
                has_siret: !!decryptedLegalData.siret_number,
                has_legal_address: !!decryptedLegalData.legal_address
            }
        });

        // ‚úÖ –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô PartnerProfile
        const requiredProfileFields = {
            user_id: legalInfo.user_id._id,
            business_name: request.business_data.business_name,
            brand_name: request.business_data.brand_name,
            category: request.business_data.category,
            address: decryptedBusinessData.address,
            phone: decryptedPersonalData.phone,
            email: decryptedPersonalData.email,
            owner_name: decryptedPersonalData.first_name,
            owner_surname: decryptedPersonalData.last_name,
            location: request.business_data.location
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        const missingProfileFields = Object.entries(requiredProfileFields)
            .filter(([key, value]) => !value)
            .map(([key]) => key);

        if (missingProfileFields.length > 0) {
            console.error('‚ùå MISSING PROFILE FIELDS:', missingProfileFields);
            return res.status(400).json({
                result: false,
                message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${missingProfileFields.join(', ')}`,
                required_fields: Object.keys(requiredProfileFields),
                missing_fields: missingProfileFields
            });
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ –í–°–ï–ú–ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        const profileData = {
            user_id: legalInfo.user_id._id,
            
            // ‚úÖ –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ë–ò–ó–ù–ï–°–ê (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
            business_name: request.business_data.business_name, // –ù–ï –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
            brand_name: request.business_data.brand_name || request.business_data.business_name,
            category: request.business_data.category, // 'restaurant' –∏–ª–∏ 'store'
            description: '', // –ó–∞–ø–æ–ª–Ω–∏—Ç –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–∑–∂–µ
            
            // ‚úÖ –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ) - –ü–ï–†–ï–®–ò–§–†–û–í–´–í–ê–ï–ú –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            address: cryptoString(decryptedBusinessData.address),
            phone: cryptoString(decryptedPersonalData.phone),
            email: cryptoString(decryptedPersonalData.email),
            owner_name: cryptoString(decryptedPersonalData.first_name),
            owner_surname: cryptoString(decryptedPersonalData.last_name),
            
            // ‚úÖ –ì–ï–û–õ–û–ö–ê–¶–ò–Ø (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è) - –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –∑–∞—è–≤–∫–∏
            location: {
                type: 'Point',
                coordinates: request.business_data.location.coordinates // [longitude, latitude]
            },
            
            // ‚úÖ –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ü–û–õ–Ø
            floor_unit: decryptedBusinessData.floor_unit ? 
                cryptoString(decryptedBusinessData.floor_unit) : null,
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Ñ–∏–ª—å —Å—Ä–∞–∑—É –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é
            content_status: 'awaiting_content',  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ enum
            approval_status: 'awaiting_content', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ enum
            is_approved: true,                   // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: true –≤–º–µ—Å—Ç–æ false
            is_active: false,                    // –°—Ç–∞–Ω–µ—Ç true –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            is_public: false,                    // –°—Ç–∞–Ω–µ—Ç true –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            
            // üè¢ –°–í–Ø–ó–ö–ê –° –Æ–†–ò–î–ò–ß–ï–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô
            legal_info_id: legalInfo._id,
            
            // üìä –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
            stats: {
                total_orders: 0,
                completed_orders: 0,
                total_revenue: 0,
                avg_order_value: 0,
                total_products: 0,
                active_products: 0,
                total_categories: 0,
                total_gallery_images: 0,
                last_stats_update: new Date(),
                cancelled_orders: 0
            },
            
            // üé® –†–ï–ô–¢–ò–ù–ì –ò –û–¢–ó–´–í–´
            ratings: {
                avg_rating: 0,
                total_reviews: 0,
                rating_breakdown: {
                    five_star: 0,
                    four_star: 0,
                    three_star: 0,
                    two_star: 0,
                    one_star: 0
                }
            },
            
            // üïí –†–ê–ë–û–ß–ò–ï –ß–ê–°–´ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            working_hours: {
                monday: { is_open: true, open_time: "09:00", close_time: "21:00" },
                tuesday: { is_open: true, open_time: "09:00", close_time: "21:00" },
                wednesday: { is_open: true, open_time: "09:00", close_time: "21:00" },
                thursday: { is_open: true, open_time: "09:00", close_time: "21:00" },
                friday: { is_open: true, open_time: "09:00", close_time: "21:00" },
                saturday: { is_open: true, open_time: "09:00", close_time: "21:00" },
                sunday: { is_open: false, open_time: "09:00", close_time: "21:00" }
            }
        };

        console.log('üîç PROFILE DATA PREPARED:', {
            has_all_required_fields: true,
            content_status: profileData.content_status,   // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            approval_status: profileData.approval_status, // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            category: profileData.category,
            location_coordinates: profileData.location.coordinates
        });

        console.log('‚úÖ PROFILE DATA VALIDATION:', {
            user_id: !!profileData.user_id,
            business_name: !!profileData.business_name,
            brand_name: !!profileData.brand_name,
            category: profileData.category,
            has_address: !!profileData.address,
            has_phone: !!profileData.phone,
            has_email: !!profileData.email,
            has_owner_name: !!profileData.owner_name,
            has_owner_surname: !!profileData.owner_surname,
            location_valid: profileData.location && 
                           profileData.location.type === 'Point' && 
                           Array.isArray(profileData.location.coordinates) &&
                           profileData.location.coordinates.length === 2,
            all_required_fields_present: true
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å pending
        if (legalInfo.verification_status === 'pending') {
            const legalUpdateData = {
                verification_status: 'verified',
                'verification_info.verified_by': admin._id,
                'verification_info.verified_at': new Date(),
                'verification_info.approval_notes': approval_notes || '–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–æ–±—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
            };

            await updateLegalInfoStatus(id, legalUpdateData);
            console.log('‚úÖ LEGAL STATUS UPDATED TO VERIFIED');
        }

        // ‚úÖ –°–û–ó–î–ê–ï–ú –ü–†–û–§–ò–õ–¨ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const newProfile = await createPartnerProfile(profileData);

        console.log('‚úÖ PROFILE CREATED SUCCESSFULLY:', {
            profile_id: newProfile._id,
            business_name: newProfile.business_name,
            brand_name: newProfile.brand_name,
            category: newProfile.category,
            is_approved: newProfile.is_approved,
            status: newProfile.status,
            content_status: newProfile.content_status
        });

        // ‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢
        res.status(200).json({
            result: true,
            message: "üéâ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–æ–±—Ä–µ–Ω—ã –∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω!",
            legal_info: {
                id: legalInfo._id,
                status: 'verified',
                verified_by: admin._id,
                verified_at: new Date(),
                approval_notes: approval_notes
            },
            profile: {
                id: newProfile._id,
                business_name: newProfile.business_name,
                brand_name: newProfile.brand_name,
                category: newProfile.category,
                is_approved: newProfile.is_approved,
                is_active: newProfile.is_active,
                is_published: newProfile.is_published,
                status: newProfile.status,
                content_status: newProfile.content_status,
                location: newProfile.location
            },
            next_step: {
                action: "add_menu_content",
                description: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –∏ –ø—Ä–æ–¥—É–∫—Ç—ã",
                available_endpoints: {
                    menu_categories: "POST /api/partners/menu/categories",
                    menu_products: "POST /api/partners/menu/products",
                    profile_update: `PUT /api/partners/profile/${newProfile._id}`,
                    menu_stats: "GET /api/partners/menu/stats"
                }
            },
            workflow: {
                current_stage: 4,
                total_stages: 6,
                stage_description: "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç",
                completion_percentage: 67, // 4/6 * 100
                next_stage: "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"
            },
            business_rules: {
                partner_type: newProfile.category,
                menu_management: {
                    can_create_categories: true,
                    can_add_products: true,
                    supports_options: newProfile.category === 'restaurant',
                    supports_packaging: newProfile.category === 'store'
                },
                publication_requirements: {
                    min_categories: 1,
                    min_products: 1,
                    profile_completion: "required"
                }
            }
        });

    } catch (error) {
        console.error('üö® APPROVE LEGAL - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};


/**
 * 4. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * POST /api/admin/partners/legal/:id/reject
 */
const rejectLegalInfo = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { rejection_reason, correction_notes } = req.body;

        console.log('üîç REJECT LEGAL - Start:', {
            legal_id: id,
            admin_id: admin._id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!rejection_reason) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        const legalInfo = await PartnerLegalInfo.findById(id);
        
        if (!legalInfo) {
            return res.status(404).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (legalInfo.verification_status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –°—Ç–∞—Ç—É—Å: ${legalInfo.verification_status}`
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const updateData = {
            verification_status: 'rejected',
            'verification_info.rejected_by': admin._id,
            'verification_info.rejected_at': new Date(),
            'verification_info.rejection_reason': rejection_reason,
            'verification_info.correction_notes': correction_notes
        };

        await updateLegalInfoStatus(id, updateData);

        console.log('‚úÖ REJECT LEGAL - Success');

        res.status(200).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
            legal_info: {
                id: id,
                status: 'rejected',
                rejection_reason: rejection_reason,
                correction_notes: correction_notes
            }
        });

    } catch (error) {
        console.error('üö® REJECT LEGAL - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

/**
 * 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 * GET /api/admin/partners/requests
 */
const getAllRequests = async (req, res) => {
    try {
        const { admin } = req;
        const { 
            status, 
            category, 
            page = 1, 
            limit = 10,
            sortBy = 'createdAt',
            sortOrder = 'desc'
        } = req.query;

        console.log('üîç GET ALL REQUESTS - Start:', {
            admin_role: admin.role,
            filters: { status, category }
        });

        // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
        const filters = {};
        if (status) filters.status = status;
        if (category) filters['business_data.category'] = category;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const result = await getPartnerRequests(
            filters,
            { page, limit, sortBy, sortOrder }
        );

        console.log('‚úÖ GET ALL REQUESTS - Success:', {
            found: result.requests.length,
            total: result.total
        });

        res.status(200).json({
            result: true,
            message: "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω",
            requests: result.requests,
            pagination: {
                current_page: result.page,
                total_pages: result.totalPages,
                total_items: result.total,
                items_per_page: limit
            }
        });

    } catch (error) {
        console.error('üö® GET ALL REQUESTS - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫",
            error: error.message
        });
    }
};

/**
 * 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
 * GET /api/admin/partners/requests/:id
 */
const getRequestDetails = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;

        console.log('üîç GET REQUEST DETAILS - Start:', {
            request_id: id,
            admin_role: admin.role
        });

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const details = await getPartnerRequestDetails(id);

        if (!details || !details.request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        const decryptedData = {
            phone: details.request.personal_data.phone ? 
                decryptString(details.request.personal_data.phone) : null,
            address: details.request.business_data.address ? 
                decryptString(details.request.business_data.address) : null
        };

        console.log('‚úÖ GET REQUEST DETAILS - Success');

        res.status(200).json({
            result: true,
            message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –ø–æ–ª—É—á–µ–Ω–∞",
            request: details.request,
            legal_info: details.legalInfo,
            profile: details.profile,
            decrypted_data: decryptedData,
            workflow: {
                current_stage: details.request.workflow_stage,
                status: details.request.status,
                has_legal_info: !!details.legalInfo,
                has_profile: !!details.profile
            }
        });

    } catch (error) {
        console.error('üö® GET REQUEST DETAILS - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ",
            error: error.message
        });
    }
};
const getAllProfiles = async (req, res) => {
    try {
        const { admin } = req;
        const { 
            category, 
            is_active,
            is_public,
            page = 1, 
            limit = 10,
            sortBy = 'createdAt',
            sortOrder = 'desc'
        } = req.query;

        // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
        const filters = {};
        if (category) filters.category = category;
        if (is_active !== undefined) filters.is_active = is_active === 'true';
        if (is_public !== undefined) filters.is_public = is_public === 'true';

        const skip = (page - 1) * limit;
        const sort = { [sortBy]: sortOrder === 'desc' ? -1 : 1 };

        const profiles = await PartnerProfile
            .find(filters)
            .select('business_name brand_name category is_active is_public content_status approval_status createdAt updatedAt stats')
            .sort(sort)
            .skip(skip)
            .limit(parseInt(limit));

        const total = await PartnerProfile.countDocuments(filters);

        res.status(200).json({
            result: true,
            message: "–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—É—á–µ–Ω",
            profiles: profiles,
            pagination: {
                current_page: parseInt(page),
                total_pages: Math.ceil(total / limit),
                total_items: total,
                items_per_page: parseInt(limit)
            }
        });

    } catch (error) {
        console.error('GET ALL PROFILES - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π",
            error: error.message
        });
    }
};

const getProfileDetails = async (req, res) => {
    try {
        const { id } = req.params;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Ñ–∏–ª—è"
            });
        }

        const profile = await PartnerProfile.findById(id);
        if (!profile) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            });
        }

        res.status(200).json({
            result: true,
            message: "–î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–µ–Ω—ã",
            profile: profile
        });

    } catch (error) {
        console.error('GET PROFILE DETAILS - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è",
            error: error.message
        });
    }
};

/**
 * 7. –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * POST /api/admin/partners/profiles/:id/publish
 */

const publishPartner = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { publish_notes } = req.body;

        console.log('üîç PUBLISH PARTNER - Start:', {
            profile_id: id,
            admin_id: admin._id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Ñ–∏–ª—è"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const profile = await PartnerProfile.findById(id);
        
        if (!profile) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            });
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –º–æ–¥–µ–ª–∏
        if (profile.is_public === true) {
            return res.status(400).json({
                result: false,
                message: `–ü–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä –æ–¥–æ–±—Ä–µ–Ω
        if (!profile.is_approved) {
            return res.status(400).json({
                result: false,
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const productsCount = await Product.countDocuments({ 
            partner_id: id,
            is_active: true 
        });

        if (productsCount === 0) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π"
            });
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–¥–µ–ª–∏
        const publishData = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            is_active: true,          // –ê–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã  
            is_public: true,          // –í–∏–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º
            
            // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
            approved_by: admin._id,
            approved_at: new Date(),
            published_at: new Date(),
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_status: 'approved',    // –ö–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω
            approval_status: 'approved',   // –ü—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω
        };

        // –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const publishedProfile = await publishPartnerProfile(id, publishData);

        console.log('‚úÖ PUBLISH PARTNER - Success:', {
            profile_id: publishedProfile._id,
            is_active: publishedProfile.is_active,
            is_public: publishedProfile.is_public
        });

        res.status(200).json({
            result: true,
            message: "üéâ –ü–∞—Ä—Ç–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
            profile: {
                id: publishedProfile._id,
                business_name: publishedProfile.business_name,
                is_active: publishedProfile.is_active,
                is_public: publishedProfile.is_public,
                content_status: publishedProfile.content_status,
                approval_status: publishedProfile.approval_status,
                published_at: publishedProfile.published_at
            },
            workflow: {
                stage: 6,
                status: 'completed',
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã"
            }
        });

    } catch (error) {
        console.error('üö® PUBLISH PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    }
};



export {
    approvePartnerRequest,
    rejectPartnerRequest,
    approveLegalInfo,
    rejectLegalInfo,
    getAllRequests,
    getRequestDetails,
    getAllProfiles,
    getProfileDetails,
    publishPartner
};