// ================ controllers/AdminPartnerController.js ================
import { InitialPartnerRequest, PartnerLegalInfo, PartnerProfile, Product } from '../models/index.js';
import { 
    updatePartnerRequestStatus,
    updateLegalInfoStatus,
    createPartnerProfile,
    publishPartnerProfile,
    getPartnerRequests,
    getPartnerRequestDetails
} from '../services/Partner/admin.partner.service.js';
import { decryptString } from '../utils/crypto.js';
import mongoose from 'mongoose';

/**
 * 1. –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * POST /api/admin/partners/requests/:id/approve
 */
const approvePartnerRequest = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { approval_notes } = req.body;

        console.log('üîç APPROVE REQUEST - Start:', {
            request_id: id,
            admin_id: admin._id,
            admin_role: admin.role
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ manager –∏ owner)
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        const request = await InitialPartnerRequest.findById(id);
        
        if (!request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (request.status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const updateData = {
            status: 'approved',
            workflow_stage: 2,
            approved_by: admin._id,
            approved_at: new Date(),
            approval_notes: approval_notes || '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
        };

        const updatedRequest = await updatePartnerRequestStatus(id, updateData);

        console.log('‚úÖ APPROVE REQUEST - Success:', {
            request_id: updatedRequest._id,
            new_status: updatedRequest.status
        });

        res.status(200).json({
            result: true,
            message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
            request: {
                id: updatedRequest._id,
                status: updatedRequest.status,
                workflow_stage: updatedRequest.workflow_stage
            },
            next_step: {
                action: "submit_legal_info",
                description: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            }
        });

    } catch (error) {
        console.error('üö® APPROVE REQUEST - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
            error: error.message
        });
    }
};

/**
 * 2. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * POST /api/admin/partners/requests/:id/reject
 */
const rejectPartnerRequest = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { rejection_reason } = req.body;

        console.log('üîç REJECT REQUEST - Start:', {
            request_id: id,
            admin_id: admin._id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!rejection_reason) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        const request = await InitialPartnerRequest.findById(id);
        
        if (!request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (request.status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const updateData = {
            status: 'rejected',
            workflow_stage: 0,
            rejected_by: admin._id,
            rejected_at: new Date(),
            rejection_reason: rejection_reason
        };

        const updatedRequest = await updatePartnerRequestStatus(id, updateData);

        console.log('‚úÖ REJECT REQUEST - Success');

        res.status(200).json({
            result: true,
            message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            request: {
                id: updatedRequest._id,
                status: updatedRequest.status,
                rejection_reason: updatedRequest.rejection_reason
            }
        });

    } catch (error) {
        console.error('üö® REJECT REQUEST - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
            error: error.message
        });
    }
};

/**
 * 3. –û–¥–æ–±—Ä–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * POST /api/admin/partners/legal/:id/approve
 */
const approveLegalInfo = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { approval_notes } = req.body;

        console.log('üîç APPROVE LEGAL - Start:', {
            legal_id: id,
            admin_id: admin._id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        const legalInfo = await PartnerLegalInfo.findById(id)
            .populate('user_id')
            .populate('partner_request_id');
        
        if (!legalInfo) {
            return res.status(404).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (legalInfo.verification_status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –°—Ç–∞—Ç—É—Å: ${legalInfo.verification_status}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
        const existingProfile = await PartnerProfile.findOne({ 
            user_id: legalInfo.user_id._id 
        });

        if (existingProfile) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω"
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        const legalUpdateData = {
            verification_status: 'verified',
            'verification_info.verified_by': admin._id,
            'verification_info.verified_at': new Date(),
            'verification_info.approval_notes': approval_notes
        };

        await updateLegalInfoStatus(id, legalUpdateData);

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const request = legalInfo.partner_request_id;
        const profileData = {
            user_id: legalInfo.user_id._id,
            business_name: request.business_data.business_name,
            brand_name: request.business_data.brand_name,
            category: request.business_data.category,
            description: request.business_data.description,
            address: request.business_data.address,
            location: request.location,
            phone: request.business_data.phone,
            email: request.business_data.email,
            floor_unit: request.business_data.floor_unit,
            legal_info_id: legalInfo._id,
            status: 'draft',
            is_active: false,
            is_approved: false,
            is_public: false,
            created_by_admin: admin._id
        };

        const newProfile = await createPartnerProfile(profileData);

        console.log('‚úÖ APPROVE LEGAL - Success:', {
            profile_id: newProfile._id
        });

        res.status(200).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–æ–±—Ä–µ–Ω—ã, –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω",
            legal_info: {
                id: legalInfo._id,
                status: 'verified'
            },
            profile: {
                id: newProfile._id,
                status: newProfile.status
            },
            next_step: {
                action: "fill_content",
                description: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –º–µ–Ω—é"
            }
        });

    } catch (error) {
        console.error('üö® APPROVE LEGAL - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

/**
 * 4. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * POST /api/admin/partners/legal/:id/reject
 */
const rejectLegalInfo = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { rejection_reason, correction_notes } = req.body;

        console.log('üîç REJECT LEGAL - Start:', {
            legal_id: id,
            admin_id: admin._id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!rejection_reason) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        const legalInfo = await PartnerLegalInfo.findById(id);
        
        if (!legalInfo) {
            return res.status(404).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (legalInfo.verification_status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –°—Ç–∞—Ç—É—Å: ${legalInfo.verification_status}`
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const updateData = {
            verification_status: 'rejected',
            'verification_info.rejected_by': admin._id,
            'verification_info.rejected_at': new Date(),
            'verification_info.rejection_reason': rejection_reason,
            'verification_info.correction_notes': correction_notes
        };

        await updateLegalInfoStatus(id, updateData);

        console.log('‚úÖ REJECT LEGAL - Success');

        res.status(200).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
            legal_info: {
                id: id,
                status: 'rejected',
                rejection_reason: rejection_reason,
                correction_notes: correction_notes
            }
        });

    } catch (error) {
        console.error('üö® REJECT LEGAL - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

/**
 * 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 * GET /api/admin/partners/requests
 */
const getAllRequests = async (req, res) => {
    try {
        const { admin } = req;
        const { 
            status, 
            category, 
            page = 1, 
            limit = 10,
            sortBy = 'createdAt',
            sortOrder = 'desc'
        } = req.query;

        console.log('üîç GET ALL REQUESTS - Start:', {
            admin_role: admin.role,
            filters: { status, category }
        });

        // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
        const filters = {};
        if (status) filters.status = status;
        if (category) filters['business_data.category'] = category;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const result = await getPartnerRequests(
            filters,
            { page, limit, sortBy, sortOrder }
        );

        console.log('‚úÖ GET ALL REQUESTS - Success:', {
            found: result.requests.length,
            total: result.total
        });

        res.status(200).json({
            result: true,
            message: "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω",
            requests: result.requests,
            pagination: {
                current_page: result.page,
                total_pages: result.totalPages,
                total_items: result.total,
                items_per_page: limit
            }
        });

    } catch (error) {
        console.error('üö® GET ALL REQUESTS - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫",
            error: error.message
        });
    }
};

/**
 * 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
 * GET /api/admin/partners/requests/:id
 */
const getRequestDetails = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;

        console.log('üîç GET REQUEST DETAILS - Start:', {
            request_id: id,
            admin_role: admin.role
        });

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const details = await getPartnerRequestDetails(id);

        if (!details || !details.request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        const decryptedData = {
            phone: details.request.personal_data.phone ? 
                decryptString(details.request.personal_data.phone) : null,
            address: details.request.business_data.address ? 
                decryptString(details.request.business_data.address) : null
        };

        console.log('‚úÖ GET REQUEST DETAILS - Success');

        res.status(200).json({
            result: true,
            message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –ø–æ–ª—É—á–µ–Ω–∞",
            request: details.request,
            legal_info: details.legalInfo,
            profile: details.profile,
            decrypted_data: decryptedData,
            workflow: {
                current_stage: details.request.workflow_stage,
                status: details.request.status,
                has_legal_info: !!details.legalInfo,
                has_profile: !!details.profile
            }
        });

    } catch (error) {
        console.error('üö® GET REQUEST DETAILS - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ",
            error: error.message
        });
    }
};

/**
 * 7. –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * POST /api/admin/partners/profiles/:id/publish
 */
const publishPartner = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { publish_notes } = req.body;

        console.log('üîç PUBLISH PARTNER - Start:', {
            profile_id: id,
            admin_id: admin._id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Ñ–∏–ª—è"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const profile = await PartnerProfile.findById(id);
        
        if (!profile) {
            return res.status(404).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (profile.status !== 'draft' && profile.status !== 'pending_approval') {
            return res.status(400).json({
                result: false,
                message: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${profile.status}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const productsCount = await Product.countDocuments({ 
            partner_id: id,
            is_active: true 
        });

        if (productsCount === 0) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π"
            });
        }

        // –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const publishData = {
            status: 'active',
            is_active: true,
            is_approved: true,
            is_public: true,
            approved_by: admin._id,
            approved_at: new Date(),
            admin_notes: publish_notes || '–ü–∞—Ä—Ç–Ω–µ—Ä –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω'
        };

        const publishedProfile = await publishPartnerProfile(id, publishData);

        console.log('‚úÖ PUBLISH PARTNER - Success:', {
            profile_id: publishedProfile._id
        });

        res.status(200).json({
            result: true,
            message: "üéâ –ü–∞—Ä—Ç–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
            profile: {
                id: publishedProfile._id,
                business_name: publishedProfile.business_name,
                status: publishedProfile.status,
                is_active: publishedProfile.is_active,
                is_public: publishedProfile.is_public
            },
            workflow: {
                stage: 6,
                status: 'completed',
                message: "–ü–∞—Ä—Ç–Ω–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã"
            }
        });

    } catch (error) {
        console.error('üö® PUBLISH PARTNER - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            error: error.message
        });
    }
};

export {
    approvePartnerRequest,
    rejectPartnerRequest,
    approveLegalInfo,
    rejectLegalInfo,
    getAllRequests,
    getRequestDetails,
    publishPartner
};