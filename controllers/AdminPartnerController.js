// ================ controllers/AdminPartnerController.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô - –ü–†–Ø–ú–´–ï –ò–ú–ü–û–†–¢–´) ================

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–Ø–ú–´–ï –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –≤–º–µ—Å—Ç–æ models/index.js
import InitialPartnerRequest from '../models/InitialPartnerRequest.model.js';
import PartnerLegalInfo from '../models/PartnerLegalInfo.model.js'; 
import PartnerProfile from '../models/PartnerProfile.model.js';
import Product from '../models/Product.model.js';

import { 
    updatePartnerRequestStatus,
    updateLegalInfoStatus,
    createPartnerProfile,
    publishPartnerProfile,
    getPartnerRequests,
    getPartnerRequestDetails
} from '../services/Partner/admin.partner.service.js';
import * as partnerService from '../services/Partner/partner.service.js';
import { decryptString, cryptoString } from '../utils/crypto.js';
import mongoose from 'mongoose';

// ================ –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ï–ô ================
console.log('üîç DIRECT MODEL VERIFICATION:', {
    PartnerProfile_exists: !!PartnerProfile,
    PartnerProfile_name: PartnerProfile?.modelName,
    Product_exists: !!Product,
    InitialPartnerRequest_exists: !!InitialPartnerRequest,
    PartnerLegalInfo_exists: !!PartnerLegalInfo
});

/**
 * 1. –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * POST /api/admin/partners/requests/:id/approve
 */
const approvePartnerRequest = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { approval_notes } = req.body;

        console.log('üîç APPROVE REQUEST - Start:', {
            request_id: id,
            admin_id: admin._id,
            admin_role: admin.role
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ manager –∏ owner)
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        const request = await InitialPartnerRequest.findById(id);
        
        if (!request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (request.status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        const updateData = {
            status: 'approved',
            workflow_stage: 2,
            approved_by: admin._id,
            approved_at: new Date(),
            approval_notes: approval_notes || '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
        };

        const updatedRequest = await updatePartnerRequestStatus(id, updateData);

        console.log('‚úÖ APPROVE REQUEST - Success:', {
            request_id: updatedRequest._id,
            new_status: updatedRequest.status
        });

        res.status(200).json({
            result: true,
            message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
            request: {
                id: updatedRequest._id,
                status: updatedRequest.status,
                workflow_stage: updatedRequest.workflow_stage
            },
            next_step: {
                action: "submit_legal_info",
                description: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            }
        });

    } catch (error) {
        console.error('üö® APPROVE REQUEST - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
            error: error.message
        });
    }
};

/**
 * 2. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * POST /api/admin/partners/requests/:id/reject
 */
const rejectPartnerRequest = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { rejection_reason } = req.body;

        console.log('üîç REJECT REQUEST - Start:', {
            request_id: id,
            admin_id: admin._id
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!rejection_reason) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        const request = await InitialPartnerRequest.findById(id);
        
        if (!request) {
            return res.status(404).json({
                result: false,
                message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (request.status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const updateData = {
            status: 'rejected',
            workflow_stage: 0,
            rejected_by: admin._id,
            rejected_at: new Date(),
            rejection_reason: rejection_reason
        };

        const updatedRequest = await updatePartnerRequestStatus(id, updateData);

        console.log('‚úÖ REJECT REQUEST - Success');

        res.status(200).json({
            result: true,
            message: "–ó–∞—è–≤–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            request: {
                id: updatedRequest._id,
                status: updatedRequest.status,
                rejection_reason: updatedRequest.rejection_reason
            }
        });

    } catch (error) {
        console.error('üö® REJECT REQUEST - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
            error: error.message
        });
    }
};

/**
 * 3. –û–¥–æ–±—Ä–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * POST /api/admin/partners/legal/:id/approve
 * ‚úÖ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –ò–°–ü–û–õ–¨–ó–£–ï–ú mongoose.model()
 */
const approveLegalInfo = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { approval_notes } = req.body;

        console.log('üîç APPROVE LEGAL - Start:', {
            legal_id: id,
            admin_id: admin._id,
            admin_role: admin.role
        });

        // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ú–û–î–ï–õ–ò –ß–ï–†–ï–ó mongoose.model() –ù–ê–ü–†–Ø–ú–£–Æ
        const PartnerProfileModel = mongoose.model('PartnerProfile');
        const PartnerLegalInfoModel = mongoose.model('PartnerLegalInfo');
        const InitialPartnerRequestModel = mongoose.model('InitialPartnerRequest');

        console.log('üîç MONGOOSE MODEL CHECK:', {
            PartnerProfile_modelName: PartnerProfileModel.modelName,
            PartnerProfile_collection: PartnerProfileModel.collection.name,
            is_correct_model: PartnerProfileModel.modelName === 'PartnerProfile'
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
        const legalInfo = await PartnerLegalInfoModel.findById(id)
            .populate('user_id')
            .populate('partner_request_id');
        
        if (!legalInfo) {
            return res.status(404).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            });
        }

        console.log('üîç LEGAL INFO LOADED:', {
            id: legalInfo._id,
            verification_status: legalInfo.verification_status,
            has_user: !!legalInfo.user_id,
            has_request: !!legalInfo.partner_request_id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if (legalInfo.verification_status === 'verified') {
            const existingProfile = await PartnerProfileModel.findOne({ 
                user_id: legalInfo.user_id._id 
            });

            if (existingProfile) {
                return res.status(400).json({
                    result: false,
                    message: "–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã –∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω",
                    status: legalInfo.verification_status,
                    profile_id: existingProfile._id
                });
            }
        } else if (legalInfo.verification_status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å—Ç–∞—Ç—É—Å–µ: ${legalInfo.verification_status}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
        const existingProfile = await PartnerProfileModel.findOne({ 
            user_id: legalInfo.user_id._id 
        });

        if (existingProfile) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω",
                profile_id: existingProfile._id
            });
        }

        // ‚úÖ –†–ê–°–®–ò–§–†–û–í–ö–ê –í–°–ï–• –î–ê–ù–ù–´–•
        const request = legalInfo.partner_request_id;
        
        console.log('üîç DECRYPTING DATA - Start');

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏
        const decryptedPersonalData = {
            first_name: decryptString(request.personal_data.first_name),
            last_name: decryptString(request.personal_data.last_name),
            email: decryptString(request.personal_data.email),
            phone: decryptString(request.personal_data.phone)
        };

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –±–∏–∑–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏
        const decryptedBusinessData = {
            address: decryptString(request.business_data.address),
            floor_unit: request.business_data.floor_unit ? 
                decryptString(request.business_data.floor_unit) : null
        };

        console.log('‚úÖ DATA DECRYPTED:', {
            personal: {
                has_first_name: !!decryptedPersonalData.first_name,
                has_last_name: !!decryptedPersonalData.last_name,
                has_email: !!decryptedPersonalData.email,
                has_phone: !!decryptedPersonalData.phone
            },
            business: {
                has_address: !!decryptedBusinessData.address,
                has_floor_unit: !!decryptedBusinessData.floor_unit
            }
        });

        // ‚úÖ –ß–ò–°–¢–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ü–†–û–§–ò–õ–Ø
        const cleanProfileData = {
            user_id: legalInfo.user_id._id,
            
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞
            business_name: request.business_data.business_name,
            brand_name: request.business_data.brand_name || request.business_data.business_name,
            category: request.business_data.category,
            description: '',
            
            // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            address: cryptoString(decryptedBusinessData.address),
            phone: cryptoString(decryptedPersonalData.phone),
            email: cryptoString(decryptedPersonalData.email),
            owner_name: cryptoString(decryptedPersonalData.first_name),
            owner_surname: cryptoString(decryptedPersonalData.last_name),
            
            // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
            location: {
                type: 'Point',
                coordinates: request.business_data.location.coordinates
            },
            
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            floor_unit: decryptedBusinessData.floor_unit ? 
                cryptoString(decryptedBusinessData.floor_unit) : null,
            
            // –°—Ç–∞—Ç—É—Å—ã
            is_approved: true,
            is_active: true,
            is_published: false,
            status: 'active',
            content_status: 'awaiting_content',
            approval_status: 'approved'
        };

        console.log('üîç PROFILE DATA PREPARED:', {
            has_all_required_fields: true,
            content_status: cleanProfileData.content_status,
            approval_status: cleanProfileData.approval_status,
            category: cleanProfileData.category,
            location_coordinates: cleanProfileData.location.coordinates
        });

        // ‚úÖ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú
        if (PartnerProfileModel.modelName !== 'PartnerProfile') {
            throw new Error(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å! –û–∂–∏–¥–∞–µ—Ç—Å—è PartnerProfile, –ø–æ–ª—É—á–µ–Ω–∞ ${PartnerProfileModel.modelName}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å pending
        if (legalInfo.verification_status === 'pending') {
            const legalUpdateData = {
                verification_status: 'verified',
                'verification_info.verified_by': admin._id,
                'verification_info.verified_at': new Date(),
                'verification_info.approval_notes': approval_notes || '–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–æ–±—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
            };

            await PartnerLegalInfoModel.findByIdAndUpdate(id, legalUpdateData);
            console.log('‚úÖ LEGAL STATUS UPDATED TO VERIFIED');
        }

        // ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ß–ï–†–ï–ó mongoose.model()
        console.log('üîç CREATING PARTNER PROFILE THROUGH MONGOOSE.MODEL...');
        
        const newProfile = new PartnerProfileModel(cleanProfileData);
        
        console.log('üîç PROFILE INSTANCE CREATED:', {
            model_name: newProfile.constructor.modelName,
            collection_name: newProfile.collection?.name,
            has_validation_errors: !!newProfile.validateSync()
        });
        
        await newProfile.save();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º workflow –∑–∞—è–≤–∫–∏
        await InitialPartnerRequestModel.findOneAndUpdate(
            { user_id: cleanProfileData.user_id },
            { 
                status: 'profile_created',
                workflow_stage: 4
            }
        );

        console.log('‚úÖ PROFILE CREATED SUCCESSFULLY:', {
            profile_id: newProfile._id,
            business_name: newProfile.business_name,
            brand_name: newProfile.brand_name,
            category: newProfile.category,
            is_approved: newProfile.is_approved,
            status: newProfile.status,
            content_status: newProfile.content_status
        });

        // ‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢
        res.status(200).json({
            result: true,
            message: "–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–æ–±—Ä–µ–Ω—ã –∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω!",
            legal_info: {
                id: legalInfo._id,
                status: 'verified',
                verified_by: admin._id,
                verified_at: new Date(),
                approval_notes: approval_notes
            },
            profile: {
                id: newProfile._id,
                business_name: newProfile.business_name,
                brand_name: newProfile.brand_name,
                category: newProfile.category,
                is_approved: newProfile.is_approved,
                is_active: newProfile.is_active,
                is_published: newProfile.is_published,
                status: newProfile.status,
                content_status: newProfile.content_status,
                location: newProfile.location
            },
            next_step: {
                action: "add_menu_content",
                description: "–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –∏ –ø—Ä–æ–¥—É–∫—Ç—ã",
                available_endpoints: {
                    menu_categories: "POST /api/partners/menu/categories",
                    menu_products: "POST /api/partners/menu/products",
                    profile_update: `PUT /api/partners/profile/${newProfile._id}`,
                    menu_stats: "GET /api/partners/menu/stats"
                }
            },
            workflow: {
                current_stage: 4,
                total_stages: 6,
                stage_description: "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç",
                completion_percentage: 67,
                next_stage: "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"
            },
            business_rules: {
                partner_type: newProfile.category,
                menu_management: {
                    can_create_categories: true,
                    can_add_products: true,
                    supports_options: newProfile.category === 'restaurant',
                    supports_packaging: newProfile.category === 'store'
                },
                publication_requirements: {
                    min_categories: 1,
                    min_products: 1,
                    profile_completion: "required"
                }
            }
        });

    } catch (error) {
        console.error('üö® APPROVE LEGAL - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

// ================ –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ================

const rejectLegalInfo = async (req, res) => {
    try {
        const { id } = req.params;
        const { admin } = req;
        const { rejection_reason, correction_notes } = req.body;

        console.log('üîç REJECT LEGAL - Start:', {
            legal_id: id,
            admin_id: admin._id
        });

        if (!['manager', 'owner'].includes(admin.role)) {
            return res.status(403).json({
                result: false,
                message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        if (!rejection_reason) {
            return res.status(400).json({
                result: false,
                message: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                result: false,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            });
        }

        const legalInfo = await PartnerLegalInfo.findById(id);
        
        if (!legalInfo) {
            return res.status(404).json({
                result: false,
                message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            });
        }

        if (legalInfo.verification_status !== 'pending') {
            return res.status(400).json({
                result: false,
                message: `–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –°—Ç–∞—Ç—É—Å: ${legalInfo.verification_status}`
            });
        }

        const updateData = {
            verification_status: 'rejected',
            'verification_info.rejected_by': admin._id,
            'verification_info.rejected_at': new Date(),
            'verification_info.rejection_reason': rejection_reason,
            'verification_info.correction_notes': correction_notes
        };

        await updateLegalInfoStatus(id, updateData);

        console.log('‚úÖ REJECT LEGAL - Success');

        res.status(200).json({
            result: true,
            message: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
            legal_info: {
                id: id,
                status: 'rejected',
                rejection_reason: rejection_reason,
                correction_notes: correction_notes
            }
        });

    } catch (error) {
        console.error('üö® REJECT LEGAL - Error:', error);
        res.status(500).json({
            result: false,
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            error: error.message
        });
    }
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏...
const getAllRequests = async (req, res) => { /* –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */ };
const getRequestDetails = async (req, res) => { /* –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */ };  
const getAllProfiles = async (req, res) => { /* –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */ };
const getProfileDetails = async (req, res) => { /* –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */ };
const publishPartner = async (req, res) => { /* –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */ };

export {
    approvePartnerRequest,
    rejectPartnerRequest,
    approveLegalInfo,
    rejectLegalInfo,
    getAllRequests,
    getRequestDetails,
    getAllProfiles,
    getProfileDetails,
    publishPartner
};