// controllers/PublicController.js - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
import {
  getPublicRestaurantCatalog,
  getPublicRestaurantDetails,
  getPublicRestaurantMenu,
  searchPublicContent,
  getPublicRestaurantCategories,
  getPopularRestaurants as getPopularRestaurantsService  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –∏–º–ø–æ—Ä—Ç
} from '../services/Public/public.service.js';

/**
 * üè™ –ü–û–õ–£–ß–ò–¢–¨ –ö–ê–¢–ê–õ–û–ì –†–ï–°–¢–û–†–ê–ù–û–í
 * GET /api/public/catalog
 */
const getCatalog = async (req, res) => {
  try {
    const {
      category,
      search,
      lat,
      lng,
      radius = 10,
      sort_by = 'popular',
      is_open_now,
      min_rating,
      delivery_fee_max,
      limit = 20,
      offset = 0
    } = req.query;

    console.log('üè™ GET PUBLIC CATALOG:', {
      category,
      search,
      coordinates: lat && lng ? `${lat},${lng}` : null,
      limit,
      offset
    });

    const result = await getPublicRestaurantCatalog({
      category,
      search,
      lat: lat ? parseFloat(lat) : null,
      lng: lng ? parseFloat(lng) : null,
      radius: parseInt(radius),
      sort_by,
      is_open_now: is_open_now === 'true',
      min_rating: min_rating ? parseFloat(min_rating) : null,
      delivery_fee_max: delivery_fee_max ? parseFloat(delivery_fee_max) : null,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      data: result.restaurants,
      pagination: result.pagination,
      filters: result.filters_applied,
      total_found: result.pagination.total
    });

  } catch (error) {
    console.error('üö® GET CATALOG Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"
    });
  }
};

/**
 * üç¥ –ü–û–õ–£–ß–ò–¢–¨ –î–ï–¢–ê–õ–ò –†–ï–°–¢–û–†–ê–ù–ê
 * GET /api/public/restaurants/:id
 */
const getRestaurantById = async (req, res) => {
  try {
    const { id } = req.params;

    console.log('üç¥ GET RESTAURANT DETAILS:', { restaurantId: id });

    const restaurant = await getPublicRestaurantDetails(id);

    res.status(200).json({
      result: true,
      message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
      restaurant
    });

  } catch (error) {
    console.error('üö® GET RESTAURANT Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;
    
    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ"
    });
  }
};

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –ú–ï–ù–Æ –†–ï–°–¢–û–†–ê–ù–ê
 * GET /api/public/restaurants/:id/menu
 */
const getRestaurantMenu = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      category,
      search,
      sort_by = 'default',
      is_available_only = 'true',
      limit = 50,
      offset = 0
    } = req.query;

    console.log('üìã GET RESTAURANT MENU:', {
      restaurantId: id,
      category,
      search,
      sort_by
    });

    const result = await getPublicRestaurantMenu(id, {
      category,
      search,
      sort_by,
      is_available_only: is_available_only === 'true',
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: "–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
      restaurant: result.restaurant,
      menu: result.menu,
      pagination: result.pagination,
      filters: result.filters_applied
    });

  } catch (error) {
    console.error('üö® GET MENU Error:', error);
    
    const statusCode = error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;
    
    res.status(statusCode).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
    });
  }
};

/**
 * üîç –ü–û–ò–°–ö –†–ï–°–¢–û–†–ê–ù–û–í –ò –ë–õ–Æ–î
 * GET /api/public/restaurants/search
 */
const searchRestaurants = async (req, res) => {
  try {
    const {
      q: query,
      search_type = 'all',
      lat,
      lng,
      radius = 10,
      limit = 20
    } = req.query;

    if (!query || query.trim().length < 2) {
      return res.status(400).json({
        result: false,
        message: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
      });
    }

    console.log('üîç SEARCH RESTAURANTS:', {
      query: query.substring(0, 20),
      search_type,
      has_location: !!(lat && lng)
    });

    const result = await searchPublicContent(query, {
      search_type,
      lat: lat ? parseFloat(lat) : null,
      lng: lng ? parseFloat(lng) : null,
      radius: parseInt(radius),
      limit: parseInt(limit)
    });

    res.status(200).json({
      result: true,
      message: `–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${result.total_found}`,
      query,
      search_results: {
        restaurants: result.restaurants,
        dishes: result.dishes,
        total_found: result.total_found
      }
    });

  } catch (error) {
    console.error('üö® SEARCH Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞"
    });
  }
};

/**
 * üìÇ –ü–û–õ–£–ß–ò–¢–¨ –ö–ê–¢–ï–ì–û–†–ò–ò –†–ï–°–¢–û–†–ê–ù–û–í
 * GET /api/public/restaurants/categories
 */
const getCategories = async (req, res) => {
  try {
    console.log('üìÇ GET CATEGORIES');

    const result = await getPublicRestaurantCategories();

    res.status(200).json({
      result: true,
      message: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
      categories: result.categories,
      total_categories: result.total_categories,
      total_restaurants: result.total_restaurants
    });

  } catch (error) {
    console.error('üö® GET CATEGORIES Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    });
  }
};

/**
 * ‚≠ê –ü–û–õ–£–ß–ò–¢–¨ –ü–û–ü–£–õ–Ø–†–ù–´–ï –†–ï–°–¢–û–†–ê–ù–´
 * GET /api/public/restaurants/popular
 */
const getPopularRestaurants = async (req, res) => {
  try {
    const { limit = 10 } = req.query;

    console.log('‚≠ê GET POPULAR RESTAURANTS');

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    const result = await getPopularRestaurantsService(parseInt(limit));

    res.status(200).json({
      result: true,
      message: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
      restaurants: result.restaurants,
      total: result.total
    });

  } catch (error) {
    console.error('üö® GET POPULAR Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"
    });
  }
};

/**
 * üè∑Ô∏è –ü–û–õ–£–ß–ò–¢–¨ –†–ï–°–¢–û–†–ê–ù–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò
 * GET /api/public/restaurants/category/:category
 */
const getRestaurantsByCategory = async (req, res) => {
  try {
    const { category } = req.params;
    const {
      lat,
      lng,
      radius = 10,
      sort_by = 'popular',
      limit = 20,
      offset = 0
    } = req.query;

    console.log('üè∑Ô∏è GET RESTAURANTS BY CATEGORY:', { category });

    const result = await getPublicRestaurantCatalog({
      category,
      lat: lat ? parseFloat(lat) : null,
      lng: lng ? parseFloat(lng) : null,
      radius: parseInt(radius),
      sort_by,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.status(200).json({
      result: true,
      message: `–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`,
      category,
      restaurants: result.restaurants,
      pagination: result.pagination,
      total_found: result.pagination.total
    });

  } catch (error) {
    console.error('üö® GET BY CATEGORY Error:', error);
    res.status(500).json({
      result: false,
      message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    });
  }
};

export {
  getCatalog,
  getRestaurantById,
  getRestaurantMenu,
  searchRestaurants,
  getCategories,
  getPopularRestaurants,
  getRestaurantsByCategory
};